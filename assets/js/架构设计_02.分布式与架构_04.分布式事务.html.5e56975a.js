"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[74869],{12908:(l,e,i)=>{i.r(e),i.d(e,{comp:()=>c,data:()=>a});var t=i(6254);const o={},c=(0,i(36995).A)(o,[["render",function(l,e){return(0,t.uX)(),(0,t.CE)("div",null,e[0]||(e[0]=[(0,t.Fv)('<h2 id="分布式事务相关算法" tabindex="-1"><a class="header-anchor" href="#分布式事务相关算法"><span>分布式事务相关算法：</span></a></h2><h3 id="角色" tabindex="-1"><a class="header-anchor" href="#角色"><span>角色：</span></a></h3><ul><li>协调者</li><li>参与者</li></ul><h3 id="xa模式、at模式" tabindex="-1"><a class="header-anchor" href="#xa模式、at模式"><span>XA模式、AT模式：</span></a></h3><ul><li>XA模式：2PC，使用回滚</li><li>AT模式：TCC，利用补偿</li></ul><h3 id="_2pc" tabindex="-1"><a class="header-anchor" href="#_2pc"><span>2PC ：</span></a></h3><ul><li><code>准备阶段</code>： <ul><li><code>协调者</code>向<code>所有参与者</code>发送准备请求，参与者执行<code>预操作</code>并记录日志，<code>但不提交</code>，进入<code>准备阶段</code>。</li></ul></li><li><code>提交阶段</code>： <ul><li>如果<code>所有参与者</code>都<code>准备就绪</code>，协调者发送提交请求，参与者提交操作；</li><li>否则，<code>协调者</code>发送<code>回滚请求</code>，参与者回滚操作。</li></ul></li><li>存在的问题： <ul><li>协调者单点故障问题</li><li>参与者等待指令期间阻塞</li><li>延迟问题</li></ul></li><li>适用场景： <ul><li>在某些需要强一致性的分布式事务管理系统</li><li>MySQL、ZooKeeper</li></ul></li></ul><h3 id="_3pc" tabindex="-1"><a class="header-anchor" href="#_3pc"><span>3PC ：</span></a></h3><ul><li>目标：在2PC基础上<code>减少阻塞</code>和<code>单点故障</code>问题</li><li><code>准备阶段</code>： <ul><li>每个参与者执行事务操作，但不提交，只写入日志并锁定资源，进入<code>准备阶段</code></li></ul></li><li><code>预备提交阶段</code>： <ul><li><code>协调者</code>在收到所有参与者的准备好的响应后，<code>向所有参与者发送预备提交请求</code></li><li>参与者在接收到预备提交请求后，<code>执行预备提交操作</code>，将事务状态标记为&quot;可以提交&quot;，但仍不实际提交事务，进入<code>预备提交阶段</code>。</li><li>优点： <ul><li>参与者无需阻塞在准备阶段，进一步减少了协调者和参与者的等待时间</li><li>协调者发生故障，参与者也能根据事务状态决定是否提交或回滚</li></ul></li><li>本质：通过减少锁粒度，避免阻塞</li></ul></li><li><code>提交阶段</code>：</li><li>存在的问题： <ul><li>比2PC更复杂，需要处理更多的状态和通信步骤</li><li>多了一个预备提交阶段的RTT</li><li>仍然存在阻塞问题</li></ul></li><li>适用场景： <ul><li>分布式文件系统、大型分布式系统的配置管理工具</li></ul></li></ul><h3 id="tcc" tabindex="-1"><a class="header-anchor" href="#tcc"><span>TCC ：</span></a></h3><ul><li><p>定义：</p><ul><li>TCC本质上是一个应用层面的2PC，对代码的侵入性强</li><li>TCC（Try-Confirm/Cancel）模式是一种柔性事务管理方式，适用于长时间运行的分布式事务。</li><li>TCC模式通过将事务分为三个步骤：Try、Confirm和Cancel，来确保分布式系统中的一致性和可靠性。</li></ul></li><li><p>核心：</p><ul><li>业务涉及上<code>针对每个操作，都要实现对应的确认和补偿操作</code></li></ul></li><li><p>Try 阶段：</p><ul><li>在Try阶段，各个参与者执行必要的检查和资源预留操作，确保后续的Confirm阶段能够顺利进行。这一步主要用于验证所有操作是否可以成功执行，并预留所需资源。</li></ul></li><li><p>Confirm 阶段：</p><ul><li>各个参与者正式提交之前预留的资源和操作。这一步确保所有参与者的操作被最终确认和提交。</li></ul></li><li><p>Cancel 阶段：</p><ul><li>在Cancel阶段，如果Try阶段的任何操作失败或事务被取消，各个参与者回滚之前预留的资源和操作，确保系统恢复到初始状态。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b09c47c2068957ac3181dfecfdc9e768.png" width="60%"></li></ul></li><li><p>缺点：</p><ul><li>实现复杂，业务耦合度较高，开发成本高</li></ul></li><li><p>优点：</p><ul><li>灵活性高，允许在事务的每个阶段进行检查和预留资源</li><li>减少阻塞时间，将事务分为三个步骤</li><li>补偿机制，Cancel阶段回滚</li></ul></li><li><p>适用场景：</p><ul><li>分布式订单系统、分布式支付系统</li></ul></li></ul>',11)]))}]]),a=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/04.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"04.分布式事务","lang":"zh-CN","frontmatter":{"title":"04.分布式事务","date":"2025-06-17T14:39:04.000Z","author":"Navyum","tags":["架构设计","分布式事务"],"categories":["分布式"],"article":true,"index":true,"headerDepth":2,"sticky":true,"star":true,"description":"分布式事务相关算法： 角色： 协调者 参与者 XA模式、AT模式： XA模式：2PC，使用回滚 AT模式：TCC，利用补偿 2PC ： 准备阶段： 协调者向所有参与者发送准备请求，参与者执行预操作并记录日志，但不提交，进入准备阶段。 提交阶段： 如果所有参与者都准备就绪，协调者发送提交请求，参与者提交操作； 否则，协调者发送回滚请求，参与者回滚操作。 ...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/04.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"04.分布式事务"}],["meta",{"property":"og:description","content":"分布式事务相关算法： 角色： 协调者 参与者 XA模式、AT模式： XA模式：2PC，使用回滚 AT模式：TCC，利用补偿 2PC ： 准备阶段： 协调者向所有参与者发送准备请求，参与者执行预操作并记录日志，但不提交，进入准备阶段。 提交阶段： 如果所有参与者都准备就绪，协调者发送提交请求，参与者提交操作； 否则，协调者发送回滚请求，参与者回滚操作。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"架构设计"}],["meta",{"property":"article:tag","content":"分布式事务"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:39:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04.分布式事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:39:04.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"架构设计/02.分布式与架构/04.分布式事务.md","localizedDate":"2025年6月17日","excerpt":"<h2>分布式事务相关算法：</h2>\\n<h3>角色：</h3>\\n<ul>\\n<li>协调者</li>\\n<li>参与者</li>\\n</ul>\\n<h3>XA模式、AT模式：</h3>\\n<ul>\\n<li>XA模式：2PC，使用回滚</li>\\n<li>AT模式：TCC，利用补偿</li>\\n</ul>\\n<h3>2PC ：</h3>\\n<ul>\\n<li><code>准备阶段</code>：\\n<ul>\\n<li><code>协调者</code>向<code>所有参与者</code>发送准备请求，参与者执行<code>预操作</code>并记录日志，<code>但不提交</code>，进入<code>准备阶段</code>。</li>\\n</ul>\\n</li>\\n<li><code>提交阶段</code>：\\n<ul>\\n<li>如果<code>所有参与者</code>都<code>准备就绪</code>，协调者发送提交请求，参与者提交操作；</li>\\n<li>否则，<code>协调者</code>发送<code>回滚请求</code>，参与者回滚操作。</li>\\n</ul>\\n</li>\\n<li>存在的问题：\\n<ul>\\n<li>协调者单点故障问题</li>\\n<li>参与者等待指令期间阻塞</li>\\n<li>延迟问题</li>\\n</ul>\\n</li>\\n<li>适用场景：\\n<ul>\\n<li>在某些需要强一致性的分布式事务管理系统</li>\\n<li>MySQL、ZooKeeper</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},36995:(l,e)=>{e.A=(l,e)=>{const i=l.__vccOpts||l;for(const[l,t]of e)i[l]=t;return i}}}]);