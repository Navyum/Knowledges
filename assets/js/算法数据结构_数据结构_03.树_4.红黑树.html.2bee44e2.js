"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[44581],{36995:(t,a)=>{a.A=(t,a)=>{const e=t.__vccOpts||t;for(const[t,n]of a)e[t]=n;return e}},76926:(t,a,e)=>{e.r(a),e.d(a,{comp:()=>l,data:()=>s});var n=e(6254);const i={},l=(0,e(36995).A)(i,[["render",function(t,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<h2 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h2><ul><li>红黑树是一种自平衡的<code>二叉查找树</code>，属于AVL平衡树的一种特殊形式</li></ul><h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征：</span></a></h3><ul><li>每个节点要么是红色，要么是黑色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL）是黑色。</li><li>如果一个节点是红色，则其两个子节点必须是黑色。</li><li>从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点。</li></ul><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a6a9500ae0b135906603b4e8008e51b5.png" width="60%"><p>红黑树的这5条性质，使得一棵n个结点是红黑树始终保持了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>的高度</p><h3 id="解决了avl树的什么问题" tabindex="-1"><a class="header-anchor" href="#解决了avl树的什么问题"><span>解决了AVL树的什么问题：</span></a></h3><ul><li>AVL的左右子树高度差不能超过1，每次进行插入/删除操作时，几乎都需要通过旋转操作保持平衡</li><li>在频繁进行插入/删除的场景中，频繁的旋转操作使得AVL的性能大打折扣</li><li>红黑树通过牺牲严格的平衡，换取插入/删除时少量的旋转操作，整体性能优于AVL。红黑树插入时的不平衡，不超过两次旋转就可以解决；删除时的不平衡，不超过三次旋转就能解决</li><li>红黑树的红黑规则，保证最坏的情况下，也能在O(log 2N)时间内完成查找操作</li></ul>',8)]))}]]),s=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/4.%E7%BA%A2%E9%BB%91%E6%A0%91.html","title":"4.红黑树","lang":"zh-CN","frontmatter":{"title":"4.红黑树","date":"2025-06-17T14:53:16.000Z","author":"Navyum","tags":["红黑树"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"红黑树 红黑树是一种自平衡的二叉查找树，属于AVL平衡树的一种特殊形式 特征： 每个节点要么是红色，要么是黑色。 根节点是黑色。 每个叶子节点（NIL）是黑色。 如果一个节点是红色，则其两个子节点必须是黑色。 从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点。 红黑树的这5条性质，使得一棵n个结点是红黑树始终保持了logn的高度 解决了AVL...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/4.%E7%BA%A2%E9%BB%91%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"4.红黑树"}],["meta",{"property":"og:description","content":"红黑树 红黑树是一种自平衡的二叉查找树，属于AVL平衡树的一种特殊形式 特征： 每个节点要么是红色，要么是黑色。 根节点是黑色。 每个叶子节点（NIL）是黑色。 如果一个节点是红色，则其两个子节点必须是黑色。 从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点。 红黑树的这5条性质，使得一棵n个结点是红黑树始终保持了logn的高度 解决了AVL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"红黑树"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:53:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.红黑树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:53:16.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":1.23,"words":368},"filePathRelative":"算法数据结构/数据结构/03.树/4.红黑树.md","localizedDate":"2025年6月17日","excerpt":"<h2>红黑树</h2>\\n<ul>\\n<li>红黑树是一种自平衡的<code>二叉查找树</code>，属于AVL平衡树的一种特殊形式</li>\\n</ul>\\n<h3>特征：</h3>\\n<ul>\\n<li>每个节点要么是红色，要么是黑色。</li>\\n<li>根节点是黑色。</li>\\n<li>每个叶子节点（NIL）是黑色。</li>\\n<li>如果一个节点是红色，则其两个子节点必须是黑色。</li>\\n<li>从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点。</li>\\n</ul>\\n<img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a6a9500ae0b135906603b4e8008e51b5.png\\" width=\\"60%\\">","autoDesc":true}')}}]);