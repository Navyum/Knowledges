"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[65448],{36995:(t,e)=>{e.A=(t,e)=>{const r=t.__vccOpts||t;for(const[t,n]of e)r[t]=n;return r}},76978:(t,e,r)=>{r.r(e),r.d(e,{comp:()=>a,data:()=>p});var n=r(6254);const i={},a=(0,r(36995).A)(i,[["render",function(t,e){return(0,n.uX)(),(0,n.CE)("div",null,e[0]||(e[0]=[(0,n.Fv)("<p>在 Go 中，interface 和 struct 都是非常重要的类型，但它们的使用场景有所不同。</p><p>使用 interface 的场景：</p><ol><li><p>抽象类型：当我们需要定义一个抽象类型时，可以使用 interface。抽象类型是指只定义了方法集合，但没有具体实现的类型。</p></li><li><p>多态：当我们需要实现多态时，可以使用 interface。多态是指同一种类型的对象，在不同的情况下表现出不同的行为。</p></li><li><p>解耦：当我们需要解耦时，可以使用 interface。解耦是指将两个或多个模块之间的耦合度降低，从而提高代码的复用性和可维护性。</p></li><li><p>主要用来约束协议和实现多态 使用 struct 的场景：</p></li><li><p>封装数据：当我们需要封装数据时，可以使用 struct。封装数据是指将数据和相关的操作封装在一起，从而提高代码的可读性和可维护性。</p></li><li><p>定义数据结构：当我们需要定义一种数据结构时，可以使用 struct。数据结构是指一种数据的组织方式，可以用来表示实际问题中的对象。</p></li><li><p>定义对象：当我们需要定义一种对象时，可以使用 struct。对象是指一种具有状态和行为的实体，可以用来表示实际问题中的对象。</p></li></ol><p>多态（Polymorphism）是面向对象编程中的一个重要概念，它指的是同一个方法或同一个类在不同情况下具有不同的表现形式和功能。</p><p>具体来说，多态有两种类型：编译时多态和运行时多态。</p><p>编译时多态是指在编译时就能确定对象的类型，从而决定调用哪个方法。它是通过方法重载（Overloading）实现的，即同一个类中有多个同名方法，但参数类型或个数不同，编译器根据参数类型或个数的不同来确定调用哪个方法。</p><p>运行时多态是指在运行时才能确定对象的类型，从而决定调用哪个方法。它是通过方法重写（Overriding）和接口实现（Interface）实现的。在方法重写中，子类重写了父类的方法，当调用该方法时，实际上是调用了子类中的方法；在接口实现中，实现了同一个接口的不同类，可以根据实际情况调用不同类中的方法。</p><p>多态是面向对象编程的重要特性，它可以提高代码的灵活性和可扩展性，使程序更加易于维护和扩展。</p>",8)]))}]]),p=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/interface%E5%92%8Cstruct%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"interface和struct的使用场景","lang":"zh-CN","frontmatter":{"title":"interface和struct的使用场景","author":"navyum","date":"2025-06-21T22:25:04.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"在 Go 中，interface 和 struct 都是非常重要的类型，但它们的使用场景有所不同。 使用 interface 的场景： 抽象类型：当我们需要定义一个抽象类型时，可以使用 interface。抽象类型是指只定义了方法集合，但没有具体实现的类型。 多态：当我们需要实现多态时，可以使用 interface。多态是指同一种类型的对象，在不同的情...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/interface%E5%92%8Cstruct%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"interface和struct的使用场景"}],["meta",{"property":"og:description","content":"在 Go 中，interface 和 struct 都是非常重要的类型，但它们的使用场景有所不同。 使用 interface 的场景： 抽象类型：当我们需要定义一个抽象类型时，可以使用 interface。抽象类型是指只定义了方法集合，但没有具体实现的类型。 多态：当我们需要实现多态时，可以使用 interface。多态是指同一种类型的对象，在不同的情..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:25:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"interface和struct的使用场景\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-21T22:25:04.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":2.38,"words":715},"filePathRelative":"编程语言/golang/interface和struct的使用场景.md","localizedDate":"2025年6月21日","excerpt":"<p>在 Go 中，interface 和 struct 都是非常重要的类型，但它们的使用场景有所不同。</p>\\n<p>使用 interface 的场景：</p>\\n<ol>\\n<li>\\n<p>抽象类型：当我们需要定义一个抽象类型时，可以使用 interface。抽象类型是指只定义了方法集合，但没有具体实现的类型。</p>\\n</li>\\n<li>\\n<p>多态：当我们需要实现多态时，可以使用 interface。多态是指同一种类型的对象，在不同的情况下表现出不同的行为。</p>\\n</li>\\n<li>\\n<p>解耦：当我们需要解耦时，可以使用 interface。解耦是指将两个或多个模块之间的耦合度降低，从而提高代码的复用性和可维护性。</p>\\n</li>\\n<li>\\n<p>主要用来约束协议和实现多态\\n使用 struct 的场景：</p>\\n</li>\\n<li>\\n<p>封装数据：当我们需要封装数据时，可以使用 struct。封装数据是指将数据和相关的操作封装在一起，从而提高代码的可读性和可维护性。</p>\\n</li>\\n<li>\\n<p>定义数据结构：当我们需要定义一种数据结构时，可以使用 struct。数据结构是指一种数据的组织方式，可以用来表示实际问题中的对象。</p>\\n</li>\\n<li>\\n<p>定义对象：当我们需要定义一种对象时，可以使用 struct。对象是指一种具有状态和行为的实体，可以用来表示实际问题中的对象。</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);