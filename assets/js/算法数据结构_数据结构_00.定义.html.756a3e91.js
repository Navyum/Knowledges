"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[85937],{36995:(l,e)=>{e.A=(l,e)=>{const i=l.__vccOpts||l;for(const[l,a]of e)i[l]=a;return i}},69643:(l,e,i)=>{i.r(e),i.d(e,{comp:()=>n,data:()=>o});var a=i(6254);const t={},n=(0,i(36995).A)(t,[["render",function(l,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><h3 id="算法-algorithm" tabindex="-1"><a class="header-anchor" href="#算法-algorithm"><span>算法（algorithm）</span></a></h3><ul><li>是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性： <ul><li>问题是明确的，包含清晰的输入和输出定义。</li><li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li><li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li></ul></li></ul><h3 id="数据结构-data-structure" tabindex="-1"><a class="header-anchor" href="#数据结构-data-structure"><span>数据结构（data structure）</span></a></h3><ul><li>是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标： <ul><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ul></li></ul><h3 id="关系" tabindex="-1"><a class="header-anchor" href="#关系"><span>关系</span></a></h3><ul><li>数据结构是算法的基石。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li>算法是数据结构发挥作用的舞台。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构实现，但执行效率可能相差很大，选择合适的数据结构是关键。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a3ce8934cfe9eba42df139fbe1058fdd.png" width="60%"></li></ul><h3 id="算法-数据结构-设计的目标" tabindex="-1"><a class="header-anchor" href="#算法-数据结构-设计的目标"><span>算法（数据结构）设计的目标：</span></a></h3><ul><li>第一层：<code>找到问题解法</code>：算法需要在规定的输入范围内可靠地求得问题的正确解。</li><li>第二层：<code>寻求最优解法</code>：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法。 <ul><li>算法效率是衡量算法优劣的主要评价指标，它包括以下两个维度： <ul><li>时间效率：算法运行时间的长短。</li><li>空间效率：算法占用内存空间的大小。</li></ul></li></ul></li></ul><h3 id="数据结构分类" tabindex="-1"><a class="header-anchor" href="#数据结构分类"><span>数据结构分类</span></a></h3><ul><li>“逻辑结构”和“物理结构”两个维度进行分类。</li></ul><h4 id="逻辑结构-线性与非线性" tabindex="-1"><a class="header-anchor" href="#逻辑结构-线性与非线性"><span>逻辑结构：线性与非线性</span></a></h4><ul><li>逻辑结构揭示了数据元素之间的逻辑关： <ul><li>在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；</li><li>在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；</li><li>图则由节点和边构成，反映了复杂的网络关系。</li></ul></li><li>线性和非线性： <ul><li>线性结构比较直观，指数据在逻辑关系上呈线性排列； <ul><li>数组、链表、栈、队列、<code>哈希表</code>，元素之间是一对一的顺序关系</li></ul></li><li>非线性结构则相反，呈非线性排列。 <ul><li>树、堆、图、<code>哈希表</code></li></ul></li></ul></li></ul><h4 id="物理结构-连续与分散" tabindex="-1"><a class="header-anchor" href="#物理结构-连续与分散"><span>物理结构：连续与分散</span></a></h4><ul><li><p>物理结构反映了数据在计算机内存中的存储方式，物理结构从底层决定了数据的访问、更新、增删等操作方法，两种物理结构在时间效率和空间效率方面呈现出互补的特点</p><ul><li>连续空间存储（数组）</li><li>分散空间存储（链表）</li></ul></li><li><p><code>所有数据结构都是基于数组、链表或二者</code>的组合实现的</p><ul><li>基于数组可实现：栈、队列、哈希表、树、堆、图、矩阵、张量（维度&gt;=3的数组）等。</li><li>基于链表可实现：栈、队列、哈希表、树、堆、图等。</li></ul></li></ul><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><ul><li>基本数据类型是 <code>CPU 可以直接进行运算</code>的类型，在算法中直接被使用： <ul><li>整数类型 byte、short、int、long 。</li><li>浮点数类型 float、double ，用于表示小数。</li><li>字符类型 char ，用于表示各种语言的字母、标点符号甚至表情符号等。</li><li>布尔类型 bool ，用于表示“是”与“否”判断。</li></ul></li><li>基本数据类型<code>以二进制</code>的形式存储在计算机中</li></ul><h4 id="与数据结构的关系" tabindex="-1"><a class="header-anchor" href="#与数据结构的关系"><span>与数据结构的关系：</span></a></h4><ul><li><code>基本数据类型提供了数据的“内容类型”，而数据结构提供了数据的“组织方式</code></li></ul><h3 id="数字编码" tabindex="-1"><a class="header-anchor" href="#数字编码"><span>数字编码：</span></a></h3><ul><li>原码</li><li>反码</li><li>补码</li></ul><h3 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码"><span>字符编码：</span></a></h3><ul><li>ASCII 字符集</li><li>GBK 字符集</li><li>Unicode 字符集 <ul><li>将世界范围内的所有语言和符号都收录其中</li><li>Unicode 是一种通用字符集，本质上是给每个字符分配一个编号（称为“码点”），但它<code>并没有规定如何存储这些字符码点</code><ul><li>UTF-8 编码： <ul><li>定义：一种 Unicode 编码方法，它是一种可变长度的编码，1～4字节</li><li>编码规则： <ul><li>对于长度为 1 字节的字符，将<code>最高位</code>设置为<code>0</code>，<code>其余7位</code>设置为 Unicode 码点</li><li>对于长度为 n 字节的字符（其中n&gt;1），将<code>首个字节</code>的<code>高n位</code>都设置为<code>1</code>，<code>第n+1</code>位设置为<code>0</code>；从<code>第二个字节</code>开始，将每个字节的<code>高2位</code>都设置为<code>10</code>；其余所有位用于填充字符的 Unicode 码点。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b287525169bd832e7432ca9e491561f2.png" width="60%"></li></ul></li></ul></li><li>UTF-16 编码：固定2或4字节</li><li>UTF-32 编码：固定4字节</li></ul></li></ul></li></ul>',23)]))}]]),o=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/00.%E5%AE%9A%E4%B9%89.html","title":"00.定义","lang":"zh-CN","frontmatter":{"title":"00.定义","date":"2025-06-17T14:55:37.000Z","author":"Navyum","tags":["基础定义"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"定义 算法（algorithm） 是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性： 问题是明确的，包含清晰的输入和输出定义。 具有可行性，能够在有限步骤、时间和内存空间下完成。 各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。 数据结构（data structure） 是组织和存储数据的方式，涵盖数据内容、数据之间关系和数...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/00.%E5%AE%9A%E4%B9%89.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"00.定义"}],["meta",{"property":"og:description","content":"定义 算法（algorithm） 是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性： 问题是明确的，包含清晰的输入和输出定义。 具有可行性，能够在有限步骤、时间和内存空间下完成。 各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。 数据结构（data structure） 是组织和存储数据的方式，涵盖数据内容、数据之间关系和数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"基础定义"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:55:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"00.定义\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:55:37.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":4.22,"words":1267},"filePathRelative":"算法数据结构/数据结构/00.定义.md","localizedDate":"2025年6月17日","excerpt":"<h2>定义</h2>\\n<h3>算法（algorithm）</h3>\\n<ul>\\n<li>是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性：\\n<ul>\\n<li>问题是明确的，包含清晰的输入和输出定义。</li>\\n<li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li>\\n<li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>数据结构（data structure）</h3>\\n<ul>\\n<li>是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标：\\n<ul>\\n<li>空间占用尽量少，以节省计算机内存。</li>\\n<li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li>\\n<li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);