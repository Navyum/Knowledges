"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[96722],{36995:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}},82206:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>p,data:()=>c});var n=a(6254);const r={},p=(0,a(36995).A)(r,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,t[0]||(t[0]=[(0,n.Fv)('<h3 id="ebpf的原理" tabindex="-1"><a class="header-anchor" href="#ebpf的原理"><span>eBPF的原理</span></a></h3><p>使用验证器保证安全性，通过BPF映射实现内核-用户空间通信 所有与用户空间的交互都是通过 eBPF“映射”进行的，这些映射是键值存储。 每个 eBPF 程序都将在一定的有限执行时间内完成，即非图灵完备</p><h3 id="bcc" tabindex="-1"><a class="header-anchor" href="#bcc"><span>bcc</span></a></h3><p>BCC适合使用了其他库的复杂脚本、守护进程</p><h3 id="bpftrace" tabindex="-1"><a class="header-anchor" href="#bpftrace"><span>bpftrace</span></a></h3><ul><li><p>优点： bpftrace基于内置Linux技术，不用追赶内核版本改动，稳定性更高 脚本执行速度比systemtap快（使用llvm编译成BPF）</p></li><li><p>缺点： bpftrace语言特性上没有systemtap丰富，不太能进行复杂的探测操作 探针附到函数一定偏移处不方便 无法直接获取函数的局部变量 无法直接获取结构体信息 内核版本要求较高，在较旧的发行版上难以安装</p></li></ul><h3 id="cilium" tabindex="-1"><a class="header-anchor" href="#cilium"><span>Cilium</span></a></h3><p>参考： https://github.com/bpftrace/bpftrace https://catbro666.github.io/posts/46dd3f4b/ https://www.joyfulbikeshedding.com/blog/2019-01-31-full-system-dynamic-tracing-on-linux-using-ebpf-and-bpftrace.html https://www.brendangregg.com/ebpf.html#bpftraceoneliners</p>',8)]))}]]),c=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AFTracing/eBPF%E6%8A%80%E6%9C%AF.html","title":"eBPF技术","lang":"zh-CN","frontmatter":{"title":"eBPF技术","date":"2025-06-17T11:29:33.000Z","author":"Navyum","tags":["性能分析","可视化","eBPF"],"categories":["工具","性能分析"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"description":"eBPF的原理 使用验证器保证安全性，通过BPF映射实现内核-用户空间通信 所有与用户空间的交互都是通过 eBPF“映射”进行的，这些映射是键值存储。 每个 eBPF 程序都将在一定的有限执行时间内完成，即非图灵完备 bcc BCC适合使用了其他库的复杂脚本、守护进程 bpftrace 优点： bpftrace基于内置Linux技术，不用追赶内核版本改...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AFTracing/eBPF%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"eBPF技术"}],["meta",{"property":"og:description","content":"eBPF的原理 使用验证器保证安全性，通过BPF映射实现内核-用户空间通信 所有与用户空间的交互都是通过 eBPF“映射”进行的，这些映射是键值存储。 每个 eBPF 程序都将在一定的有限执行时间内完成，即非图灵完备 bcc BCC适合使用了其他库的复杂脚本、守护进程 bpftrace 优点： bpftrace基于内置Linux技术，不用追赶内核版本改..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T03:50:17.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"性能分析"}],["meta",{"property":"article:tag","content":"可视化"}],["meta",{"property":"article:tag","content":"eBPF"}],["meta",{"property":"article:published_time","content":"2025-06-17T11:29:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T03:50:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF技术\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T11:29:33.000Z\\",\\"dateModified\\":\\"2025-06-17T03:50:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750132217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"工具武器库/动态追踪技术Tracing/eBPF技术.md","localizedDate":"2025年6月17日","excerpt":"<h3>eBPF的原理</h3>\\n<p>使用验证器保证安全性，通过BPF映射实现内核-用户空间通信\\n所有与用户空间的交互都是通过 eBPF“映射”进行的，这些映射是键值存储。\\n每个 eBPF 程序都将在一定的有限执行时间内完成，即非图灵完备</p>\\n<h3>bcc</h3>\\n<p>BCC适合使用了其他库的复杂脚本、守护进程</p>\\n<h3>bpftrace</h3>\\n<ul>\\n<li>\\n<p>优点：\\nbpftrace基于内置Linux技术，不用追赶内核版本改动，稳定性更高\\n脚本执行速度比systemtap快（使用llvm编译成BPF）</p>\\n</li>\\n<li>\\n<p>缺点：\\nbpftrace语言特性上没有systemtap丰富，不太能进行复杂的探测操作\\n探针附到函数一定偏移处不方便\\n无法直接获取函数的局部变量\\n无法直接获取结构体信息\\n内核版本要求较高，在较旧的发行版上难以安装</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);