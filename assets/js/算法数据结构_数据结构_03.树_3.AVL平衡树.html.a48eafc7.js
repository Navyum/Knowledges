"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[35502],{36995:(a,s)=>{s.A=(a,s)=>{const t=a.__vccOpts||a;for(const[a,n]of s)t[a]=n;return t}},73675:(a,s,t)=>{t.r(s),t.d(s,{comp:()=>l,data:()=>p});var n=t(6254);const e={},l=(0,t(36995).A)(e,[["render",function(a,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="avl平衡树" tabindex="-1"><a class="header-anchor" href="#avl平衡树"><span>AVL平衡树</span></a></h2><h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征：</span></a></h3><ul><li>AVL 树既是<code>二叉搜索树</code>，也是<code>平衡二叉树</code>，同时满足这两类二叉树的所有性质</li><li>AVL 树是一种平衡二叉搜索树</li></ul><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性：</span></a></h3><ul><li>节点高度</li><li>节点平衡因子：节点左子树的高度减去右子树的高度，空节点的平衡因子为0</li></ul><h3 id="avl-树旋转" tabindex="-1"><a class="header-anchor" href="#avl-树旋转"><span>AVL 树旋转：</span></a></h3><ul><li>作用： <ul><li>AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡</li><li>旋转操作既能保持“二叉搜索树”的性质，也能使树重新变为“平衡二叉树”</li></ul></li><li>旋转： <ul><li>左旋</li><li>右旋</li><li>先左旋再右旋</li><li>先右旋再左旋 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/eb66fb8a5f881c7e85d89566f55bec6b.png" width="60%"></li></ul></li></ul><p align="center"> 四种旋转情况的选择条件 </p><table><thead><tr><th>失衡节点的平衡因子</th><th>子节点的平衡因子</th><th>应采用的旋转方法</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">&gt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> （左偏树）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\\geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></td><td>右旋</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">&gt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> （左偏树）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></td><td>先左旋后右旋</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">&lt; -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> （右偏树）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\\leq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></td><td>左旋</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">&lt; -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> （右偏树）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></td><td>先右旋后左旋</td></tr></tbody></table><h3 id="avl树的应用" tabindex="-1"><a class="header-anchor" href="#avl树的应用"><span>AVL树的应用：</span></a></h3><ul><li>组织和存储大型数据，适用于高频查找、低频增删的场景。</li><li>数据库中的索引</li><li>红黑树也是一种常见的平衡二叉搜索树。 <ul><li>相较于 AVL 树，红黑树的平衡条件更宽松，插入与删除节点所需的旋转操作更少，节点增删操作的平均效率更高。</li></ul></li></ul>',11)]))}]]),p=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/3.AVL%E5%B9%B3%E8%A1%A1%E6%A0%91.html","title":"3.AVL平衡树","lang":"zh-CN","frontmatter":{"title":"3.AVL平衡树","date":"2025-06-17T14:53:06.000Z","author":"Navyum","tags":["AVL平衡树"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"AVL平衡树 特征： AVL 树既是二叉搜索树，也是平衡二叉树，同时满足这两类二叉树的所有性质 AVL 树是一种平衡二叉搜索树 属性： 节点高度 节点平衡因子：节点左子树的高度减去右子树的高度，空节点的平衡因子为0 AVL 树旋转： 作用： AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡 旋转操作既...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/3.AVL%E5%B9%B3%E8%A1%A1%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"3.AVL平衡树"}],["meta",{"property":"og:description","content":"AVL平衡树 特征： AVL 树既是二叉搜索树，也是平衡二叉树，同时满足这两类二叉树的所有性质 AVL 树是一种平衡二叉搜索树 属性： 节点高度 节点平衡因子：节点左子树的高度减去右子树的高度，空节点的平衡因子为0 AVL 树旋转： 作用： AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡 旋转操作既..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"AVL平衡树"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:53:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.AVL平衡树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:53:06.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"算法数据结构/数据结构/03.树/3.AVL平衡树.md","localizedDate":"2025年6月17日","excerpt":"<h2>AVL平衡树</h2>\\n<h3>特征：</h3>\\n<ul>\\n<li>AVL 树既是<code>二叉搜索树</code>，也是<code>平衡二叉树</code>，同时满足这两类二叉树的所有性质</li>\\n<li>AVL 树是一种平衡二叉搜索树</li>\\n</ul>\\n<h3>属性：</h3>\\n<ul>\\n<li>节点高度</li>\\n<li>节点平衡因子：节点左子树的高度减去右子树的高度，空节点的平衡因子为0</li>\\n</ul>\\n<h3>AVL 树旋转：</h3>\\n<ul>\\n<li>作用：\\n<ul>\\n<li>AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡</li>\\n<li>旋转操作既能保持“二叉搜索树”的性质，也能使树重新变为“平衡二叉树”</li>\\n</ul>\\n</li>\\n<li>旋转：\\n<ul>\\n<li>左旋</li>\\n<li>右旋</li>\\n<li>先左旋再右旋</li>\\n<li>先右旋再左旋\\n<img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/eb66fb8a5f881c7e85d89566f55bec6b.png\\" width=\\"60%\\"></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);