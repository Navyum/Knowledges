"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[85662],{36995:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}},40624:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var e=a(6254);const i={},l=(0,a(36995).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<ol><li>数组和切片的区别和联系： <ol><li>slice 的底层数据是数组，slice 是对数组的封装</li><li>数组是定长的，长度定义好之后，不能再更改;而切片则非常灵活，它可以动态地扩容</li><li>数组就是一片连续的内存， slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组</li></ol></li><li>slice结构体：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// runtime/slice.go</span></span>\n<span class="line"><span>type slice struct {</span></span>\n<span class="line"><span>\tarray unsafe.Pointer // 元素指针</span></span>\n<span class="line"><span>\tlen   int // 长度 </span></span>\n<span class="line"><span>\tcap   int // 容量，容量大小一般指从切片的开始位置到底层数据的结尾位置的长度</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>slice内存模型： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/257469b8531d78b14872db6b5e5920e5.png" alt="图片" loading="lazy"></p></li><li><p>slice 截取特点：</p><ol><li>截取后的切片长度和容量可能会发生变化</li><li>被截取后的数组仍然指向原始切片的底层数据</li></ol></li><li><p>slice作为函数参数:</p><ol><li>若直接传 slice，在调用者看来，实参 slice 并不会被函数中的操作改变；</li><li>若传的是 slice 的指针，在调用者看来，是会被改变原 slice 的。</li><li>不管是传实参还是指针，如果改变了底层数组那么会反应到所用使用该底层数组的切片上。</li><li>Go 语言的函数参数传递，只有值传递，没有引用传递。（所有的参数都是实参的副本）</li></ol></li><li><p>切片动态扩容：</p><ol><li>1.18 之前：当原 slice 容量小于 <code>1024</code> 的时候，新 slice 容量变成原来的 <code>2</code> 倍；原 slice 容量超过 <code>1024</code>，新 slice 容量变成原来的<code>1.25</code>倍。</li><li>1.18 开始: 当原slice容量(oldcap)小于256的时候，新slice(newcap)容量为原来的2倍；原slice容量超过256，新slice容量newcap = oldcap+(oldcap+3*256)/4（不考虑内存对齐函数 roundupsize） 代码实现：</li></ol></li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// go 1.18 src/runtime/slice.go:178</span></span>\n<span class="line"><span>func growslice(et *_type, old slice, cap int) slice {</span></span>\n<span class="line"><span>    // ……</span></span>\n<span class="line"><span>    newcap := old.cap</span></span>\n<span class="line"><span>\tdoublecap := newcap + newcap</span></span>\n<span class="line"><span>\tif cap &gt; doublecap {</span></span>\n<span class="line"><span>\t\tnewcap = cap</span></span>\n<span class="line"><span>\t} else {</span></span>\n<span class="line"><span>\t\tconst threshold = 256</span></span>\n<span class="line"><span>\t\tif old.cap &lt; threshold {</span></span>\n<span class="line"><span>\t\t\tnewcap = doublecap</span></span>\n<span class="line"><span>\t\t} else {</span></span>\n<span class="line"><span>\t\t\tfor 0 &lt; newcap &amp;&amp; newcap &lt; cap {</span></span>\n<span class="line"><span>                // Transition from growing 2x for small slices</span></span>\n<span class="line"><span>\t\t\t\t// to growing 1.25x for large slices. This formula</span></span>\n<span class="line"><span>\t\t\t\t// gives a smooth-ish transition between the two.</span></span>\n<span class="line"><span>\t\t\t\tnewcap += (newcap + 3*threshold) / 4</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t\tif newcap &lt;= 0 {</span></span>\n<span class="line"><span>\t\t\t\tnewcap = cap</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\t// ……</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    //考虑内存对其因素</span></span>\n<span class="line"><span>\tcapmem = roundupsize(uintptr(newcap) * ptrSize)</span></span>\n<span class="line"><span>\tnewcap = int(capmem / ptrSize)</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)]))}]]),p=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/array%E3%80%81slice.html","title":"array、slice","lang":"zh-CN","frontmatter":{"title":"array、slice","author":"navyum","date":"2025-06-21T22:23:14.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"数组和切片的区别和联系： slice 的底层数据是数组，slice 是对数组的封装 数组是定长的，长度定义好之后，不能再更改;而切片则非常灵活，它可以动态地扩容 数组就是一片连续的内存， slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组 slice结构体： slice内存模型： 图片 slice 截取特点： 截取后的切片长度和容量可能...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/array%E3%80%81slice.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"array、slice"}],["meta",{"property":"og:description","content":"数组和切片的区别和联系： slice 的底层数据是数组，slice 是对数组的封装 数组是定长的，长度定义好之后，不能再更改;而切片则非常灵活，它可以动态地扩容 数组就是一片连续的内存， slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组 slice结构体： slice内存模型： 图片 slice 截取特点： 截取后的切片长度和容量可能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/257469b8531d78b14872db6b5e5920e5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:23:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"array、slice\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/257469b8531d78b14872db6b5e5920e5.png\\"],\\"datePublished\\":\\"2025-06-21T22:23:14.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"编程语言/golang/array、slice.md","localizedDate":"2025年6月21日","excerpt":"<ol>\\n<li>数组和切片的区别和联系：\\n<ol>\\n<li>slice 的底层数据是数组，slice 是对数组的封装</li>\\n<li>数组是定长的，长度定义好之后，不能再更改;而切片则非常灵活，它可以动态地扩容</li>\\n<li>数组就是一片连续的内存， slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组</li>\\n</ol>\\n</li>\\n<li>slice结构体：</li>\\n</ol>\\n<div class=\\"language-plain line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"plain\\" data-title=\\"plain\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// runtime/slice.go</span></span>\\n<span class=\\"line\\"><span>type slice struct {</span></span>\\n<span class=\\"line\\"><span>\\tarray unsafe.Pointer // 元素指针</span></span>\\n<span class=\\"line\\"><span>\\tlen   int // 长度 </span></span>\\n<span class=\\"line\\"><span>\\tcap   int // 容量，容量大小一般指从切片的开始位置到底层数据的结尾位置的长度</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);