"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[79034],{36995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},76971:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var n=a(6254);const t={},l=(0,a(36995).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>性能测试是软件开发生命周期中的一个关键阶段，旨在识别潜在的瓶颈，并确保应用程序在预期的用户负载下满足其性能标准。本文详细介绍如何使用Locust进行API压力测试，包括性能测试指标、可视化工具、测试案例和最佳实践。</p><hr><h2 id="一、性能测试指标" tabindex="-1"><a class="header-anchor" href="#一、性能测试指标"><span>一、性能测试指标</span></a></h2><ul><li>响应时间 <ul><li>❌ 平均响应时间（ART）意义不大</li><li>✅ 最大响应时间（MRT）</li><li>✅ 百分位响应时间：P50、P90、P99</li></ul></li><li>吞吐量 <ul><li>✅ 请求速率（RPS）</li><li>✅ 网络吞吐量（MB/s）</li><li>❌ 事务速率（TPS）</li></ul></li><li>容量指标 <ul><li>✅ 最大并发用户数（MCU）</li><li>✅ 系统承载峰值</li></ul></li></ul><hr><h2 id="二、性能测试中关键可视化工具" tabindex="-1"><a class="header-anchor" href="#二、性能测试中关键可视化工具"><span>二、性能测试中关键可视化工具</span></a></h2><h3 id="_2-1-退化曲线-degradation-curve" tabindex="-1"><a class="header-anchor" href="#_2-1-退化曲线-degradation-curve"><span>2.1 退化曲线（Degradation Curve）</span></a></h3><ul><li>说明：描绘<code>系统的负载</code>（用户数量）与<code>响应时间</code>之间的关系</li><li>坐标说明：以横轴上的区间代表<code>系统负载/用户数量</code>，纵轴上的点表示对应负载下的<code>响应时间</code></li><li>作用： <ol><li>确定系统的负载极限</li></ol></li><li>关键区域： <ul><li>单用户区域：最佳性能基准</li><li>性能平稳区：没有明显性能下降的情况下实现最佳性能</li><li>压力区域：负载增加后系统开始优雅地降级，标志着性能问题的开始</li><li>性能拐点：性能下降突变的地方</li></ul></li><li>样例：<p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/ce7e841d4b98bc0e8f75da0a4486a1a6.png" width="80%"></p></li></ul><h3 id="_2-2-直方图-histograms" tabindex="-1"><a class="header-anchor" href="#_2-2-直方图-histograms"><span>2.2 直方图（Histograms）</span></a></h3><ul><li>说明：描绘测试数据的分布情况，将数据分成多个区间，显示每个区间的频数或频率。</li><li>作用： <ol><li>很好地说明响应时间的集中和分散情况</li><li>对极值/蜂刺值的洞察</li></ol></li><li>坐标说明：以横轴上的区间代表<code>数据范围</code>，纵轴上的条形表示这些范围内数据的<code>频率</code>，性能测试的直方图通常呈现为正态分布</li><li>关键区域： <ul><li>最长的矩形：表示大多数数据点聚集在此处</li></ul></li><li>样例：<p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/fe38d150664fe996b004c0b1ede3b7b0.png" width="80%"></p></li></ul><hr><h2 id="三、性能测试工具选择" tabindex="-1"><a class="header-anchor" href="#三、性能测试工具选择"><span>三、性能测试工具选择</span></a></h2><table><thead><tr><th>测试工具</th><th>Locust</th><th>wrk</th><th>ab</th><th>JMeter</th></tr></thead><tbody><tr><td>并发模型</td><td>协程（gevent）</td><td>多线程 + Epoll</td><td>多进程</td><td>线程组</td></tr><tr><td>协议支持</td><td><span style="color:rgb(255, 41, 65);">全协议</span>（需代码实现）</td><td>HTTP</td><td>HTTP</td><td>多协议（支持插件扩展）</td></tr><tr><td>测试脚本</td><td>Python 代码</td><td>Lua 脚本</td><td>无脚本</td><td>GUI+XML</td></tr><tr><td>分布式</td><td><span style="color:rgb(255, 41, 65);">原生支持</span></td><td>需第三方工具</td><td>不支持</td><td>需插件</td></tr><tr><td>报告能力</td><td>Web UI+CSV</td><td>基础控制台输出</td><td>基础控制台输出</td><td>丰富 HTML + 图表</td></tr><tr><td>学习曲线</td><td>中等（需 Python 基础）</td><td>低（基础使用）</td><td>极低</td><td>高（功能复杂）</td></tr></tbody></table><p><strong>结论</strong>：如果要系统性的测试，在可视化呈现效果、上手度上，推荐使用Locust</p><hr><h2 id="四、实战案例" tabindex="-1"><a class="header-anchor" href="#四、实战案例"><span>四、实战案例</span></a></h2><h3 id="案例1-比较两个接口的性能" tabindex="-1"><a class="header-anchor" href="#案例1-比较两个接口的性能"><span>案例1：比较两个接口的性能</span></a></h3><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h4><p>新、旧服务入参为不同的图片格式（HEIF、JPG），输出OCR结果，需要对新、旧两个接口进行测试，评估在耗时上的差异。</p><p>已知条件：</p><ul><li>HEIF格式图片大小更小，传输更快</li><li>JPG图片解码库速度更快</li><li>需要比较传输、解码最终对接口的影响哪个更大</li></ul><h4 id="测试思路" tabindex="-1"><a class="header-anchor" href="#测试思路"><span>测试思路</span></a></h4><ol><li>控制新、旧服务使用相同内容、不同格式的图片</li><li>控制测试的API在同一个时间、同样的服务器</li><li>选择业务场景的常用尺寸，另外选择一些其他不同尺寸</li></ol><h4 id="为什么选择locust" tabindex="-1"><a class="header-anchor" href="#为什么选择locust"><span>为什么选择Locust</span></a></h4><ul><li><strong>并发测试</strong>：Locust脚本可以通过权重设置，同时进行两个接口的测试（同时测试这样可以排除服务器压力等因素干扰）</li><li><strong>报告能力</strong>：Locust的报告可以同时显示两个接口的分析结果（不需要额外进行数据的加工、展示）</li><li><strong>协议支持</strong>：Locust支持的协议更好，可以直接使用内部写好的Class（脚本更便捷）</li></ul><h4 id="locust脚本实现" tabindex="-1"><a class="header-anchor" href="#locust脚本实现"><span>Locust脚本实现</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> locust </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> HttpUser, task, between</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OCRUser</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpUser</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    wait_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 定义测试文件集及对应权重 [文件路径, 权重]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    test_files </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/1.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1启用的测试用例</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/1.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/2.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/2.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/3.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/3.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/4.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/4.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/5.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/5.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> on_start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;检查所有测试文件是否存在&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> path, _ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.test_files:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path):</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> FileNotFoundError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;测试文件 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">path</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不存在&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @task</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> perform_ocr_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;参数化测试入口&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> file_path, weight </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.test_files:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> weight </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                continue</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_execute_ocr_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _execute_ocr_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> file_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;通用测试执行逻辑&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        file_size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getsize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        file_type </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">splitext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path)[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:].</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">upper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_post_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path, file_type) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> res:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_validate_response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(res, file_path)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _post_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> file_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> file_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;统一封装文件上传操作&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        task_name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">basename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path)</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getsize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">k-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">file_type</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;/recognize/document&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">            files</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">basename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path), </span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">                open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_get_mime_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_type)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )},</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">            name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">task_name,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">            catch_response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        )</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _validate_response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> file_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;统一响应验证逻辑&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> response.status_code </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            response.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">failure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">file_path</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">] 状态码异常: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response.status_code</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        elif</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> response.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            response.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">failure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">file_path</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">] 无效的JSON响应&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _get_mime_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> file_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;MIME类型映射保持不变&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        file_type </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> file_type.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">lower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image/jpeg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image/heif&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_type, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application/octet-stream&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试配置" tabindex="-1"><a class="header-anchor" href="#测试配置"><span>测试配置</span></a></h4><p><strong>注意</strong>：因为是要对比两个接口的性能，所以我选择的是<code>最佳性能基准</code>，选择单个用户的测试场景</p><p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/44b0f5203e636da73346e6d160066ac4.png" width="80%"></p><h4 id="测试结果可视化" tabindex="-1"><a class="header-anchor" href="#测试结果可视化"><span>测试结果可视化</span></a></h4><p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0a4390c21d9dbb3793e9203e0e2d6cbc.png" width="80%"></p><h4 id="测试结论" tabindex="-1"><a class="header-anchor" href="#测试结论"><span>测试结论</span></a></h4><ul><li>在常见的300～500kb的图片内，对应接口的HEIF格式比JPG格式耗时大约高200ms左右</li><li>随着尺寸变大，超过1000kb，HEIF的传输优势才变明显</li><li>后续可以选择更多的大尺寸进行测试，观察HEIF的优异表现是否一致</li></ul><h3 id="案例2-对新、旧接口进行压力测试-评估其可支持的rps" tabindex="-1"><a class="header-anchor" href="#案例2-对新、旧接口进行压力测试-评估其可支持的rps"><span>案例2：对新、旧接口进行压力测试，评估其可支持的RPS</span></a></h3><h4 id="测试目标" tabindex="-1"><a class="header-anchor" href="#测试目标"><span>测试目标</span></a></h4><p>选择业务常用尺寸的HEIF和JPG大小，评估接口的最大RPS承载能力。</p><h4 id="脚本配置" tabindex="-1"><a class="header-anchor" href="#脚本配置"><span>脚本配置</span></a></h4><p>复用上述脚本，分别开启 1.jpg和1.heif：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/1.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启用的测试用例</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./sample/1.heif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="负载配置" tabindex="-1"><a class="header-anchor" href="#负载配置"><span>负载配置</span></a></h4><p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/73f832c4bb5aa117f4280509b0b44b45.png" width="80%"></p><h4 id="测试结果可视化-1" tabindex="-1"><a class="header-anchor" href="#测试结果可视化-1"><span>测试结果可视化</span></a></h4><p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/ed5a369c68cd91066c3f79c2e8ac2dfc.png" width="80%"></p><h4 id="测试结论-1" tabindex="-1"><a class="header-anchor" href="#测试结论-1"><span>测试结论</span></a></h4><ul><li>对应接口的最高RPS为2.4，即使用户数量增加</li><li>在RPS为1.5时，耗时开始明显增加，即出现性能骤降的拐点</li><li>进一步验证：设置用户数量为2，RPS为2，耗时比较稳定。表明系统的最佳负载是RPS为2左右</li></ul><hr><h2 id="五、总结与最佳实践" tabindex="-1"><a class="header-anchor" href="#五、总结与最佳实践"><span>五、总结与最佳实践</span></a></h2><h3 id="关键要点" tabindex="-1"><a class="header-anchor" href="#关键要点"><span>关键要点</span></a></h3><ol><li><strong>性能指标选择</strong>：重点关注P90、P99响应时间，而非平均响应时间</li><li><strong>可视化分析</strong>：使用退化曲线识别性能拐点，使用直方图分析响应时间分布</li><li><strong>工具选择</strong>：Locust在可视化效果和上手度方面具有明显优势</li><li><strong>测试策略</strong>：根据测试目标选择合适的负载配置和测试场景</li></ol><h3 id="建议" tabindex="-1"><a class="header-anchor" href="#建议"><span>建议</span></a></h3><ul><li>定期进行性能测试，建立性能基线</li><li>关注性能拐点，合理设置系统容量</li><li>结合业务场景设计测试用例</li><li>重视测试结果的可视化分析</li></ul>',53)]))}]]),h=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/API%E5%8E%8B%E6%B5%8B%E6%A1%86%E6%9E%B6%E4%B9%8Blocust.html","title":"API压测框架-locust","lang":"zh-CN","frontmatter":{"title":"API压测框架-locust","date":"2025-03-20T17:41:00.000Z","author":"Navyum","tags":["压力测试","瓶颈分析","P99X","Locust","性能测试","API测试"],"categories":["工具","压测"],"article":true,"index":true,"headerDepth":2,"sticky":true,"star":true,"description":"概述 性能测试是软件开发生命周期中的一个关键阶段，旨在识别潜在的瓶颈，并确保应用程序在预期的用户负载下满足其性能标准。本文详细介绍如何使用Locust进行API压力测试，包括性能测试指标、可视化工具、测试案例和最佳实践。 一、性能测试指标 响应时间 ❌ 平均响应时间（ART）意义不大 ✅ 最大响应时间（MRT） ✅ 百分位响应时间：P50、P90、P9...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/API%E5%8E%8B%E6%B5%8B%E6%A1%86%E6%9E%B6%E4%B9%8Blocust.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"API压测框架-locust"}],["meta",{"property":"og:description","content":"概述 性能测试是软件开发生命周期中的一个关键阶段，旨在识别潜在的瓶颈，并确保应用程序在预期的用户负载下满足其性能标准。本文详细介绍如何使用Locust进行API压力测试，包括性能测试指标、可视化工具、测试案例和最佳实践。 一、性能测试指标 响应时间 ❌ 平均响应时间（ART）意义不大 ✅ 最大响应时间（MRT） ✅ 百分位响应时间：P50、P90、P9..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-15T08:56:54.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"压力测试"}],["meta",{"property":"article:tag","content":"瓶颈分析"}],["meta",{"property":"article:tag","content":"P99X"}],["meta",{"property":"article:tag","content":"Locust"}],["meta",{"property":"article:tag","content":"性能测试"}],["meta",{"property":"article:tag","content":"API测试"}],["meta",{"property":"article:published_time","content":"2025-03-20T17:41:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-15T08:56:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"API压测框架-locust\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-20T17:41:00.000Z\\",\\"dateModified\\":\\"2025-10-15T08:56:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1760518614000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"},{"name":"navyum","username":"navyum","email":"navyum","commits":1,"url":"https://github.com/navyum"}]},"readingTime":{"minutes":6.04,"words":1812},"filePathRelative":"工具武器库/问题分析/API压测框架之locust.md","localizedDate":"2025年3月20日","excerpt":"<h2>概述</h2>\\n<p>性能测试是软件开发生命周期中的一个关键阶段，旨在识别潜在的瓶颈，并确保应用程序在预期的用户负载下满足其性能标准。本文详细介绍如何使用Locust进行API压力测试，包括性能测试指标、可视化工具、测试案例和最佳实践。</p>\\n<hr>\\n<h2>一、性能测试指标</h2>\\n<ul>\\n<li>响应时间\\n<ul>\\n<li>❌ 平均响应时间（ART）意义不大</li>\\n<li>✅ 最大响应时间（MRT）</li>\\n<li>✅ 百分位响应时间：P50、P90、P99</li>\\n</ul>\\n</li>\\n<li>吞吐量\\n<ul>\\n<li>✅ 请求速率（RPS）</li>\\n<li>✅ 网络吞吐量（MB/s）</li>\\n<li>❌ 事务速率（TPS）</li>\\n</ul>\\n</li>\\n<li>容量指标\\n<ul>\\n<li>✅ 最大并发用户数（MCU）</li>\\n<li>✅ 系统承载峰值</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);