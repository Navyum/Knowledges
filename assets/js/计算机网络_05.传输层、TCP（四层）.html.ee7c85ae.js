"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[83130],{36995:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,c]of i)e[l]=c;return e}},38744:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>a,data:()=>o});var c=e(6254);const d={},a=(0,e(36995).A)(d,[["render",function(l,i){const e=(0,c.g2)("font");return(0,c.uX)(),(0,c.CE)("div",null,[i[41]||(i[41]=(0,c.Fv)('<h2 id="传输" tabindex="-1"><a class="header-anchor" href="#传输"><span>传输：</span></a></h2><h3 id="数据传输格式" tabindex="-1"><a class="header-anchor" href="#数据传输格式"><span>数据传输格式：</span></a></h3><ul><li><code>MAC层</code>定义了本地局域网<code>设备</code>的传输行为</li><li><code>IP层</code>定义了整个网络<code>端到端</code>的传输行为</li><li><code>传输层</code>定义<code>应用程序到应用程序</code>的传输，基于端口区分</li><li>这两层基本定义了包的特性： <ul><li>网络传输是以包为单位的，<code>MAC层叫帧</code>Frame，<code>IP层叫包</code>Packet，包被分片后叫Fragment，<code>传输层叫段</code>Segment</li><li>MAC层和IP层的我们笼统地称为包。包单独传输，自行选路，在不同的设备封装、解封装，不保证到达</li></ul></li></ul><h2 id="udp" tabindex="-1"><a class="header-anchor" href="#udp"><span>UDP：</span></a></h2><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性：</span></a></h3><ul><li>UDP <code>不提供可靠交付</code>，不保证不丢失，不保证按顺序到达</li><li>UDP <code>不提供拥塞控制</code>，无论网络情况，应用层想发就发</li><li>UDP 是<code>面向数据报</code>的，一个<code>完整报文</code>得进行收发（无论多大不分片）</li><li>UDP 是<code>无状态</code>的服务，只管发出去</li></ul><h3 id="协议格式" tabindex="-1"><a class="header-anchor" href="#协议格式"><span>协议格式：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/63dc99d734ef85b68c95f6d4a1645777.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li><p>包长度：该字段保存了 UDP 首部的长度跟数据的长度之和</p></li><li><p>UDP 数据最大值：</p><ul><li>最大1472 字节</li><li>计算：1500(MTU) - IP头(20) - UDP头(8)</li><li>注意事项：<code>UDP不会对上层数据做分段，而是直接交给IP层处理</code><ul><li>如果IP层设置了DF，则UDP数据会被丢弃，IP层发ICMP报文通知发送端</li><li>如果IP层未设置DF，则UDP会被IP层分成多片，Packet乱序到达后，由IP层进行重组</li></ul></li></ul></li></ul><h3 id="udp-应用场景" tabindex="-1"><a class="header-anchor" href="#udp-应用场景"><span>UDP 应用场景：</span></a></h3><ul><li>需要资源少，在网络情况比较好的内网，或者对于丢包不敏感的应用</li><li>不需要一对一沟通建立连接，而是可以广播或多播的应用</li><li>需要处理速度快，时延低，可以容忍少数丢包，但是要求即便网络拥塞，也毫不退缩</li></ul><h3 id="具体应用" tabindex="-1"><a class="header-anchor" href="#具体应用"><span>具体应用：</span></a></h3><ul><li>QUIC（Quick UDP Internet Connections）： <ul><li>在应用层的协议，会自己实现快速连接建立、减少重传时延，自适应拥塞控制</li></ul></li><li>包总量较少的通信：如 DNS 、SNMP等</li><li>视频直播 <ul><li>基于UDP实现自己的协议</li></ul></li><li>实时游戏</li><li>IoT领域 <ul><li>物联网通信协议 Thread</li></ul></li><li>移动通信领域：GTP 协议</li><li>广播通信</li></ul><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP：</span></a></h2><h3 id="tcp-连接" tabindex="-1"><a class="header-anchor" href="#tcp-连接"><span>TCP 连接：</span></a></h3><ul><li>建立连接的目的是为了用一定的数据结构来维护双方交互的状态</li><li>TCP连接不是桥，是在码头上增加了<code>记录人员，核查人员和督导人员</code></li><li>TCP用四个元组来表示是同一个连接 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/297de65e785b33533c0f4abe533e5dce.png" alt="Img" loading="lazy"></li></ul><h3 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1"><span>特性：</span></a></h3><ul><li>TCP 提供可靠交付（无差错、不丢失、不重复、并且按序到达）</li><li>TCP 是面向<code>字节流</code>的（发送的时候发的是一个流，流大小不超过MSS，流可以重组为报文）</li><li>TCP 是可以有拥塞控制的，根据网络情况调整发送策略</li><li>TCP 是一个有状态服务（记录发送和接收状态）</li></ul><h3 id="tcp-基础概念" tabindex="-1"><a class="header-anchor" href="#tcp-基础概念"><span>TCP 基础概念：</span></a></h3><ul><li>MSL（ Maximum Segment Lifetime）：报文最大生存时间</li><li>RTO（Retransmission TimeOut）：触发重传的超时时间</li><li>RTT（Round Trip Time）：一个数据包从发出去到回来的时间</li><li>CWND（ congestion Window）：拥塞控制窗口</li><li>SWND（Sliding Window）：滑动窗口</li></ul><h3 id="tcp-协议格式" tabindex="-1"><a class="header-anchor" href="#tcp-协议格式"><span>TCP 协议格式：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/05ecb9399c2b6a816b58b3fd1e890275.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li><p><code>序号</code> Sequence Number：用来解决网络包<code>乱序问题</code></p></li><li><p><code>确认序号Ack</code> Acknowledgement Number：<code>用于确认收到</code>，可以发现是否出现丢包</p><ul><li>Ack确认的是收到的<code>最后一个连续</code>的包</li><li>SeqNum和Ack以字节数为单位</li><li>Ack = Seq + Len(包大小)</li></ul></li><li><p><code>窗口大小</code>：滑动窗口大小</p></li><li><p>TCP Flags类型：</p><ul><li><code>SYN</code>：希望建立连接。握手阶段使用</li><li><code>ACK</code>：确认应答，最初建立连接时的 <code>SYN</code> 包之外的包该值都为<code>1</code></li><li><code>RST</code>：连接出现异常，必须强制断开</li><li><code>FIN</code>：数据发送结束，希望断开连接。挥手阶段使用。</li></ul></li><li><p>TCP Options：</p><ul><li>MSS设置</li><li>SACK设置</li><li>其他</li></ul></li><li><p><code>MSS</code>：</p><ul><li>Max Segment Size，TCP最大分段长度</li><li>TCP对应用层的数据按照TCP认为最合适的大小进行分段，不一定取最大值</li><li>范围：1 ~ 1420/1460 字节</li><li>计算：1500 - IP头(20) - TCP头(20) - TCP 选项（0~40）</li></ul></li></ul><h3 id="tcp-可靠性的依赖" tabindex="-1"><a class="header-anchor" href="#tcp-可靠性的依赖"><span>TCP 可靠性的依赖：</span></a></h3><h4 id="_1-维护连接状态" tabindex="-1"><a class="header-anchor" href="#_1-维护连接状态"><span>1. 维护连接状态：</span></a></h4><ul><li>TCP状态机： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/84fe5f77d405144573c34a93c0ab95ae.png" alt="Img" loading="lazy"></li><li>TCP 握手、挥手过程在内核协议栈进行,TLS在应用层</li><li>三次握手： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9cbbbdb61b7ed570a2d1c7e93aa6c8c5.png" alt="Img" loading="lazy"><ul><li>握手为什么至少三次： <ul><li>原因一：避免历史连接</li><li>原因二：需要同步<code>双方</code>初始序列号</li><li>原因三：避免资源浪费 <ul><li>四次握手的浪费： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/e056331af380dc8746a9d97ef09514e8.png" alt="Img" loading="lazy"></li></ul></li></ul></li></ul></li><li>四次挥手： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/91ea2f98e977d712f5a896d15e6d0820.png" alt="Img" loading="lazy"><ul><li>TCP是全双工的，发送Fin之后还可接收数据。所以发送方和接收方都需要做<code>Fin</code>和<code>Ack</code></li><li>TIME_WAIT <ul><li>作用： <ul><li>防止历史连接中的数据，被后续相同的四元组连接错误的接收</li><li>保证「被动关闭连接」的一方接收到ACK，被正确的关闭 <ul><li>一般设为：2MSL</li><li>2MSL原因：让原连接中在网络上的数据包都被正常处理或者丢弃，避免被后续连接收到且被确认（因为Seq 的循环使用）</li></ul></li></ul></li><li>四次挥手变成三次挥手 <ul><li><a href="#TCP-%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%EF%BC%9A">TCP 延迟确认机制</a><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b3baa53dc153b76a064a2ef829ca21c8.png" alt="Img" loading="lazy"></li></ul></li><li>挥手特殊说明： <ul><li>挥手过程在内核协议栈进行 <ul><li>机器宕机，无法正常挥手</li><li>进程崩溃，正常挥手</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="_2-顺序问题" tabindex="-1"><a class="header-anchor" href="#_2-顺序问题"><span>2. 顺序问题：</span></a></h4><ul><li>初始ISN（Init Sequence Number） <ul><li>每次握手都不一样的原因： <ul><li>避免误收</li><li>防止篡改</li></ul></li><li>如何随机： <ul><li>ISN = M + F(localhost, localport, remotehost, remoteport)</li><li><code>M</code> 是一个计时器，这个计时器每隔 4 微秒加 1</li><li><code>F</code> 是一个 Hash 算法</li></ul></li></ul></li><li>每个包都带有<code>SEQ</code> number 和<code>ACK</code> number</li></ul><h4 id="_3-丢包问题" tabindex="-1"><a class="header-anchor" href="#_3-丢包问题"><span>3. 丢包问题：</span></a></h4><ul><li>问题描述：<code>确保发出去的包最终一定被收到，如果丢失，通过重传机制再次发送</code></li><li><strong>重传机制</strong>： <ul><li><p><strong>1.超时重传</strong>：</p><ul><li>定义：<code>以时间驱动重传</code>。发送端设置定时器</li><li><code>RTO</code>（Retransmission TimeOut）基于网络环境，RTT是动态计算的</li><li>内核参数设置次数：<code>tcp_retries2</code></li><li>TCP RTO 算法： <ul><li>核心：<code>采样 RTT数据，以及 RTT 的波动范围</code></li><li><code>SRTT</code>：平滑的 RTT</li><li><code>DevRTR</code>：平滑的 RTT 与 最新 RTT 的差距（波动）</li><li>具体算法： <ul><li>经典算法： <ul><li><code>SRTT</code> = ( α * SRTT ) + ((1- α) * RTT)) // α [0.8, 0.9]</li><li><code>RTO</code> = min [ UBOUND,  max [ LBOUND, (β * SRTT) ]] // β [1.3, 2.0]</li><li>UBOUND是最大的timeout时间、LBOUND是最小的timeout时</li></ul></li><li>Karn / Partridge 算法： <ul><li>忽略重传，不把重传时的RTT 用作采样数据</li><li>存在问题：重传时的网络情况被忽略导致出现问题无法发现</li></ul></li><li>Jacobson / Karels 算法（<code>最优解</code>）： <ul><li>解决：因为平滑导致RTT的波动导致网络波动问题被忽略</li><li><code>SRTT</code> = SRTT + α (RTT – SRTT)</li><li><code>DevRTT</code> = (1-β)<em>DevRTT + β</em>(|RTT-SRTT|)</li><li><code>RTO</code> = µ * SRTT + ∂ *DevRTT</li><li>其中 α = 0.125，β = 0.25，μ = 1，∂ = 4</li></ul></li></ul></li></ul></li></ul></li><li><p><code>2.快速重传</code>（Fast Retransmit）：</p><ul><li>定义：<code>以数据驱动重传</code>。接收端因为数据没有收到，会重复ACK可能丢失的包（累计确认），发送端连续收到<code>3次</code>就重传。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4705095d72f9876cc007e13c3e14b870.png" alt="Img" loading="lazy"></li><li>过程： <ul><li>接收端 Seq 1 到达，<code>回复Ack 2</code></li><li>接收端 Seq 2 没收到，Seq 3 到达了，于是<code>还是 回复 Ack 2</code></li><li>接收端 Seq 4 和 Seq 5 都到了，因为 Seq 2 还没有收到，<code>还是回复 Ack 2</code></li><li>发送端收到了<code>三个 Ack 2</code> 的确认，知道了 Seq 2 还没有收到，就会在定时器过期之前，<code>重传丢失的 Seq 2</code>（在开启SACK情况下）</li><li>最后，接收端收到了 Seq 2，此时因为 Seq3，Seq4，Seq5 都收到了，于是回复 <code>Ack 6</code></li></ul></li></ul></li><li><p>重传发生时，应该重传哪些数据：</p><ul><li><p>问题：如果只重传ack的那个包，效率低；如果重传ack之后的所有包，资源浪费；</p></li><li><p><code>SACK</code> 选择性确认：</p><ul><li><code>接收方</code>额外返回<code>已收到的数据区间</code>，让发送端有选择的重传，而不必重传已收到的包 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37e2287f8d81753409afe59471b47ed1.png" alt="Img" loading="lazy"></li></ul></li><li><p><code>D-SACK</code> Duplicate SACK：</p><ul><li><code>接收方</code>使用SACK<code>告诉发送方自己重复接收到的数据</code>，用于发送方优化</li><li><code>DSACK</code> 可以让发送方知道： <ul><li>是发出去的包丢了，还是回来的ACK包丢了</li><li>是不是自己的timeout太小了，导致重传</li><li>网络上出现了先发的包后到的情况（又称reordering）</li><li>网络上是否把包做了复制 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/6603050de3bd575c51dfea5b58726dc3.png" alt="Img" loading="lazy"></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="_4-流量控制问题-照顾通信对象" tabindex="-1"><a class="header-anchor" href="#_4-流量控制问题-照顾通信对象"><span>4.<code>流量控制问题</code>（照顾通信对象）：</span></a></h4><ul><li><p>问题描述： <code>无法改变接收者的接收能力，只能调整自身发送速度</code></p></li><li><p><code>滑动窗口</code> Sliding-Window：</p><ul><li><p>作用：协调双端的发送能力和接收能力。让发送端提升发送效率，接收端避免压垮</p></li><li><p>原理：</p><ul><li>滑动窗口是一个缓存空间，发送方在等到<code>确认应答返回之前</code>，必须在<code>缓冲区中保留已发送的数据</code>。</li><li>如果按期收到确认应答，此时数据就可以从缓存区清除</li><li>如果未收到确认应答，此时需要重传数据。</li></ul></li><li><p><code>Window</code>字段：定义了<code>接收端的接收能力</code></p></li><li><p>发送方滑动窗口示意图：</p><ul><li><p>向右滑动 👉👉 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/17c8fe857cbb66f044889e93b8c80a30.png" alt="Img" loading="lazy"></p></li><li><p>可用窗口计算：<img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f2674754fab25bef42d72bd52b704620.png" alt="Img" loading="lazy"></p><ul><li><code>SND.WND</code>：<code>发送窗口的大小</code>（接收方指定）</li><li><code>SND.UNA</code>：<code>已发送但未收到确认</code>的第一个字节的序列号</li><li><code>SND.NXT</code>：<code>未发送但可发送范围</code>的第一个字节的序列号</li><li><code>可用窗口大小 = SND.WND -（SND.NXT - SND.UNA</code></li></ul></li></ul></li><li><p>接收方滑动窗口示意图：</p><ul><li>计算：<img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/471844fdbdf583d87b205c246c7ca98d.png" alt="Img" loading="lazy"><ul><li><code>RCV.WND</code>：<code>接收窗口的大小</code></li><li><code>RCV.NXT</code>：<code>期望从发送方发送来的下一个数据字节的序列号</code></li></ul></li></ul></li><li><p>接收窗口的大小约等于发送窗口的大小</p></li></ul></li><li><p><code>Zero Window</code> 窗口关闭：</p><ul><li>作用： <ul><li><code>接收端通过ACK</code>告诉<code>发送端</code>自己的可用窗口大小为0，让发送端不发数据</li></ul></li><li>如何结束不可发送状态： <ul><li>收到接收端的ACK告知<code>window</code>不为0</li><li>发送端发ZWP (Zero Window Probe)包主动询问 <ul><li>具体做法： <ol><li>发送端主动发送3次ZWP包给接收端询问<code>window</code></li><li>如果不为0，则发送端进行发送</li><li>如果一直为0，则发送端触发RST</li></ol></li></ul></li></ul></li></ul></li><li><p><code>Silly Window Syndrome</code> 糊涂窗口综合症：</p><ul><li>描述：发送端/接收端因为<code>可用window</code>过小，发送小于MSS的数据，导致的效率低的问题</li><li>解决方案：必须同时满足 <ul><li>接收端当<code>window</code>如果小于 min(MSS，缓存空间/2），直接发送<code>window=0</code>关闭窗口</li><li>发送端开启<code>Nagle’s算法</code>，将包堆积到一定大小后再发 <ul><li>Nagle’s算法：（再次发送满足以下任意一个） <ul><li><ol><li>可用<code>Window</code>&gt;=MSS &amp;&amp; 累积的数据 &gt;= MSS</li></ol></li><li><ol start="2"><li>收到之前发的包的ACK回复</li></ol></li><li>注意事项： <ol><li>Nagle算法没有禁止小包发送，只是禁止了<code>大量的小包发送</code></li><li>在发送大量小包的场景，需要关闭该算法</li></ol></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="_5-拥塞控制问题-照顾通信环境" tabindex="-1"><a class="header-anchor" href="#_5-拥塞控制问题-照顾通信环境"><span>5.<code>拥塞控制问题</code>（照顾通信环境）：</span></a></h4>',33)),(0,c.Lk)("ul",null,[i[40]||(i[40]=(0,c.Fv)("<li>问题描述：无法改变网络状况，但可以<code>控制自己发送的速度，自我牺牲</code>（在发送端）</li><li><code>拥塞窗口 cwnd</code>： <ul><li>发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化的</li><li><code>发送窗口</code> = min(<code>拥塞窗口</code>, <code>发送窗口</code>)</li></ul></li>",2)),(0,c.Lk)("li",null,[i[38]||(i[38]=(0,c.eW)("拥塞控制主要过程： ")),i[39]||(i[39]=(0,c.Lk)("ul",null,[(0,c.Lk)("li",null,[(0,c.Lk)("code",null,"慢启动门限 ssthresh"),(0,c.eW)(" （slow start threshold）")])],-1)),(0,c.Lk)("ol",null,[i[37]||(i[37]=(0,c.Fv)("<li><p><code>慢启动</code>：</p><ul><li>核心思想：<code>刚刚加入网络的连接，一点一点地提速</code></li><li>慢启动的算法： <ol><li>初始化cwnd = 1（表明可以传一个MSS大小的数据）</li><li>每收到一个ACK，cwnd++；<code>呈线性上升</code></li><li>每经过一个RTT，cwnd = cwnd *2 ；<code>呈指数让升</code></li><li>当cwnd &gt;= ssthresh时，就会进入<code>拥塞避免算法</code>（一般来说ssthresh的值是65535字节）</li></ol></li></ul></li><li><p><code>拥塞避免</code>：</p><ul><li>核心思想：<code>避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。是一个线性上升的算法</code></li><li>具体算法： <ol><li>每收到一个ACK时，cwnd = cwnd + 1/cwnd</li><li>当每过一个RTT时，cwnd++</li></ol></li></ul></li>",2)),(0,c.Lk)("li",null,[i[23]||(i[23]=(0,c.Lk)("p",null,[(0,c.Lk)("code",null,"拥塞发生"),(0,c.eW)("：")],-1)),(0,c.Lk)("ul",null,[i[22]||(i[22]=(0,c.Lk)("li",null,[(0,c.eW)("核心思想："),(0,c.Lk)("code",null,"通过强烈地震荡快速而小心得找到在拥塞时流量的平衡点")],-1)),(0,c.Lk)("li",null,[i[20]||(i[20]=(0,c.Lk)("code",null,"基于重传类型分为两种",-1)),i[21]||(i[21]=(0,c.eW)("： ")),(0,c.Lk)("ul",null,[(0,c.Lk)("li",null,[i[3]||(i[3]=(0,c.eW)("如果出现")),i[4]||(i[4]=(0,c.Lk)("code",null,"超时重传",-1)),i[5]||(i[5]=(0,c.eW)("： ")),i[6]||(i[6]=(0,c.Lk)("img",{src:"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/803c2581f2a5a16c657cf6e0bf1394a2.png",alt:"Img",loading:"lazy"},null,-1)),(0,c.Lk)("ol",null,[i[1]||(i[1]=(0,c.Lk)("li",null,"修改 sshthresh = cwnd /2",-1)),i[2]||(i[2]=(0,c.Lk)("li",null,"cwnd 重置为初始值 1",-1)),(0,c.Lk)("li",null,[(0,c.bF)(e,{color:"red"},{default:(0,c.k6)((()=>i[0]||(i[0]=[(0,c.eW)("进入慢启动过程`")]))),_:1})])])]),(0,c.Lk)("li",null,[i[17]||(i[17]=(0,c.eW)("如果出现")),i[18]||(i[18]=(0,c.Lk)("code",null,"快速重传",-1)),i[19]||(i[19]=(0,c.eW)("： ")),(0,c.Lk)("ol",null,[(0,c.Lk)("li",null,[i[10]||(i[10]=(0,c.Lk)("code",null,"TCP Tahoe",-1)),i[11]||(i[11]=(0,c.eW)("： ")),(0,c.Lk)("ol",null,[i[8]||(i[8]=(0,c.Lk)("li",null,"修改 sshthresh = cwnd /2",-1)),i[9]||(i[9]=(0,c.Lk)("li",null,"cwnd 重置为初始值 1",-1)),(0,c.Lk)("li",null,[(0,c.bF)(e,{color:"red"},{default:(0,c.k6)((()=>i[7]||(i[7]=[(0,c.eW)("进入快速恢复算法")]))),_:1})])])]),(0,c.Lk)("li",null,[i[15]||(i[15]=(0,c.Lk)("code",null,"TCP Reno",-1)),i[16]||(i[16]=(0,c.eW)("：（更优） ")),(0,c.Lk)("ol",null,[i[13]||(i[13]=(0,c.Lk)("li",null,"cwnd = cwnd/2",-1)),i[14]||(i[14]=(0,c.Lk)("li",null,"sshthresh = cwnd",-1)),(0,c.Lk)("li",null,[(0,c.bF)(e,{color:"red"},{default:(0,c.k6)((()=>i[12]||(i[12]=[(0,c.eW)("进入快速恢复算法")]))),_:1})])])])])])])])])]),(0,c.Lk)("li",null,[i[36]||(i[36]=(0,c.Lk)("p",null,[(0,c.Lk)("code",null,"快速恢复"),(0,c.eW)("：")],-1)),(0,c.Lk)("ul",null,[i[33]||(i[33]=(0,c.Lk)("li",null,[(0,c.eW)("核心思想："),(0,c.Lk)("code",null,"如果收到"),(0,c.eW)("3个Duplicated Acks"),(0,c.Lk)("code",null,"说明网络也不那么糟糕，从而开启恢复"),(0,c.eW)("。快速恢复是对拥塞发生后直接进入慢启动的一个优化。")],-1)),i[34]||(i[34]=(0,c.Lk)("li",null,[(0,c.Lk)("code",null,"快速重传和快速恢复算法一般同时使用")],-1)),(0,c.Lk)("li",null,[i[31]||(i[31]=(0,c.Lk)("code",null,"TCP Reno 快速恢复",-1)),i[32]||(i[32]=(0,c.eW)("： ")),(0,c.Lk)("ul",null,[(0,c.Lk)("li",null,[i[28]||(i[28]=(0,c.eW)("过程： ")),(0,c.Lk)("ol",null,[i[25]||(i[25]=(0,c.Lk)("li",null,"cwnd = sshthresh + 3（3 的意思是3个确认包被收到了）",-1)),(0,c.Lk)("li",null,[(0,c.bF)(e,{color:"red"},{default:(0,c.k6)((()=>i[24]||(i[24]=[(0,c.eW)("重传duplicated ACK指定的丢失的数据包")]))),_:1})]),i[26]||(i[26]=(0,c.Lk)("li",null,"如果再收到 duplicated Acks，那么cwnd ++",-1)),i[27]||(i[27]=(0,c.Lk)("li",null,[(0,c.eW)("当收到了重传数据的Ack，那么cwnd = sshthresh，进入"),(0,c.Lk)("code",null,"拥塞避免"),(0,c.eW)("的算法（收到新的Ack意味着恢复阶段结束，此时需要重新进入之前的拥塞避免状态)")],-1))])]),i[29]||(i[29]=(0,c.Lk)("li",null,"和超时重传不一样，没有重置cwnd=1，而是还在比较高的值，后续呈线性增长",-1)),i[30]||(i[30]=(0,c.Lk)("li",null,[(0,c.eW)("局限性： "),(0,c.Lk)("ul",null,[(0,c.Lk)("li",null,[(0,c.eW)("该算法依赖3个重复的acks，如果丢失多个包且"),(0,c.Lk)("code",null,"未开启SACK"),(0,c.eW)("，接收方只会重传duplicated ACK指定这一个包。其他丢失的包会触发"),(0,c.Lk)("code",null,"超时重传"),(0,c.eW)("，这样会将cwnd降低到1/2。")])])],-1))])]),i[35]||(i[35]=(0,c.Fv)('<li><code>TCP New Reno 快速恢复</code>： <ul><li>对TCP Reno的改进，在<code>没有SACK的支持</code>下改进快速恢复算法</li><li>过程： <ol><li>当接收到3个Duplicated ACKs，进行指定包的快速重传</li><li>判断重传的包返回的Ack信息能否覆盖发送端已发送未确认的所有数据 <ol><li>如果不能覆盖则表示不止一个包丢失，继续重传滑动窗口内未被ack的包，直到所有包正常发出</li><li>如果可以覆盖，则快速恢复结束</li></ol></li></ol></li><li>示意图： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/efaea203fecccf29701f935fabd7587d.png" alt="图片" loading="lazy"></li></ul></li><li>FACK 算法： <ul><li>作用：对重传过程做拥塞流控，防止重传很多数据包，导致本来就很忙的网络就更忙</li></ul></li><li>其他快速恢复算法： <ul><li>TCP Vegas 拥塞控制算法</li><li>HSTCP(High Speed TCP) 算法</li><li>TCP BIC 算法</li><li>TCP WestWood算法</li></ul></li>',3))])])])])]),i[42]||(i[42]=(0,c.Fv)('<h3 id="tcp-半连接、全连接队列" tabindex="-1"><a class="header-anchor" href="#tcp-半连接、全连接队列"><span>TCP 半连接、全连接队列：</span></a></h3><ul><li>半连接队列（<code>SYN</code> 队列）： <ul><li>服务端收到<code>第一次</code>握手后，会将 sock`加入到这个队列中</li><li>队列内的sock都是 <code>SYN_RECV</code> 状态</li></ul></li><li>全连接队列（<code>ACCEPT</code> 队列）： <ul><li>服务端收到<code>第三次</code>握手后，将半连接队列的 sock取出，放到全连接队列中</li><li>队列里的sock都是 <code>ESTABLISHED</code> 状态</li><li>这里面的连接，就等着服务端执行 <code>accept()</code> 后被取出</li></ul></li><li>图例： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/73569d19d8f0f6878b794cff79d1c009.png" alt="Img" loading="lazy"></li><li>底层结构： <ul><li>全连接队列：链表</li><li>半连接队列：哈希表、hashkey(sourceip+port) <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2308af33cd202b8b7b7606801a6ea791.png" alt="Img" loading="lazy"></li></ul></li><li>查看队列大小： <ul><li>全连接：ss -lnt</li><li>半连接：netstat -nt | grep -i &#39;127.0.0.1:8080&#39; | grep -i &#39;SYN_RECV&#39; | wc -l</li></ul></li></ul><h3 id="tcp-syn攻击" tabindex="-1"><a class="header-anchor" href="#tcp-syn攻击"><span>TCP SYN攻击：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/323dd299d0cf90461b7ce78680846b36.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li>说明： <ul><li>当服务端接收到客户端的 SYN 报文时，会创建一个半连接的对象，然后将其加入到内核的「SYN 队列」；</li><li>接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；</li><li>服务端接收到 ACK 报文后，从「SYN 队列」取出一个半连接对象，然后创建一个新的连接对象放入到「Accept 队列」；</li><li>应用通过调用 <code>accpet()</code> socket 接口，从「Accept 队列」取出连接对象。</li></ul></li><li>攻击原理： <ul><li>SYN 攻击方式最直接的表现就会<code>把TCP半连接队列打满</code>，后续正常SYN报文就会被丢弃，导致客户端无法和服务端建立连接</li></ul></li><li>避免方式： <ul><li>调大 netdev_max_backlog</li><li>增大 TCP 半连接队列´</li><li>开启 <code>tcp_syncookies</code>（资源分配后置）</li><li>减少/合并 SYN+ACK 重传次数</li></ul></li></ul><h3 id="tcp-延迟确认机制" tabindex="-1"><a class="header-anchor" href="#tcp-延迟确认机制"><span>TCP 延迟确认机制：</span></a></h3><ul><li><p>背景：接收方做ACK相应时，没有携带数据报文，协议头却占40字节，传输效率低。</p></li><li><p>作用：TCP 延迟确认，通过<code>延迟发送Ack，将延迟时间内的多个Ack合并</code>，提升<code>传输效率</code></p></li><li><p>具体策略：</p><ul><li>接收方有响应数据要发送时，<code>ACK 会随着响应数据一起立刻发送给对方</code></li><li>没有响应数据要发送，<code>ACK 将会延迟一段时间</code>，以等待是否有响应数据可以一起发送</li><li>但是如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会<code>立刻发送 ACK</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8ff282c7a435e1c4dfd6ae3a8adae2ce.png" alt="Img" loading="lazy"></li></ul></li><li><p>Nagle 算法</p></li></ul><h3 id="tcp-累计确认机制" tabindex="-1"><a class="header-anchor" href="#tcp-累计确认机制"><span>TCP 累计确认机制：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/186447b1ed6b4c95d7b0b9d9d71b681d.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li>解决：接收方的响应Ack是对之前已收到的包的累计确认。当接收方给发送方的某个ACK丢包时，发送方可以通过后续的收到的ACK知道数据已被接收方确认。</li><li>图中的 ACK 600 确认应答报文丢失，但发送方收到了ACK 700 确认应答，这意味着 700 之前的所有数据<code>接收方都收到了</code>。这个模式就叫<code>累计确认</code>或者<code>累计应答</code></li><li>存在的问题： <ul><li>如果接收方接受的数据包发生丢失，接收方无法使用累计确认Ack来确认后续的数据包。在这种情况下，接收方需要使用选择性确认<code>SACK</code>来确认非连续的数据包</li></ul></li></ul><h3 id="tcp-选择性确认机制-sack" tabindex="-1"><a class="header-anchor" href="#tcp-选择性确认机制-sack"><span>TCP 选择性确认机制：SACK</span></a></h3><ul><li>问题：发给接收方的包出现丢失，如果只重传ack的那个包，效率低；如果重传ack之后的所有包，资源浪费；</li><li><code>接收方</code>额外返回<code>已收到的数据区间</code>，让发送端有选择的重传，而不必重传已收到的包 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37e2287f8d81753409afe59471b47ed1.png" alt="Img" loading="lazy"></li></ul><h3 id="tcp-快速建立连接-tcp-fast-open" tabindex="-1"><a class="header-anchor" href="#tcp-快速建立连接-tcp-fast-open"><span>TCP 快速建立连接：TCP Fast Open</span></a></h3><ul><li>作用： <ul><li>减少建立TCP连接所需的往返时间，在首次的SYN包中就携带数据</li></ul></li><li>机制说明： <ol><li><code>客户端首次连接时进行正常的三次握手</code>。在这个过程中，服务器会生成<code>特殊的cookie</code>，在SYN-ACK包中一并发送给客户端</li><li><code>当客户端再次与服务器建立连接时</code>，在初始的SYN包中携带这个<code>cookie</code>和<code>用户数据</code></li><li>服务器在收到这个SYN包，会检查cookie的有效性： <ol><li>如果cookie有效，正常处理<code>用户数据</code>，并通过SYN-ACK包对数据和SYN做确认响应</li><li>无效，则丢弃<code>用户数据</code>，只对SYN做确认</li></ol></li><li>客户端根据SYN-ACK包，决定是否需要重发<code>用户数据</code></li></ol></li><li>TFO 存在的问题： <ul><li>安全性问题</li><li>重放攻击</li></ul></li></ul><h3 id="tcp-保活机制-tcp-keepalive" tabindex="-1"><a class="header-anchor" href="#tcp-保活机制-tcp-keepalive"><span>TCP 保活机制：TCP Keepalive</span></a></h3><ul><li>作用：用于主动检测一个TCP连接是否仍然有效的机制</li><li>机制说明： <ul><li>默认不开启</li><li>需要长连接，数据发送不频繁的场景使用更好</li><li>net.ipv4.tcp_keepalive_time=7200 //没有活动的时间</li><li>net.ipv4.tcp_keepalive_intvl=75 //探测报文发送频率</li><li>net.ipv4.tcp_keepalive_probes=9 //探测报文重试次数</li></ul></li><li>过程： <ul><li>当一个TCP连接在<code>一段时间</code>内没有任何活动，TCP会发送保活探测报文（Keepalive probe）来检查连接是否仍然有效</li><li>探测失败会按照一定频率进行重试，如果<code>多次</code>探测报文都没有得到响应，TCP会认为连接已经断开，并关闭连接</li></ul></li></ul><h3 id="tcp-挑战确认-tcp-challenge-ack" tabindex="-1"><a class="header-anchor" href="#tcp-挑战确认-tcp-challenge-ack"><span>TCP 挑战确认： TCP Challenge ACK</span></a></h3><ul><li>作用：应对TCP<code>序列号预测攻击</code></li><li>机制： <ul><li>当TCP连接的某些行为引发怀疑时（如收到不符合预期的SYN包、ACK包），接收方会发送一个挑战ACK包。这个包包含当前正确的序列号和一个新的确认号，要求发送方确认它们</li></ul></li><li>具体流程： <ul><li>客户端和服务端处于<code>连接状态</code></li><li>客户端异常中断，服务端仍处于<code>连接状态</code></li><li>在服务端TCP保活机制未发现客户端断开前，客户端又使用相同的端口号发送SYN包给服务端进行握手</li><li>连接状态的服务端，收到这个SYN握手报文，会回复一个Ack。Ack携带的是历史连接的Seq num和Ack num而不是SYN包的。这个包就叫 <code>Challenge ACK</code></li><li>客户端收到这个ACK，发现确认号并不是自己期望收到的，于是回复<code>RST报文</code>关闭连接 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/55ec46c05fcc294f67733f271098d64a.png" alt="Img" loading="lazy"></li></ul></li><li>实际应用： <ul><li>killcx： <ul><li>伪造客户端发送 SYN 报文，服务端收到后就会回复正确「序列号和确认号」的 ACK 报文（Challenge ACK）</li><li>利用 确认号伪造 RST 报文给服务端</li><li>利用 序列号伪造 RST 报文给客户端</li></ul></li></ul></li></ul><h3 id="tcp-总结" tabindex="-1"><a class="header-anchor" href="#tcp-总结"><span>TCP 总结：</span></a></h3><ul><li>顺序问题，稳重不乱</li><li>丢包问题，承诺靠谱</li><li>连接维护，有始有终</li><li>流量控制，把握分寸</li><li>拥塞控制，知进知退</li></ul><p>参考</p><ul><li>https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA</li></ul>',22))])}]]),o=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/05.%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81TCP%EF%BC%88%E5%9B%9B%E5%B1%82%EF%BC%89.html","title":"05.传输层、TCP（四层）","lang":"zh-CN","frontmatter":{"title":"05.传输层、TCP（四层）","date":"2024-03-27T20:51:15.000Z","author":"Navyum","tags":["TCP"],"categories":["网络"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"icon":"bxs:hot","description":"传输： 数据传输格式： MAC层定义了本地局域网设备的传输行为 IP层定义了整个网络端到端的传输行为 传输层定义应用程序到应用程序的传输，基于端口区分 这两层基本定义了包的特性： 网络传输是以包为单位的，MAC层叫帧Frame，IP层叫包Packet，包被分片后叫Fragment，传输层叫段Segment MAC层和IP层的我们笼统地称为包。包单独传输...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/05.%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81TCP%EF%BC%88%E5%9B%9B%E5%B1%82%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"05.传输层、TCP（四层）"}],["meta",{"property":"og:description","content":"传输： 数据传输格式： MAC层定义了本地局域网设备的传输行为 IP层定义了整个网络端到端的传输行为 传输层定义应用程序到应用程序的传输，基于端口区分 这两层基本定义了包的特性： 网络传输是以包为单位的，MAC层叫帧Frame，IP层叫包Packet，包被分片后叫Fragment，传输层叫段Segment MAC层和IP层的我们笼统地称为包。包单独传输..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/63dc99d734ef85b68c95f6d4a1645777.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"TCP"}],["meta",{"property":"article:published_time","content":"2024-03-27T20:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05.传输层、TCP（四层）\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/63dc99d734ef85b68c95f6d4a1645777.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/297de65e785b33533c0f4abe533e5dce.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/05ecb9399c2b6a816b58b3fd1e890275.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/84fe5f77d405144573c34a93c0ab95ae.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9cbbbdb61b7ed570a2d1c7e93aa6c8c5.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/e056331af380dc8746a9d97ef09514e8.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/91ea2f98e977d712f5a896d15e6d0820.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b3baa53dc153b76a064a2ef829ca21c8.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4705095d72f9876cc007e13c3e14b870.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37e2287f8d81753409afe59471b47ed1.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/6603050de3bd575c51dfea5b58726dc3.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/17c8fe857cbb66f044889e93b8c80a30.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f2674754fab25bef42d72bd52b704620.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/471844fdbdf583d87b205c246c7ca98d.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/803c2581f2a5a16c657cf6e0bf1394a2.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/efaea203fecccf29701f935fabd7587d.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/73569d19d8f0f6878b794cff79d1c009.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2308af33cd202b8b7b7606801a6ea791.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/323dd299d0cf90461b7ce78680846b36.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8ff282c7a435e1c4dfd6ae3a8adae2ce.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/186447b1ed6b4c95d7b0b9d9d71b681d.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37e2287f8d81753409afe59471b47ed1.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/55ec46c05fcc294f67733f271098d64a.png\\"],\\"datePublished\\":\\"2024-03-27T20:51:15.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":3,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":17.52,"words":5257},"filePathRelative":"计算机网络/05.传输层、TCP（四层）.md","localizedDate":"2024年3月27日","excerpt":"<h2>传输：</h2>\\n<h3>数据传输格式：</h3>\\n<ul>\\n<li><code>MAC层</code>定义了本地局域网<code>设备</code>的传输行为</li>\\n<li><code>IP层</code>定义了整个网络<code>端到端</code>的传输行为</li>\\n<li><code>传输层</code>定义<code>应用程序到应用程序</code>的传输，基于端口区分</li>\\n<li>这两层基本定义了包的特性：\\n<ul>\\n<li>网络传输是以包为单位的，<code>MAC层叫帧</code>Frame，<code>IP层叫包</code>Packet，包被分片后叫Fragment，<code>传输层叫段</code>Segment</li>\\n<li>MAC层和IP层的我们笼统地称为包。包单独传输，自行选路，在不同的设备封装、解封装，不保证到达</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);