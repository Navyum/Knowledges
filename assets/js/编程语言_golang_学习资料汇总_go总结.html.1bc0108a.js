"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[40736],{31861:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>n,data:()=>o});var l=t(6254);const a={},n=(0,t(36995).A)(a,[["render",function(e,i){return(0,l.uX)(),(0,l.CE)("div",null,i[0]||(i[0]=[(0,l.Fv)('<h1 id="go-语言经典知识总结" tabindex="-1"><a class="header-anchor" href="#go-语言经典知识总结"><span>Go 语言经典知识总结</span></a></h1><p>基于混合线程的并发编程模型自然不必多说</p><h1 id="在数据类型方面有" tabindex="-1"><a class="header-anchor" href="#在数据类型方面有"><span>在数据类型方面有：</span></a></h1><ul><li>基于底层数组的切片；</li><li>用来传递数据的通道；</li><li>作为一等类型的函数；</li><li>可实现面向对象的结构体；</li><li>能无侵入实现的接口等。</li></ul><h1 id="在语法方面有" tabindex="-1"><a class="header-anchor" href="#在语法方面有"><span>在语法方面有：</span></a></h1><ul><li>异步编程神器go语句；</li><li>函数的最后关卡defer语句；</li><li>可做类型判断的switch语句；</li><li>多通道操作利器select语句；</li><li>非常有特色的异常处理函数panic和recover。</li></ul><h1 id="测试-go-程序的程序测试套件" tabindex="-1"><a class="header-anchor" href="#测试-go-程序的程序测试套件"><span>测试 Go 程序的程序测试套件：</span></a></h1><ul><li>独立的测试源码文件；</li><li>三种功用不同的测试函数；</li><li>专用的testing代码包；</li><li>功能强大的go test命令。</li></ul><h1 id="go语言提供的那些同步工具" tabindex="-1"><a class="header-anchor" href="#go语言提供的那些同步工具"><span>Go语言提供的那些同步工具：</span></a></h1><ul><li>经典的互斥锁；</li><li>读写锁；</li><li>条件变量；</li><li>原子操作</li></ul><h1 id="go-语言特有的一些数据类型" tabindex="-1"><a class="header-anchor" href="#go-语言特有的一些数据类型"><span>Go 语言特有的一些数据类型：</span></a></h1><ul><li>单次执行小助手sync.Once；</li><li>临时对象池sync.Pool；</li><li>帮助我们实现多 goroutine 协作流程的sync.WaitGroup、context.Context；</li><li>一种高效的并发安全字典sync.Map</li></ul><h1 id="go常用标准库" tabindex="-1"><a class="header-anchor" href="#go常用标准库"><span>Go常用标准库：</span></a></h1><p>sync</p><p>list</p><p>ring</p><p>strings</p><p>bytes</p><p>bufio</p><p>os</p><p>net</p><p>net/http</p><p>runtime</p><h1 id="go内置函数-built-in" tabindex="-1"><a class="header-anchor" href="#go内置函数-built-in"><span>GO内置函数（Built-in）</span></a></h1><p>copy</p><p>逃逸分析</p>',26)]))}]]),o=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/go%E6%80%BB%E7%BB%93.html","title":"Go 语言经典知识总结","lang":"zh-CN","frontmatter":{"description":"Go 语言经典知识总结 基于混合线程的并发编程模型自然不必多说 在数据类型方面有： 基于底层数组的切片； 用来传递数据的通道； 作为一等类型的函数； 可实现面向对象的结构体； 能无侵入实现的接口等。 在语法方面有： 异步编程神器go语句； 函数的最后关卡defer语句； 可做类型判断的switch语句； 多通道操作利器select语句； 非常有特色的异...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/go%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"Go 语言经典知识总结"}],["meta",{"property":"og:description","content":"Go 语言经典知识总结 基于混合线程的并发编程模型自然不必多说 在数据类型方面有： 基于底层数组的切片； 用来传递数据的通道； 作为一等类型的函数； 可实现面向对象的结构体； 能无侵入实现的接口等。 在语法方面有： 异步编程神器go语句； 函数的最后关卡defer语句； 可做类型判断的switch语句； 多通道操作利器select语句； 非常有特色的异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T10:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 语言经典知识总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-15T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\",\\"url\\":\\"https://myblog.camscanner.top\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1749983452000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.01,"words":302},"filePathRelative":"编程语言/golang/学习资料汇总/go总结.md","localizedDate":"2025年6月15日","excerpt":"\\n<p>基于混合线程的并发编程模型自然不必多说</p>\\n<h1>在数据类型方面有：</h1>\\n<ul>\\n<li>基于底层数组的切片；</li>\\n<li>用来传递数据的通道；</li>\\n<li>作为一等类型的函数；</li>\\n<li>可实现面向对象的结构体；</li>\\n<li>能无侵入实现的接口等。</li>\\n</ul>\\n<h1>在语法方面有：</h1>\\n<ul>\\n<li>异步编程神器go语句；</li>\\n<li>函数的最后关卡defer语句；</li>\\n<li>可做类型判断的switch语句；</li>\\n<li>多通道操作利器select语句；</li>\\n<li>非常有特色的异常处理函数panic和recover。</li>\\n</ul>","autoDesc":true}')},36995:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,l]of i)t[e]=l;return t}}}]);