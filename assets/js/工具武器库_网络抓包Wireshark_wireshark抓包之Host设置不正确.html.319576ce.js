"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[96017],{9550:(s,a,i)=>{i.r(a),i.d(a,{comp:()=>l,data:()=>t});var n=i(6254);const e={},l=(0,i(36995).A)(e,[["render",function(s,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<h2 id="wireshark抓包" tabindex="-1"><a class="header-anchor" href="#wireshark抓包"><span>wireshark抓包</span></a></h2><h3 id="sling-请求k8s负载均衡器-导致的404错误" tabindex="-1"><a class="header-anchor" href="#sling-请求k8s负载均衡器-导致的404错误"><span>Sling 请求k8s负载均衡器，导致的404错误</span></a></h3><hr><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景：</span></a></h3><p>在一次业务开发中，业务中需要请求k8s服务地址。但是业务逻辑中的请求总是提示HTTP 404错误，使用curl 命令又是正确的。</p><h3 id="出现问题" tabindex="-1"><a class="header-anchor" href="#出现问题"><span>出现问题：</span></a></h3><p>在golang项目中，使用<a href="https://github.com/dghubble/sling" target="_blank" rel="noopener noreferrer">Sling库</a>作为clinet，进行网络请求以获取服务响应结果</p><h3 id="出错的关键golang代码如下" tabindex="-1"><a class="header-anchor" href="#出错的关键golang代码如下"><span>出错的关键golang代码如下</span></a></h3><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>    response:=new(Response)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t// 构建请求</span></span>\n<span class="line"><span>\trequest := srv.sling.New().</span></span>\n<span class="line"><span>\t\tPOST(Path).</span></span>\n<span class="line"><span>\t\tQueryStruct(params).</span></span>\n<span class="line"><span>\t\tSet(&quot;Host&quot;, custom-host)    // 线上环境为k8s，需要强制设置host</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 发送请求</span></span>\n<span class="line"><span>\tresp, err := request.Body(bytes.NewReader(pdfContent)).ReceiveSuccess(response)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    if err != nil {</span></span>\n<span class="line"><span>      // handle error</span></span>\n<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最终定位到原因" tabindex="-1"><a class="header-anchor" href="#最终定位到原因"><span>最终定位到原因：</span></a></h3><p>直接原因：通过上述 Sling 的 Set 方法设置自定义的 Host 到 header 中，没有实际生效</p><p>根本原因：</p><ul><li>Sling 底层使用的是基础库 net/http 中的 http.Request 进行 HTTP 请求。在 Sling 的<a href="https://github.com/dghubble/sling/blob/main/sling.go" target="_blank" rel="noopener noreferrer">Request</a>方法中，仅仅通过addHeaders设置了http.Request的Header对象：</li></ul><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func addHeaders(req *http.Request, header http.Header) {</span></span>\n<span class="line"><span>\tfor key, values := range header {</span></span>\n<span class="line"><span>\t\tfor _, value := range values {</span></span>\n<span class="line"><span>\t\t\treq.Header.Add(key, value)</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>而在 Go 的 net/http 标准库中，HTTP 请求的 Host 头部（Host header）是由 http.Request.Host 字段决定的，而不是 http.Request.Header[&quot;Host&quot;]。 如果只是设置了req.Header.Set(&quot;Host&quot;, ...)，Go 的 HTTP 客户端在发送请求时会忽略 Header 里的 &quot;Host&quot; 字段，而是只看 req.Host 字段。 只有当 req.Host 为空时，Go 才会自动用 req.URL.Host 作为 Host 头。<span style="color:rgb(255, 76, 0);">巨坑啊巨坑！！！</span></li></ul><blockquote><p>官方文档说明： For client requests, Host optionally overrides the Host header to send. If empty, the Request.Write method uses the value of URL.Host. <a href="https://pkg.go.dev/net/http#Request" target="_blank" rel="noopener noreferrer">参考地址</a></p></blockquote><h3 id="分析过程" tabindex="-1"><a class="header-anchor" href="#分析过程"><span>分析过程：</span></a></h3><ol><li><p>分析出现 404 的可能原因：</p><ol><li>HTTP method 限制必须要是 POST 方式；如果设置为 GET，可能直接返回404</li><li>HTTP 的 body没有成功读取到</li><li>HTTP 的文件传输格式可能无法使用raw binary stream方式，而是要使用multipart/form-data格式</li><li>因为上游服务是k8s Ingress，服务使用了虚拟主机（Virtual Host）路由机制，在同一个 Ingress Controller 下，通过不同的 Host 访问同的后端服务；如果 Host 设置不正确，往往会404</li></ol></li><li><p>因为改代码的代价最小，所以先通过改代码逻辑的方式，逐个确认是否可以解决问题；很不幸没有解决（包括使用Sling.Set 设置 Host）。</p></li><li><p>直接通过tcpdump进行抓包，在wireshark中打开</p><ul><li>请求失败 404<p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1d72e52a50f04678e1ec0d3085361f99.png" width="80%"></p></li><li>请求头信息<p align="center"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/57b6203b94dcbf4549510f08a036ce54.png" width="80%"></p></li></ul></li><li><p>解析抓包结果： 直接就可以看出实际请求的 Host 跟我们在代码中设置的不符合，即代码的设置没有生效！！</p></li><li><p>解决方案： 排查为什么Sling在设置Host时，与实际请求存在偏差，最终定位到原因，Sling的实现没有支持单独设置 http.Request.Host，当使用 sling.Set 设置Host时，仅仅修改了http.Request.Header[&quot;Host&quot;]的值；这与实际的Host存在明显偏差。</p><ol><li>修改设置Host的逻辑，更改http.Request.Host的值<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  req, err := sling.New().Post(&quot;https://example.com/api&quot;).Request()</span></span>\n<span class="line"><span>  if err != nil {</span></span>\n<span class="line"><span>      // handle error</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  req.Host = &quot;custom-host&quot;</span></span>\n<span class="line"><span>  resp, err := http.DefaultClient.Do(req)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>提交了 PR 给 Sling 库，支持Set方法设置 Host <a href="https://github.com/dghubble/sling/pull/120" target="_blank" rel="noopener noreferrer">merge request</a> 主要改动：<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>     func addHeaders(req *http.Request, header http.Header) {</span></span>\n<span class="line"><span>         for key, values := range header {</span></span>\n<span class="line"><span>             if key == &quot;Host&quot; &amp;&amp; len(values) &gt; 0 {</span></span>\n<span class="line"><span>                 // For Host header, only set the Host field directly</span></span>\n<span class="line"><span>                 req.Host = values[0]</span></span>\n<span class="line"><span>             } else {</span></span>\n<span class="line"><span>                 // For all other headers, add them to the request header</span></span>\n<span class="line"><span>                 for _, value := range values {</span></span>\n<span class="line"><span>                     req.Header.Add(key, value)</span></span>\n<span class="line"><span>                 }</span></span>\n<span class="line"><span>             }</span></span>\n<span class="line"><span>         }</span></span>\n<span class="line"><span>     }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="延伸" tabindex="-1"><a class="header-anchor" href="#延伸"><span>延伸：</span></a></h3><p>为什么 k8s ingress 需要设置不同的 Host？</p><ul><li><p>虚拟主机（Virtual Host）路由机制 Kubernetes Ingress 允许你在同一个 Ingress Controller（比如 nginx-ingress、traefik、alb-ingress 等）下，配置多个域名（Host）指向不同的后端服务。这种机制叫做“基于 Host 的路由”或“虚拟主机路由”。</p></li><li><p>示例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">networking.k8s.io/v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Ingress</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">example-ingress</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">app1.example.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          backend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">app1-service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">app2.example.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          backend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">app2-service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你访问 Ingress Controller 的外部地址（比如 ELB、NLB、LoadBalancer IP），但 Host 头不是你配置的域名，Ingress Controller 就无法正确路由到目标服务。</p></li></ul><p>其他请求地址和Host不一致的场景：</p><ul><li>API Gateway ： 例如Kong、APISIX、AWS API Gateway 等 API 网关</li><li>多租户 SaaS 平台：使用Host区分租户</li><li>云负载均衡（Cloud Load Balancer）：AWS ELB/ALB、GCP Load Balancer、Azure Application Gateway 等，支持基于 Host 的路由</li><li>反向代理（Reverse Proxy）：Nginx/Apache/HAProxy 等反向代理服务器常常根据 Host 头来做虚拟主机路由</li></ul><p>总结： 只要有&quot;统一入口+多后端&quot;或&quot;虚拟主机&quot;需求的地方，Host 头和实际请求地址（地址只是个统一入口）就可能不一样。这也是为什么很多云原生、微服务、SaaS、测试、代理等场景都需要手动设置 Host 头。</p>',24)]))}]]),t=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85Wireshark/wireshark%E6%8A%93%E5%8C%85%E4%B9%8BHost%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%AD%A3%E7%A1%AE.html","title":"wireshark抓包之Host设置不正确","lang":"zh-CN","frontmatter":{"title":"wireshark抓包之Host设置不正确","author":"Navyum","date":"2025-06-18T19:40:32.000Z","icon":"lucide-lab:shark","article":true,"index":true,"headerDepth":2,"sticky":true,"star":true,"tags":["wireshark","抓包","host错误"],"categories":["wireshark","工具"],"description":"wireshark抓包 Sling 请求k8s负载均衡器，导致的404错误 背景： 在一次业务开发中，业务中需要请求k8s服务地址。但是业务逻辑中的请求总是提示HTTP 404错误，使用curl 命令又是正确的。 出现问题： 在golang项目中，使用Sling库作为clinet，进行网络请求以获取服务响应结果 出错的关键golang代码如下 最终定位...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85Wireshark/wireshark%E6%8A%93%E5%8C%85%E4%B9%8BHost%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%AD%A3%E7%A1%AE.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"wireshark抓包之Host设置不正确"}],["meta",{"property":"og:description","content":"wireshark抓包 Sling 请求k8s负载均衡器，导致的404错误 背景： 在一次业务开发中，业务中需要请求k8s服务地址。但是业务逻辑中的请求总是提示HTTP 404错误，使用curl 命令又是正确的。 出现问题： 在golang项目中，使用Sling库作为clinet，进行网络请求以获取服务响应结果 出错的关键golang代码如下 最终定位..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"wireshark"}],["meta",{"property":"article:tag","content":"抓包"}],["meta",{"property":"article:tag","content":"host错误"}],["meta",{"property":"article:published_time","content":"2025-06-18T19:40:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"wireshark抓包之Host设置不正确\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-18T19:40:32.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1750251344000,"updatedTime":1750671321000,"contributors":[{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":3,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":4.14,"words":1241},"filePathRelative":"工具武器库/网络抓包Wireshark/wireshark抓包之Host设置不正确.md","localizedDate":"2025年6月18日","excerpt":"<h2>wireshark抓包</h2>\\n<h3>Sling 请求k8s负载均衡器，导致的404错误</h3>\\n<hr>\\n<h3>背景：</h3>\\n<p>在一次业务开发中，业务中需要请求k8s服务地址。但是业务逻辑中的请求总是提示HTTP 404错误，使用curl 命令又是正确的。</p>\\n<h3>出现问题：</h3>\\n<p>在golang项目中，使用<a href=\\"https://github.com/dghubble/sling\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Sling库</a>作为clinet，进行网络请求以获取服务响应结果</p>","autoDesc":true}')},36995:(s,a)=>{a.A=(s,a)=>{const i=s.__vccOpts||s;for(const[s,n]of a)i[s]=n;return i}}}]);