"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[15179],{6378:(t,e,o)=>{o.r(e),o.d(e,{comp:()=>r,data:()=>u});var n=o(6254);const i={},r=(0,o(36995).A)(i,[["render",function(t,e){return(0,n.uX)(),(0,n.CE)("div",null,e[0]||(e[0]=[(0,n.Fv)("<p>Mutex定义：</p><pre><code>互斥锁看作是针对某一个临界区或某一组相关临界区的唯一访问令牌\n\n互斥锁一个结构体类型，属于值类型中的一种.\n</code></pre><p>互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）</p><p>Mutex使用注意事项:</p><ul><li>不要重复锁定互斥锁；</li><li>不要忘记解锁互斥锁，必要时使用defer语句；</li><li>不要对尚未锁定或者已解锁的互斥锁解锁；</li><li>不要在多个函数之间直接传递互斥锁。 对一个已经被锁定的互斥锁进行锁定，是会立即阻塞当前的 goroutine 的。这个 goroutine 所执行的流程，会一直停滞在调用该互斥锁的Lock方法的那行代码上。直到该互斥锁的Unlock方法被调用</li></ul><p>最佳实践：</p><p>如果一个流程在锁定了某个互斥锁之后分叉了，或者有被中断的可能，那么就应该使用defer语句来对它进行解锁，而且这样的defer语句应该紧跟在锁定操作之后。这是最保险的一种做法。</p><p>把互斥锁传给一个函数、将它从函数中返回、把它赋给其他变量、让它进入某个通道都会导致它的副本的产生。并且，原值和它的副本，以及多个副本之间都是完全独立的，它们都是不同的互斥锁，所以应该传其指针类型</p><p>RWMutex规则：</p><ul><li>在写锁已被锁定的情况下再试图锁定写锁，会阻塞当前的 goroutine。</li><li>在写锁已被锁定的情况下试图锁定读锁，也会阻塞当前的 goroutine。</li><li>在读锁已被锁定的情况下试图锁定写锁，同样会阻塞当前的 goroutine。</li><li>在读锁已被锁定的情况下再试图锁定读锁，并不会阻塞当前的 goroutine。 即对于读锁，可以重复锁定读锁，从而不影响访问临界区资源。多个写操作不能同时进行，写操作和读操作也不能同时进行，但多个读操作却可以同时进行。</li></ul><p>对写锁进行解锁，会唤醒“所有因试图锁定读锁，而被阻塞的 goroutine”，并且，这通常会使它们都成功完成对读锁的锁定。</p><p>对读锁进行解锁，且需要解锁所有读锁(只会在没有其他读锁锁定的前提下)，才会唤醒“因试图锁定写锁，而被阻塞的 goroutine”；并且，最终只会有一个被唤醒的 goroutine 能够成功完成对写锁的锁定，其他的 goroutine 还要在原处继续等待。至于是哪一个 goroutine，那就要看谁的等待时间最长了。</p>",12)]))}]]),u=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E6%A0%87%E5%87%86%E5%BA%93/sync/sync.Mutext%E3%80%81sync.RWMutex.html","title":"sync.Mutext、sync.RWMutex","lang":"zh-CN","frontmatter":{"title":"sync.Mutext、sync.RWMutex","author":"navyum","date":"2025-06-21T22:29:00.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"Mutex定义： 互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity） Mutex使用注意事项: 不要重复锁定互斥锁； 不要忘记解锁互斥锁，必要时使用defer语句； 不要对尚未锁定或者已解锁的互斥锁解锁； 不要在多个函数之间直接传递互斥锁。 对一个已经被锁定的互斥锁进行锁定，是会立即阻塞当前的 gorout...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E6%A0%87%E5%87%86%E5%BA%93/sync/sync.Mutext%E3%80%81sync.RWMutex.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"sync.Mutext、sync.RWMutex"}],["meta",{"property":"og:description","content":"Mutex定义： 互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity） Mutex使用注意事项: 不要重复锁定互斥锁； 不要忘记解锁互斥锁，必要时使用defer语句； 不要对尚未锁定或者已解锁的互斥锁解锁； 不要在多个函数之间直接传递互斥锁。 对一个已经被锁定的互斥锁进行锁定，是会立即阻塞当前的 gorout..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:29:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sync.Mutext、sync.RWMutex\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-21T22:29:00.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":2.48,"words":745},"filePathRelative":"编程语言/golang/标准库/sync/sync.Mutext、sync.RWMutex.md","localizedDate":"2025年6月21日","excerpt":"<p>Mutex定义：</p>\\n<pre><code>互斥锁看作是针对某一个临界区或某一组相关临界区的唯一访问令牌\\n\\n互斥锁一个结构体类型，属于值类型中的一种.\\n</code></pre>\\n<p>互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）</p>\\n<p>Mutex使用注意事项:</p>\\n<ul>\\n<li>不要重复锁定互斥锁；</li>\\n<li>不要忘记解锁互斥锁，必要时使用defer语句；</li>\\n<li>不要对尚未锁定或者已解锁的互斥锁解锁；</li>\\n<li>不要在多个函数之间直接传递互斥锁。\\n对一个已经被锁定的互斥锁进行锁定，是会立即阻塞当前的 goroutine 的。这个 goroutine 所执行的流程，会一直停滞在调用该互斥锁的Lock方法的那行代码上。直到该互斥锁的Unlock方法被调用</li>\\n</ul>","autoDesc":true}')},36995:(t,e)=>{e.A=(t,e)=>{const o=t.__vccOpts||t;for(const[t,n]of e)o[t]=n;return o}}}]);