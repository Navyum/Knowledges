"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[56782],{36995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,r]of e)a[t]=r;return a}},45339:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>i,data:()=>l});var r=a(6254);const n={},i=(0,a(36995).A)(n,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h2 id="搜索树查找" tabindex="-1"><a class="header-anchor" href="#搜索树查找"><span>搜索树查找</span></a></h2><ul><li>直接使用搜索树的节点有序、节点大小关系等特性</li><li>本质思想根二分查找一致，通过有序的先验条件，快速排除1/2、1/M的节点，M为树的阶数</li></ul><h2 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程：</span></a></h2><ul><li>基于搜索树搜索： <ul><li>二叉搜索树：比较target和节点值大小；小于节点，继续找左子树，大于节点，继续找右子树；相等则找到，或者访问到叶子节点也未找到。</li><li>B树：比较target和节点值大小；根据值所在区间，到对应子树继续查找；如果节点中有根target相等，则可以在该节点找到target信息，或者访问到叶子节点也未找到。</li><li>B+树：比较非叶子节点和target，根据值所在区间，到对应子树继续查找；因为只有叶子节点存数据，一直要找到叶子节点，才能找到target的具体信息</li></ul></li></ul>',4)]))}]]),l=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/3.%E6%90%9C%E7%B4%A2/3.%E6%90%9C%E7%B4%A2%E6%A0%91%E6%9F%A5%E6%89%BE.html","title":"3.搜索树查找","lang":"zh-CN","frontmatter":{"title":"3.搜索树查找","author":"navyum","date":"2025-06-15T00:00:00.000Z","order":-1,"article":true,"headerDepth":2,"sticky":true,"star":true,"category":["算法","搜索算法"],"tag":["算法","搜索树"],"description":"搜索树查找 直接使用搜索树的节点有序、节点大小关系等特性 本质思想根二分查找一致，通过有序的先验条件，快速排除1/2、1/M的节点，M为树的阶数 过程： 基于搜索树搜索： 二叉搜索树：比较target和节点值大小；小于节点，继续找左子树，大于节点，继续找右子树；相等则找到，或者访问到叶子节点也未找到。 B树：比较target和节点值大小；根据值所在区间...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/3.%E6%90%9C%E7%B4%A2/3.%E6%90%9C%E7%B4%A2%E6%A0%91%E6%9F%A5%E6%89%BE.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"3.搜索树查找"}],["meta",{"property":"og:description","content":"搜索树查找 直接使用搜索树的节点有序、节点大小关系等特性 本质思想根二分查找一致，通过有序的先验条件，快速排除1/2、1/M的节点，M为树的阶数 过程： 基于搜索树搜索： 二叉搜索树：比较target和节点值大小；小于节点，继续找左子树，大于节点，继续找右子树；相等则找到，或者访问到叶子节点也未找到。 B树：比较target和节点值大小；根据值所在区间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"搜索树"}],["meta",{"property":"article:published_time","content":"2025-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.搜索树查找\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"算法数据结构/算法/3.搜索/3.搜索树查找.md","localizedDate":"2025年6月15日","excerpt":"<h2>搜索树查找</h2>\\n<ul>\\n<li>直接使用搜索树的节点有序、节点大小关系等特性</li>\\n<li>本质思想根二分查找一致，通过有序的先验条件，快速排除1/2、1/M的节点，M为树的阶数</li>\\n</ul>\\n<h2>过程：</h2>\\n<ul>\\n<li>基于搜索树搜索：\\n<ul>\\n<li>二叉搜索树：比较target和节点值大小；小于节点，继续找左子树，大于节点，继续找右子树；相等则找到，或者访问到叶子节点也未找到。</li>\\n<li>B树：比较target和节点值大小；根据值所在区间，到对应子树继续查找；如果节点中有根target相等，则可以在该节点找到target信息，或者访问到叶子节点也未找到。</li>\\n<li>B+树：比较非叶子节点和target，根据值所在区间，到对应子树继续查找；因为只有叶子节点存数据，一直要找到叶子节点，才能找到target的具体信息</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);