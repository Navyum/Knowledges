"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[52125],{29564:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>c});var i=a(6254);const n={},o=(0,a(36995).A)(n,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h3 id="连接的本质" tabindex="-1"><a class="header-anchor" href="#连接的本质"><span>连接的本质：</span></a></h3><ul><li>把各个连接表中的记录都取出来依次匹配的组合加入结果集并返回给用户</li></ul><h3 id="示意图" tabindex="-1"><a class="header-anchor" href="#示意图"><span>示意图：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0be1fc0637e1a70c9d00ff71c0af9af6.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="连接的类型" tabindex="-1"><a class="header-anchor" href="#连接的类型"><span>连接的类型：</span></a></h3><ul><li><p>根据驱动表中的记录在被驱动表中无匹配时，是否加入到最后的结果集分为：</p><ul><li>内连接<code>INNER JOIN</code>：不加入结果集</li><li>外连接：加入结果集</li></ul></li><li><p>根据驱动表选择分为：</p><ul><li>左外连接 <code>LEFT JOIN</code>：选取左侧的表为驱动表</li><li>右外连接 <code>RIGHT JOIN</code>：选取右侧的表为驱动表</li></ul></li></ul><h3 id="条件过滤" tabindex="-1"><a class="header-anchor" href="#条件过滤"><span>条件过滤：</span></a></h3><ul><li><code>WHERE</code>：不论是<code>内连接</code>还是<code>外连接</code>，凡是不符合<code>WHERE</code>子句中的过滤条件的记录都不会被加入最后的结果集</li><li><code>ON</code> ：对于<code>外连接</code>的驱动表，如果无法在被驱动表中找到匹配<code>ON</code>子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中并使用<code>NULL</code>值填充（<code>如果用在内连接中，则跟where没区别</code>）</li></ul><h3 id="嵌套循环连接-nested-loop-join" tabindex="-1"><a class="header-anchor" href="#嵌套循环连接-nested-loop-join"><span>嵌套循环连接（Nested-Loop Join）：</span></a></h3><ul><li>步骤： <ol><li>选取驱动表，<code>使用与驱动表相关的过滤条件</code>，<code>选取代价最低的单表访问方法</code>来执行对驱动表的单表查询。</li><li>对上一步骤中查询驱动表得到的结果集中每一条记录，都分别到被驱动表中查找匹配的记录。</li></ol></li><li>驱动表只访问一次，被驱动表却可能被多次访问，访问次数取决于对驱动表执行单表查询后的结果集中的记录条数。这种连接执行方式称之为嵌套循环连接 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2f4ba9ec46548c16bd2471a8eaa52163.png" alt="图片" loading="lazy"></li></ul><h3 id="基于块的嵌套循环连接-block-nested-loop-join" tabindex="-1"><a class="header-anchor" href="#基于块的嵌套循环连接-block-nested-loop-join"><span>基于块的嵌套循环连接（Block Nested-Loop Join）：</span></a></h3><ul><li>使用<code>join buffer</code> 来减少被驱动表的磁盘IO次数</li><li>核心思想：两个表<code>各自先查询独自仅有的条件</code>，然后再一次性比较连接的条件</li><li><code>join buffer</code>：执行连接查询前申请的一块固定大小的内存。 <ul><li>先把若干条驱动表结果集中的记录装在这个<code>join buffer</code>中</li><li>然后开始扫描被驱动表</li><li>每一条被驱动表的记录一次性和<code>join buffer</code>中的多条驱动表记录做匹配</li></ul></li><li><code>join buffer</code>优点：因为匹配的过程都是在内存中完成的，所以这样可以显著减少被驱动表的<code>I/O</code>代价 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/85952242c137a46ce5ee9e67c21f4745.png" alt="图片" loading="lazy"></li></ul>',12)]))}]]),c=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/13.%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2-join.html","title":"13.连表查询-join","lang":"zh-CN","frontmatter":{"title":"13.连表查询-join","date":"2025-06-17T15:21:52.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","连表查询"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"连接的本质： 把各个连接表中的记录都取出来依次匹配的组合加入结果集并返回给用户 示意图： 图片图片 连接的类型： 根据驱动表中的记录在被驱动表中无匹配时，是否加入到最后的结果集分为： 内连接INNER JOIN：不加入结果集 外连接：加入结果集 根据驱动表选择分为： 左外连接 LEFT JOIN：选取左侧的表为驱动表 右外连接 RIGHT JOIN：选...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/13.%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2-join.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"13.连表查询-join"}],["meta",{"property":"og:description","content":"连接的本质： 把各个连接表中的记录都取出来依次匹配的组合加入结果集并返回给用户 示意图： 图片图片 连接的类型： 根据驱动表中的记录在被驱动表中无匹配时，是否加入到最后的结果集分为： 内连接INNER JOIN：不加入结果集 外连接：加入结果集 根据驱动表选择分为： 左外连接 LEFT JOIN：选取左侧的表为驱动表 右外连接 RIGHT JOIN：选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0be1fc0637e1a70c9d00ff71c0af9af6.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"连表查询"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:21:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13.连表查询-join\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0be1fc0637e1a70c9d00ff71c0af9af6.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2f4ba9ec46548c16bd2471a8eaa52163.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/85952242c137a46ce5ee9e67c21f4745.png\\"],\\"datePublished\\":\\"2025-06-17T15:21:52.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"常用软件/数据库/mysql/13.连表查询-join.md","localizedDate":"2025年6月17日","excerpt":"<h3>连接的本质：</h3>\\n<ul>\\n<li>把各个连接表中的记录都取出来依次匹配的组合加入结果集并返回给用户</li>\\n</ul>\\n<h3>示意图：</h3>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0be1fc0637e1a70c9d00ff71c0af9af6.png\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<h3>连接的类型：</h3>\\n<ul>\\n<li>\\n<p>根据驱动表中的记录在被驱动表中无匹配时，是否加入到最后的结果集分为：</p>\\n<ul>\\n<li>内连接<code>INNER JOIN</code>：不加入结果集</li>\\n<li>外连接：加入结果集</li>\\n</ul>\\n</li>\\n<li>\\n<p>根据驱动表选择分为：</p>\\n<ul>\\n<li>左外连接 <code>LEFT JOIN</code>：选取左侧的表为驱动表</li>\\n<li>右外连接 <code>RIGHT JOIN</code>：选取右侧的表为驱动表</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},36995:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}}}]);