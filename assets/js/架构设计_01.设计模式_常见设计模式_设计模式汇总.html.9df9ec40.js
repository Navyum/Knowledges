"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[66677],{36995:(t,l)=>{l.A=(t,l)=>{const r=t.__vccOpts||t;for(const[t,i]of l)r[t]=i;return r}},61002:(t,l,r)=>{r.r(l),r.d(l,{comp:()=>s,data:()=>d});var i=r(6254);const n={},s=(0,r(36995).A)(n,[["render",function(t,l){return(0,i.uX)(),(0,i.CE)("div",null,l[0]||(l[0]=[(0,i.Fv)('<h2 id="设计模式大纲" tabindex="-1"><a class="header-anchor" href="#设计模式大纲"><span>设计模式大纲</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a2062c3944538ca5b4992ee515c27aa5.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><hr><h2 id="设计原则-solid原则" tabindex="-1"><a class="header-anchor" href="#设计原则-solid原则"><span>设计原则：（SOLID原则）</span></a></h2><table><thead><tr><th>简写</th><th>原则名</th><th>说明</th></tr></thead><tbody><tr><td>SRP</td><td>单一职责原则</td><td>每个模块或类都应该对软件提供的功能的一部分负责，而这个责任应该完全由类来封装。它的所有服务都应严格遵守这一职责。</td></tr><tr><td>OCP</td><td>开闭原则</td><td>软件中的对象（类、模块、函数等）对扩展是开放的，对修改是封闭的。</td></tr><tr><td>LSP</td><td>里氏替换原则</td><td>所有使用基类的地方必须能透明地使用其子类的对象。</td></tr><tr><td>ISP</td><td>接口隔离原则</td><td>客户端不应该依赖它不需要的接口。</td></tr><tr><td>DIP</td><td>依赖倒转原则</td><td>是指一种特定的解耦（传统的依赖关系建立在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</td></tr><tr><td>LoD/PoLK</td><td>迪米特法则/最少知识原则</td><td>1. 每个对象应该对其他对象尽可能最少的知道 2. 每个对象应该仅和其朋友通信；不和陌生人通信 3. 仅仅和直接朋友通信</td></tr></tbody></table><hr><h3 id="设计模式汇总" tabindex="-1"><a class="header-anchor" href="#设计模式汇总"><span>设计模式汇总</span></a></h3><table><thead><tr><th>分类</th><th>设计模式</th><th>英文名</th><th>作用</th><th>使用场景</th><th>案例</th></tr></thead><tbody><tr><td>创建型</td><td>单例模式</td><td>Singleton</td><td>确保类仅有一个实例，并提供全局访问点</td><td>当需要全局访问且仅允许一个实例时</td><td>全局配置管理器、日志记录器</td></tr><tr><td>创建型</td><td>工厂模式</td><td>Factory</td><td>根据参数创建相关类型对象，解耦对象创建与使用</td><td>当对象创建逻辑复杂或需要根据参数动态创建对象时</td><td>数据库连接工厂、文件解析器工厂</td></tr><tr><td>创建型</td><td>建造者模式</td><td>Builder</td><td>通过设置可选参数构建复杂对象，定制化创建过程</td><td>当需要构建复杂对象且对象的构建过程复杂时</td><td>构建复杂的产品对象，如汽车配置器</td></tr><tr><td>创建型</td><td>原型模式</td><td>Prototype</td><td>复制现有对象创建新对象，适用于创建成本高且对象差异小的场景</td><td>当对象创建成本高且需要频繁创建相似对象时</td><td>游戏中的克隆角色、文档编辑中的复制粘贴</td></tr><tr><td>结构型</td><td>代理模式</td><td>Proxy</td><td>引入代理类控制对原类的访问，可添加额外处理</td><td>当需要控制对某个对象的访问或添加额外逻辑时</td><td>远程代理、缓存代理、权限代理</td></tr><tr><td>结构型</td><td>桥接模式</td><td>Bridge</td><td>分离抽象与实现，使两者能独立变化，降低耦合度</td><td>当需要分离抽象与实现，使两者独立变化时</td><td>UI框架中分离视图与实现逻辑</td></tr><tr><td>结构型</td><td>装饰器模式</td><td>Decorator</td><td>以组合方式动态为对象添加额外功能</td><td>当需要动态为对象添加功能且不想修改原有类时</td><td>动态添加功能，如文本编辑器中的字体加粗、斜体</td></tr><tr><td>结构型</td><td>适配器模式</td><td>Adapter</td><td>将不兼容接口转换为可兼容接口，使类协同工作</td><td>当需要让不兼容的类协同工作时</td><td>将旧系统接口适配到新系统中</td></tr><tr><td>结构型</td><td>门面模式</td><td>Facade</td><td>提供简化接口，用于访问子系统的一组接口</td><td>当需要隐藏子系统的复杂性，提供简单接口时</td><td>外部API调用，如电商系统中的支付接口</td></tr><tr><td>结构型</td><td>组合模式</td><td>Composite</td><td>将对象组织成树形结构，统一处理单个与组合对象</td><td>当需要表示对象的层次结构时</td><td>文件系统中的文件和文件夹管理</td></tr><tr><td>结构型</td><td>享元模式</td><td>Flyweight</td><td>通过共享对象减少内存消耗，用于大量重复对象场景</td><td>当需要减少重复对象的内存占用时</td><td>游戏中的子弹对象、文本编辑器中的字符对象</td></tr><tr><td>行为型</td><td>观察者模式</td><td>Observer</td><td>解耦观察者与被观察者，实现事件发布 - 订阅机制</td><td>当需要实现事件驱动或对象间依赖关系时</td><td>GUI事件处理、股票行情更新</td></tr><tr><td>行为型</td><td>模板方法模式</td><td>Template Method</td><td>定义算法骨架，由子类实现特定步骤</td><td>当需要定义固定流程但某些步骤需要子类实现时</td><td>算法框架、游戏关卡流程</td></tr><tr><td>行为型</td><td>策略模式</td><td>Strategy</td><td>封装算法，使其可互相替换，解耦算法与使用代码</td><td>当需要在运行时动态切换算法时</td><td>排序算法切换、支付方式切换</td></tr><tr><td>行为型</td><td>职责链模式</td><td>Chain of Responsibility</td><td>多个处理器顺序处理请求，可动态传递请求</td><td>当需要多个对象顺序处理请求且处理顺序不确定时</td><td>客户端请求处理、异常处理链</td></tr><tr><td>行为型</td><td>迭代器模式</td><td>Iterator</td><td>遍历集合对象，解耦容器与遍历代码</td><td>当需要遍历集合但不想暴露内部结构时</td><td>集合框架中的遍历操作</td></tr><tr><td>行为型</td><td>状态模式</td><td>State</td><td>实现状态机，根据状态变化执行不同行为</td><td>当对象的行为依赖于其状态且状态变化复杂时</td><td>游戏角色状态（正常、受伤、死亡）、订单状态管理</td></tr><tr><td>行为型</td><td>访问者模式</td><td>Visitor</td><td>解耦操作与对象，对对象结构中的对象执行操作</td><td>当需要对对象结构中的对象执行多种操作且不想修改对象结构时</td><td>报表生成、代码分析工具</td></tr><tr><td>行为型</td><td>备忘录模式</td><td>Memento</td><td>在不破坏封装的情况下捕获并保存对象状态以便恢复</td><td>当需要保存和恢复对象状态时</td><td>游戏存档、文档撤销操作</td></tr><tr><td>行为型</td><td>命令模式</td><td>Command</td><td>将请求封装成对象，支持请求排队、日志记录与撤销操作</td><td>当需要将操作封装为对象以便后续处理时</td><td>撤销操作、命令队列</td></tr><tr><td>行为型</td><td>解释器模式</td><td>Interpreter</td><td>通过定义语法规则实现简单语言的解释器</td><td>当需要解析和执行简单语言时</td><td>简单的表达式求值、小型脚本语言解析</td></tr><tr><td>行为型</td><td>中介模式</td><td>Mediator</td><td>引入中介层简化多个对象间复杂交互，转换为一对多关系</td><td>当多个对象之间交互复杂且需要集中管理时</td><td>聊天室、交通控制系统</td></tr></tbody></table><h2 id="设计模式分类" tabindex="-1"><a class="header-anchor" href="#设计模式分类"><span>设计模式分类：</span></a></h2><h3 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式"><span>创建型设计模式</span></a></h3><p>创建型设计模式包括：单例模式、工厂模式、建造者模式、原型模式。 它主要解决：对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。</p><h4 id="_1-单例模式singleton" tabindex="-1"><a class="header-anchor" href="#_1-单例模式singleton"><span>1. 单例模式Singleton</span></a></h4><p><strong>使用说明</strong></p><ul><li>单例模式确保一个类只有一个实例，并提供一个全局访问点。</li></ul><p><strong>使用场景</strong></p><ul><li>需要严格控制实例数量的场景，如配置管理器、连接池等。</li><li>全局访问点，如日志记录器。</li></ul><p><strong>实现方式</strong></p><ul><li>饿汉式：类加载时就初始化实例。</li><li>懒汉式：首次使用时初始化实例。</li><li>双重检测：多线程环境下的懒汉式实现。</li><li>静态内部类：利用类加载机制实现延迟加载。</li><li>枚举：通过枚举实现单例，简单且线程安全。</li></ul><p><strong>模式优点</strong></p><ul><li>减少内存消耗，节省系统资源。</li><li>控制资源访问，实现集中管理。</li></ul><p><strong>模式缺点</strong></p><ul><li>违反了类的单一职责原则，增加类的功能复杂度。</li><li>难以测试，因为单例实例全局可访问，测试时难以控制。</li><li>扩展困难，单例模式限制了实例的扩展。</li></ul><p><strong>使用该模式的标准</strong></p><ul><li>当类必须只有一个实例时使用。</li><li>当这个唯一实例的多个客户端需要共享资源时使用。</li></ul><p><strong>补充说明</strong></p><ul><li>虽然单例模式有其缺点，但在某些场景下，如全局配置管理，它仍然是一个有效的解决方案。替代方案包括工厂模式和依赖注入（IOC）容器，它们可以提供更灵活的实例管理。</li></ul><p><strong>golang</strong></p><ul><li>sync.Once</li></ul><hr><h4 id="_2-工厂模式factory" tabindex="-1"><a class="header-anchor" href="#_2-工厂模式factory"><span>2. 工厂模式Factory</span></a></h4><p><strong>使用说明</strong></p><ul><li>工厂模式用于创建相关类型的对象，通过参数决定具体创建哪种类型的对象。它包含简单工厂、工厂方法和抽象工厂三种形式，其中简单工厂和工厂方法较为常用。</li></ul><p><strong>使用场景</strong></p><ul><li><strong>简单工厂模式</strong>：适用于对象创建逻辑简单，多个对象创建逻辑可以集中管理的情况。</li><li><strong>工厂方法模式</strong>：适用于对象创建逻辑复杂，需要将创建逻辑分散以避免工厂类过于庞大。</li><li><strong>抽象工厂模式</strong>：适用于需要创建一系列相关或依赖对象的场景，使用较少。</li></ul><p><strong>判断是否使用该模式的标准：</strong></p><ul><li><strong>封装变化</strong>：当对象创建逻辑可能变化时，使用工厂模式可以透明化这些变化。</li><li><strong>代码复用</strong>：通过工厂类复用创建代码。</li><li><strong>隔离复杂性</strong>：封装复杂的创建逻辑，简化调用者代码。</li><li><strong>控制复杂度</strong>：减少函数或类的职责，使代码更简洁。</li></ul><p><strong>补充说明</strong></p><ul><li>工厂模式在依赖注入框架中应用广泛，如Spring IOC和Google Guice，它们通过集中管理对象的创建、组装和管理，实现与业务代码的解耦，帮助开发者专注于业务逻辑的开发。</li></ul><p><strong>使用说明</strong></p><ul><li>工厂模式通过参数化方式创建对象，适用于简单工厂、工厂方法和抽象工厂三种场景。</li></ul><p><strong>使用场景</strong></p><ul><li><strong>简单工厂</strong>：适用于简单的对象创建逻辑，便于集中管理。</li><li><strong>工厂方法</strong>：适用于复杂的对象创建逻辑，避免工厂类过于庞大。</li><li><strong>抽象工厂</strong>：适用于创建一系列相关或依赖对象的场景。</li></ul><p><strong>判断是否使用该模式的标准：</strong></p><ul><li><strong>封装变化</strong>：对象创建逻辑可能变化时，使用工厂模式。</li><li><strong>代码复用</strong>：通过工厂类复用创建代码。</li><li><strong>隔离复杂性</strong>：封装复杂的创建逻辑。</li></ul><p><strong>补充说明</strong></p><ul><li>工厂模式在依赖注入框架中广泛应用，如Spring IOC和Google Guice，实现对象创建与管理的解耦。</li></ul><p><strong>golang 举例</strong></p><ul><li>sync.Once</li></ul><hr><h4 id="_3-建造者模式builder" tabindex="-1"><a class="header-anchor" href="#_3-建造者模式builder"><span>3. 建造者模式Builder</span></a></h4><p><strong>使用说明</strong></p><ul><li>建造者模式用于构建复杂对象，允许通过设置可选参数来定制化创建对象。</li></ul><p><strong>使用场景</strong></p><ul><li>类属性众多，构造函数参数列表过长。</li><li>类的属性之间存在依赖关系或约束条件。</li><li>需要创建不可变对象，对象创建后不可修改属性。</li></ul><p><strong>实现方式</strong></p><ul><li>通过建造者类暴露设置属性的方法，逐步构建复杂对象。</li><li>建造者类包含一个内部产品类，最终提供一个获取产品对象的方法。</li></ul><p><strong>模式优点</strong></p><ul><li>易于扩展和维护，新增属性或修改构建过程简单。</li><li>客户端代码不需要知道对象的构建细节。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能会产生多余的建造者类，增加系统复杂度。</li></ul><p><strong>补充说明</strong></p><ul><li>建造者模式适用于对象的构建过程需要灵活性和可定制性的场景，同时保持客户端代码的简洁性。</li></ul><p><strong>golang 举例</strong></p><ul><li>对比函数选项模式</li></ul><hr><h4 id="_4-原型模式prototype" tabindex="-1"><a class="header-anchor" href="#_4-原型模式prototype"><span>4. 原型模式Prototype</span></a></h4><p><strong>使用说明</strong> 原型模式通过复制现有对象（原型）来创建新对象，适用于对象创建成本高且对象间差异小的场景。</p><p><strong>使用场景</strong></p><ul><li>创建成本高的对象。</li><li>需要快速复制对象以节省时间。</li><li>对象间大部分字段相同，差异小。</li></ul><p><strong>实现方式</strong></p><ul><li>浅拷贝：复制基本数据类型和引用对象的地址。</li><li>深拷贝：完全独立复制对象，包括引用对象及其引用对象。</li></ul><p><strong>模式优点</strong></p><ul><li>减少对象创建时间，提高效率。</li><li>可以复制复杂对象，无需重新初始化。</li></ul><p><strong>模式缺点</strong></p><ul><li>深拷贝消耗更多时间和内存。</li><li>浅拷贝可能导致对象共享数据，增加数据被意外修改的风险。</li></ul><p><strong>补充说明</strong></p><ul><li>在性能和资源消耗之间需要权衡，选择合适的拷贝方式（浅拷贝或深拷贝）。对于不可变对象，浅拷贝是安全的；对于可变对象，需谨慎使用浅拷贝。</li></ul><p><strong>golang 举例</strong></p><ul><li>sync.pool</li></ul><hr><h3 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式"><span>结构型设计模式</span></a></h3><p>结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式 结构型设计模式主要解决：“类或对象的组合”问题。它总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。</p><h4 id="_1-代理模式proxy" tabindex="-1"><a class="header-anchor" href="#_1-代理模式proxy"><span>1. 代理模式Proxy</span></a></h4><p><strong>使用说明</strong> 代理模式通过引入代理类来控制对原类的访问，代理类与原类具有相同的接口，适合对基础库的再封装。</p><p><strong>使用场景</strong></p><ul><li>需要控制对原类对象的访问时。</li><li>需要在访问原类对象时添加额外的处理，如日志、权限检查等。</li></ul><p><strong>实现方式</strong></p><ul><li>静态代理：为每个需要代理的类编写一个代理类。</li><li>动态代理：在运行时动态创建代理类，使用反射机制。</li></ul><p><strong>模式优点</strong></p><ul><li>增加了对象的访问控制，提高了系统的灵活性。</li><li>能够将业务逻辑与非业务逻辑（如日志、权限检查）解耦。</li></ul><p><strong>模式缺点</strong></p><ul><li>静态代理增加了代码量，每个类都需要一个代理类。</li><li>动态代理可能引入性能开销。</li></ul><p><strong>补充说明</strong> 代理模式在RPC、缓存等场景中广泛应用，有助于实现业务功能与非业务功能的分离。</p><p><strong>golang 举例</strong></p><ul><li>XXXProxy</li></ul><hr><h4 id="_2-桥接模式bridge" tabindex="-1"><a class="header-anchor" href="#_2-桥接模式bridge"><span>2. 桥接模式Bridge</span></a></h4><p><strong>使用说明</strong> 桥接模式将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><p><strong>使用场景</strong></p><ul><li>需要降低抽象和实现之间的耦合度。</li><li>需要对抽象或实现进行扩展，而不影响另一部分。</li></ul><p><strong>实现方式</strong></p><ul><li>通过抽象类与实现类的组合关系，而非继承关系，实现解耦。</li></ul><p><strong>模式优点</strong></p><ul><li>抽象和实现可以独立扩展和维护。</li><li>减少了继承层次，简化系统结构。</li></ul><p><strong>模式缺点</strong></p><ul><li>增加了系统的复杂性，需要理解组合关系。</li><li>实现可能不如继承那样直接和简单。</li></ul><p><strong>补充说明</strong></p><ul><li>桥接模式适用于需要对抽象和实现进行独立扩展的场景，有助于减少代码的耦合度，但在实际项目中使用频率不高。</li></ul><hr><h4 id="_3-装饰器模式decorator" tabindex="-1"><a class="header-anchor" href="#_3-装饰器模式decorator"><span>3. 装饰器模式Decorator</span></a></h4><p><strong>使用说明</strong> 装饰器模式通过组合而非继承的方式，动态地给对象添加额外功能、职责。</p><p><strong>使用场景</strong></p><ul><li>需要动态地扩展对象功能。</li><li>需要透明地扩展多个功能。</li></ul><p><strong>实现方式</strong></p><ul><li>创建一个与原始类相同的抽象类或接口。</li><li>创建具体装饰器类，实现该抽象类或接口，并持有原始类的引用。</li><li>装饰器类可以嵌套使用，以实现多层功能的叠加。</li></ul><p><strong>模式优点</strong></p><ul><li>动态扩展功能，无需修改原始类代码。</li><li>支持多个装饰器的嵌套使用。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能会导致系统更加复杂，增加理解难度。</li><li>多层装饰器嵌套可能导致性能问题。</li></ul><p><strong>补充说明</strong></p><ul><li>装饰器模式适用于需要灵活扩展功能的场景，但需注意不要过度使用，以免系统变得难以维护。</li></ul><hr><h4 id="_4-适配器模式adapter" tabindex="-1"><a class="header-anchor" href="#_4-适配器模式adapter"><span>4. 适配器模式Adapter</span></a></h4><p><strong>使用说明</strong> 适配器模式用于将不兼容的接口转换为可兼容的接口，使原本不能一起工作的类可以协同工作。分为类适配器（继承）和对象适配器（组合）两种形式。</p><p><strong>使用场景</strong></p><ul><li>封装有缺陷的接口设计。</li><li>统一多个类的接口设计。</li><li>替换依赖的外部系统。</li><li>兼容老版本接口。</li><li>适配不同格式的数据。</li></ul><p><strong>实现方式</strong></p><ul><li>类适配器：通过多重继承实现，将适配的类作为父类。</li><li>对象适配器：通过组合实现，将适配的类作为成员变量。</li></ul><p><strong>模式优点</strong></p><ul><li>解决接口不兼容问题，提高系统的灵活性。</li><li>避免修改原有代码，实现兼容。</li></ul><p><strong>模式缺点</strong></p><ul><li>过度使用可能导致系统结构复杂。</li><li>可能隐藏接口之间的不一致性。</li></ul><p><strong>补充说明</strong> 适配器模式是补救策略，用于处理设计上的缺陷。在设计初期应尽量避免接口不兼容问题，减少适配器模式的使用。</p><hr><h4 id="_5-门面模式facade" tabindex="-1"><a class="header-anchor" href="#_5-门面模式facade"><span>5. 门面模式Facade</span></a></h4><p><strong>使用说明</strong> 门面模式提供一个简化的接口，用于访问子系统中的一组接口。</p><p><strong>使用场景</strong></p><ul><li>子系统接口复杂，需要简化访问时。</li><li>需要解决性能问题或分布式事务管理。</li></ul><p><strong>实现方式</strong></p><ul><li>创建一个门面类，该类将客户端请求委托给子系统中的适当对象。</li></ul><p><strong>模式优点</strong></p><ul><li>简化客户端接口，隐藏子系统复杂性。</li><li>提高客户端和子系统之间的耦合灵活性。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能会隐藏客户端对子系统的理解，过度使用可能导致系统难以维护。</li></ul><p><strong>补充说明</strong> 门面模式适用于需要简化复杂子系统接口的场景，但需注意不要过度使用，以免系统变得难以维护。</p><hr><h4 id="_6-组合模式composite" tabindex="-1"><a class="header-anchor" href="#_6-组合模式composite"><span>6. 组合模式Composite</span></a></h4><p><strong>使用说明</strong> 组合模式用于处理树形结构数据，将对象组织成树形结构，统一处理单个对象和组合对象。</p><p><strong>使用场景</strong></p><ul><li>数据自然形成树形结构的场景。</li><li>需要递归遍历操作树形结构的场景。</li></ul><p><strong>实现方式</strong></p><ul><li>创建抽象类，定义对象和组合对象的共有接口。</li><li>叶子对象和组合对象都实现这个抽象类。</li><li>通过递归算法处理树形结构中的每个节点。</li></ul><p><strong>模式优点</strong></p><ul><li>简化树形结构的代码实现。</li><li>统一处理对象和组合对象。</li></ul><p><strong>模式缺点</strong></p><ul><li>应用场景受限，仅限于树形结构数据。</li><li>可能导致系统结构复杂，难以理解。</li></ul><p><strong>补充说明</strong> 组合模式适用于需要操作树形结构的场景，通过递归简化实现，但需注意其应用范围的局限性。</p><hr><h4 id="_7-享元模式flyweight" tabindex="-1"><a class="header-anchor" href="#_7-享元模式flyweight"><span>7. 享元模式Flyweight</span></a></h4><p><strong>使用说明</strong> 享元模式通过共享对象减少内存消耗，适用于大量重复对象的场景。</p><p><strong>使用场景</strong></p><ul><li>系统中存在大量重复对象。</li><li>对象创建成本高，需要节省内存。</li></ul><p><strong>实现方式</strong></p><ul><li>将对象设计为享元，共享内存中的实例。</li><li>提取相似对象的共同部分作为享元。</li></ul><p><strong>模式优点</strong></p><ul><li>减少内存消耗，提高系统性能。</li></ul><p><strong>模式缺点</strong></p><ul><li>需要设计合适的享元对象，增加设计复杂度。</li><li>享元对象的状态必须是不可变的，限制了使用场景。</li></ul><p><strong>补充说明</strong> 享元模式适用于对象复用的场景，但需注意享元对象的不可变性，以避免共享对象间的相互影响。</p><hr><h3 id="行为型设计模式" tabindex="-1"><a class="header-anchor" href="#行为型设计模式"><span>行为型设计模式</span></a></h3><p>行为型模式比较多，分别是：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。 行为型设计模式主要解决：“类或对象之间的交互”问题</p><h4 id="_1-观察者模式observe" tabindex="-1"><a class="header-anchor" href="#_1-观察者模式observe"><span>1. 观察者模式Observe</span></a></h4><p><strong>使用说明</strong> 观察者模式通过解耦观察者和被观察者，实现事件的发布-订阅机制。</p><p><strong>使用场景</strong></p><ul><li>需要事件通知机制的场景，如邮件订阅、RSS Feeds。</li><li>需要系统组件间低耦合的场景。</li></ul><p><strong>实现方式</strong></p><ul><li>同步阻塞：经典实现，适用于代码解耦。</li><li>异步非阻塞：提高执行效率，适用于性能要求高的场景。</li><li>跨进程：基于消息队列，适用于不同进程间的交互。</li></ul><p><strong>模式优点</strong></p><ul><li>降低系统组件间的耦合度。</li><li>提高代码的可维护性和可扩展性。</li></ul><p><strong>模式缺点</strong></p><ul><li>实现复杂，尤其是跨进程通信。</li><li>可能引入性能问题，如异步处理中的回调地狱。</li></ul><p><strong>补充说明</strong> EventBus框架提供了观察者模式的实现骨架，简化了在业务场景中的应用，无需从零开发。</p><hr><h4 id="_2-模板方法模式template" tabindex="-1"><a class="header-anchor" href="#_2-模板方法模式template"><span>2. 模板方法模式Template</span></a></h4><p><strong>使用说明</strong> 模板方法模式定义算法骨架，让子类实现特定步骤，保持算法结构不变。</p><p><strong>使用场景</strong></p><ul><li>需要在子类中复用算法框架时。</li><li>需要在不修改算法结构的情况下扩展功能时。</li></ul><p><strong>实现方式</strong></p><ul><li>定义一个抽象类，其中包含模板方法和算法的骨架。</li><li>子类继承抽象类并实现特定的算法步骤。</li></ul><p><strong>模式优点</strong></p><ul><li>代码复用，减少重复代码。</li><li>提供扩展点，便于功能定制。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能导致类体系结构变得复杂。</li></ul><p><strong>补充说明</strong> 模板模式通过继承实现代码复用和扩展，适用于需要在不同子类中复用相同算法结构的场景。</p><hr><h4 id="_3-策略模式strategy" tabindex="-1"><a class="header-anchor" href="#_3-策略模式strategy"><span>3. 策略模式Strategy</span></a></h4><p><strong>使用说明</strong> 策略模式通过定义一组算法类，将算法封装并允许互相替换，实现算法与使用算法的代码之间的解耦。</p><p><strong>使用场景</strong></p><ul><li>需要替换或选择不同算法的场景。</li><li>避免使用冗长的 if-else 或 switch 分支判断。</li><li>提供框架扩展点，满足开闭原则。</li></ul><p><strong>实现方式</strong></p><ul><li>定义策略接口和实现该接口的策略类。</li><li>使用工厂类封装策略创建的细节。</li><li>客户端代码在编译时或运行时选择使用的具体策略。</li></ul><p><strong>模式优点</strong></p><ul><li>算法变化不影响客户端代码，实现解耦。</li><li>降低代码复杂度，易于管理和扩展。</li><li>支持开闭原则，方便添加新策略。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能会引入过多策略类，增加系统复杂度。</li><li>运行时动态确定策略可能影响性能。</li></ul><hr><h4 id="_4-职责链模式chain-of-responsibility" tabindex="-1"><a class="header-anchor" href="#_4-职责链模式chain-of-responsibility"><span>4. 职责链模式Chain of Responsibility</span></a></h4><p><strong>使用说明</strong> 职责链模式通过多个处理器顺序处理请求，每个处理器完成自己的职责后可将请求传递给下一个处理器。</p><p><strong>使用场景</strong></p><ul><li>需要多个对象依次处理请求的场景。</li><li>需要实现过滤器或拦截器功能。</li></ul><p><strong>实现方式</strong></p><ul><li>定义处理器接口，包含处理请求的方法。</li><li>每个具体的处理器类实现该接口，并决定是否将请求传递给下一个处理器。</li></ul><p><strong>模式优点</strong></p><ul><li>降低对象之间的耦合度。</li><li>增强系统的可扩展性，可动态添加或删除处理器。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能导致请求处理的流程变得复杂，难以跟踪和调试。</li><li>性能问题，如果链过长，可能导致处理延迟。</li></ul><p><strong>补充说明</strong> 职责链模式适用于请求处理者不固定的场景，通过链式结构实现请求的动态分发。</p><hr><h4 id="_5-迭代器模式iterator" tabindex="-1"><a class="header-anchor" href="#_5-迭代器模式iterator"><span>5. 迭代器模式Iterator</span></a></h4><p><strong>使用说明</strong> 迭代器模式用于遍历集合对象，解耦容器与遍历代码。</p><p><strong>使用场景</strong></p><ul><li>需要遍历不同数据结构，如数组、链表、树等。</li><li>需要统一遍历接口，简化集合操作。</li></ul><p><strong>实现方式</strong></p><ul><li>提供统一的迭代器接口。</li><li>为每种集合结构实现该迭代器接口。</li></ul><p><strong>模式优点</strong></p><ul><li>封装遍历逻辑，简化集合操作。</li><li>支持多种遍历算法，易于扩展。</li></ul><p><strong>模式缺点</strong></p><ul><li>需要为每种集合实现迭代器，增加工作量。</li><li>迭代过程中修改集合可能导致问题。</li></ul><p><strong>补充说明</strong> 迭代器模式通过提供统一的遍历接口，简化了集合的遍历操作，但需注意迭代过程中集合修改的问题。</p><hr><h4 id="_6-状态模式state" tabindex="-1"><a class="header-anchor" href="#_6-状态模式state"><span>6. 状态模式State</span></a></h4><p><strong>使用说明</strong> 状态模式用于实现状态机，适用于需要根据状态变化执行不同行为的场景。</p><p><strong>使用场景</strong></p><ul><li>游戏开发中角色状态变化。</li><li>工作流引擎中任务状态管理。</li></ul><p><strong>实现方式</strong></p><ul><li>分支逻辑法：使用 if-else 或 switch-case 语句实现状态转移。</li><li>查表法：使用二维数组表示状态转移图，提高代码可读性。</li><li>状态模式：适用于状态和转移简单，但业务逻辑复杂的情况。</li></ul><p><strong>模式优点</strong></p><ul><li>将状态具体化为对象，易于管理和扩展。</li><li>封装状态相关的操作，减少状态转移错误。</li></ul><p><strong>模式缺点</strong></p><ul><li>状态较多时，可能导致系统复杂度增加。</li></ul><p><strong>补充说明</strong> 状态模式通过将状态封装为对象，简化了状态管理，适用于状态变化频繁且需要执行特定动作的场景。</p><hr><h4 id="_7-访问者模式visitor" tabindex="-1"><a class="header-anchor" href="#_7-访问者模式visitor"><span>7. 访问者模式Visitor</span></a></h4><p><strong>使用说明</strong> 访问者模式使操作与对象解耦，适用于需要对对象结构中的对象执行操作的场景。</p><p><strong>使用场景</strong></p><ul><li>需要对对象结构中的对象执行多个操作。</li><li>需要在不修改对象结构的情况下扩展新操作。</li></ul><p><strong>实现方式</strong></p><ul><li>定义访问者接口和具体访问者类。</li><li>对象结构中的每个元素类实现接受访问者的方法。</li></ul><p><strong>模式优点</strong></p><ul><li>扩展新操作容易，无需修改对象结构。</li><li>操作集中管理，不分散在各个类中。</li></ul><p><strong>模式缺点</strong></p><ul><li>增加新元素类时，需要在访问者接口中增加新方法，违反开闭原则。</li><li>客户端代码与访问者模式耦合，可读性差。</li></ul><p><strong>补充说明</strong> 访问者模式适用于操作复杂且需要频繁变化的场景，但需注意其对元素类和访问者类的扩展限制。</p><hr><h4 id="_8-备忘录模式memento" tabindex="-1"><a class="header-anchor" href="#_8-备忘录模式memento"><span>8. 备忘录模式Memento</span></a></h4><p><strong>使用说明</strong> 备忘录模式用于在不破坏封装的情况下，捕获并保存对象状态以便将来恢复。</p><p><strong>使用场景</strong></p><ul><li>需要实现撤销/恢复功能。</li><li>防止数据丢失。</li></ul><p><strong>实现方式</strong></p><ul><li>通过备忘录对象存储原对象状态。</li><li>通过发起人对象请求恢复状态。</li></ul><p><strong>模式优点</strong></p><ul><li>支持内部状态的捕获和恢复。</li><li>保持封装性，外部无法直接访问对象状态。</li></ul><p><strong>模式缺点</strong></p><ul><li>存储大量对象状态可能导致资源消耗。</li><li>恢复操作可能影响性能。</li></ul><p><strong>补充说明</strong> 备忘录模式适用于需要撤销操作的场景，需权衡存储和性能开销。</p><hr><h4 id="_9-命令模式" tabindex="-1"><a class="header-anchor" href="#_9-命令模式"><span>9. 命令模式</span></a></h4><p><strong>使用说明</strong> 命令模式将请求封装成对象，允许使用请求排队、记录请求日志、撤销操作等。</p><p><strong>使用场景</strong></p><ul><li>需要异步、延迟或排队执行命令。</li><li>需要撤销和重做操作。</li><li>需要记录操作日志。</li></ul><p><strong>实现方式</strong></p><ul><li>定义命令接口和具体命令类。</li><li>创建调用者对象，接收命令并执行。</li><li>命令对象包含执行操作的方法。</li></ul><p><strong>模式优点</strong></p><ul><li>降低系统组件间的耦合度。</li><li>提供灵活的命令管理，如排队、记录日志等。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能会引入过多命令类，增加系统复杂度。</li><li>运行时动态确定命令可能影响性能。</li></ul><hr><h4 id="_10-解释器模式" tabindex="-1"><a class="header-anchor" href="#_10-解释器模式"><span>10. 解释器模式</span></a></h4><p><strong>使用说明</strong> 解释器模式用于实现一个简单的语言解释器，通过定义语言的语法规则来解析和执行表达式。</p><p><strong>使用场景</strong></p><ul><li>需要解释特定领域语言的场景。</li><li>需要实现脚本语言解析的场景。</li></ul><p><strong>实现方式</strong></p><ul><li>将语法规则拆分成多个小类，每个类负责一部分解析工作。</li><li>通过组合这些小类来实现整个语法规则的解析。</li></ul><p><strong>模式优点</strong></p><ul><li>提供了一种灵活的方式来扩展和修改语言的语法。</li><li>降低了语言解析的复杂性，易于管理和维护。</li></ul><p><strong>模式缺点</strong></p><ul><li>对于复杂语言，可能导致类的数量过多，系统变得复杂。</li><li>性能可能不如专用的编译器或解释器。</li></ul><p><strong>补充说明</strong> 解释器模式适用于需要快速实现简单语言解析的场景，但需注意其在处理复杂语言时可能带来的性能和复杂性问题。</p><hr><h4 id="_11-中介模式meiator" tabindex="-1"><a class="header-anchor" href="#_11-中介模式meiator"><span>11. 中介模式Meiator</span></a></h4><p><strong>使用说明</strong> 中介模式通过引入中介层简化多个对象间的复杂交互，将多对多关系转换为一对多关系。</p><p><strong>使用场景</strong></p><ul><li>需要简化复杂对象间的交互关系。</li><li>对象间存在多对多的交互，需要降低耦合度。</li></ul><p><strong>实现方式</strong></p><ul><li>创建中介类，作为各个对象交互的中心节点。</li><li>对象通过中介类进行通信，而不是直接交互。</li></ul><p><strong>模式优点</strong></p><ul><li>减少对象间的直接交互，降低系统复杂度。</li><li>提高代码的可读性和可维护性。</li></ul><p><strong>模式缺点</strong></p><ul><li>可能过度集中控制，导致中介类变得复杂。</li><li>系统对中介类的依赖性增强，可能影响性能。</li></ul><p><strong>补充说明</strong></p><ul><li>中介模式适用于对象间交互复杂且需要解耦的场景，需注意中介类的合理设计，避免过度集中。</li></ul><hr>',303)]))}]]),d=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB.html","title":"设计模式汇总","lang":"zh-CN","frontmatter":{"title":"设计模式汇总","date":"2025-02-07T15:30:59.000Z","author":"Navyum","tags":["设计模式"],"categories":["架构设计"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"设计模式大纲 ImgImg 设计原则：（SOLID原则） 设计模式汇总 设计模式分类： 创建型设计模式 创建型设计模式包括：单例模式、工厂模式、建造者模式、原型模式。 它主要解决：对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。 1. 单例模式Singleton 使用说明 单例模式确保一个类只有一个实例，并提供一个全局访问点。 使用场...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"设计模式汇总"}],["meta",{"property":"og:description","content":"设计模式大纲 ImgImg 设计原则：（SOLID原则） 设计模式汇总 设计模式分类： 创建型设计模式 创建型设计模式包括：单例模式、工厂模式、建造者模式、原型模式。 它主要解决：对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。 1. 单例模式Singleton 使用说明 单例模式确保一个类只有一个实例，并提供一个全局访问点。 使用场..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a2062c3944538ca5b4992ee515c27aa5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2025-02-07T15:30:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式汇总\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a2062c3944538ca5b4992ee515c27aa5.png\\"],\\"datePublished\\":\\"2025-02-07T15:30:59.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":25.56,"words":7668},"filePathRelative":"架构设计/01.设计模式/常见设计模式/设计模式汇总.md","localizedDate":"2025年2月7日","excerpt":"<h2>设计模式大纲</h2>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a2062c3944538ca5b4992ee515c27aa5.png\\" alt=\\"Img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Img</figcaption></figure>\\n<hr>\\n<h2>设计原则：（SOLID原则）</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>简写</th>\\n<th>原则名</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>SRP</td>\\n<td>单一职责原则</td>\\n<td>每个模块或类都应该对软件提供的功能的一部分负责，而这个责任应该完全由类来封装。它的所有服务都应严格遵守这一职责。</td>\\n</tr>\\n<tr>\\n<td>OCP</td>\\n<td>开闭原则</td>\\n<td>软件中的对象（类、模块、函数等）对扩展是开放的，对修改是封闭的。</td>\\n</tr>\\n<tr>\\n<td>LSP</td>\\n<td>里氏替换原则</td>\\n<td>所有使用基类的地方必须能透明地使用其子类的对象。</td>\\n</tr>\\n<tr>\\n<td>ISP</td>\\n<td>接口隔离原则</td>\\n<td>客户端不应该依赖它不需要的接口。</td>\\n</tr>\\n<tr>\\n<td>DIP</td>\\n<td>依赖倒转原则</td>\\n<td>是指一种特定的解耦（传统的依赖关系建立在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</td>\\n</tr>\\n<tr>\\n<td>LoD/PoLK</td>\\n<td>迪米特法则/最少知识原则</td>\\n<td>1. 每个对象应该对其他对象尽可能最少的知道 2. 每个对象应该仅和其朋友通信；不和陌生人通信 3. 仅仅和直接朋友通信</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);