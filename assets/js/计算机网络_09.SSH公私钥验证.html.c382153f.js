"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[86846],{36995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},78962:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(6254);const n={},l=(0,a(36995).A)(n,[["render",function(i,s){const a=(0,e.g2)("Mermaid");return(0,e.uX)(),(0,e.CE)("div",null,[s[5]||(s[5]=(0,e.Fv)('<h2 id="ssh是否真的安全" tabindex="-1"><a class="header-anchor" href="#ssh是否真的安全"><span>SSH是否真的安全</span></a></h2><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h3><ul><li><p>在配置完git公钥之后，首次使用git从仓库拉取代码时，都会有如下提示： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/88e816257eb222148ea91dfaa62d89d5.png" alt="Img" loading="lazy"></p></li><li><p>问题：</p><ol><li>为什么要验证这个指纹？</li><li>如何验证这个指纹是否正确呢？</li><li>SSH通信、代理服务是否真的安全呢？</li></ol></li></ul><h3 id="公钥是否被篡改" tabindex="-1"><a class="header-anchor" href="#公钥是否被篡改"><span>公钥是否被篡改</span></a></h3><h4 id="理论基础" tabindex="-1"><a class="header-anchor" href="#理论基础"><span>理论基础</span></a></h4>',5)),(0,e.Lk)("ul",null,[s[3]||(s[3]=(0,e.Lk)("li",null,"按照公、私钥的原理（TLS、SSH都适用）：通信双方在握手时先通过公私钥加密的方式，协商出一个加密算法，然后进行对称加密密钥交换，后续传输数据时则使用对称加密算法",-1)),(0,e.Lk)("li",null,[s[2]||(s[2]=(0,e.eW)("当通信双方存在中间人时，例如中间使用了代理服务，此时代理服务器可以获取到通信双方的所有数据，那么这样到底安全吗？ ")),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[s[0]||(s[0]=(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,"正常情况下，代理服务器虽然获取了双方的所有数据，但都是在TCP传输层的，因为缺少会话层的密钥，所以无法对数据进行解密")],-1)),(0,e.bF)(a,{id:"mermaid-56",code:"eJyNU81yEkEQvucp5pKqWBIKo1w45KIHL3rxCVaYSm3VsuCyel7KSLGRDZaCJCsWJDFCoWEtTRDHxbzMzOzOiVdwyAwJ4Sdkb9vd3zdff90NQA6+eAn1JHykKluGkl4BF5+pmhoE5NO/e1FAT45Iv88sF58f0LN80H7L47IuqximmlSzim6Ch5oKdXNO4omaSmkwrehzcs+g8QoaKzLzNGNCkOEBSRYR6QTgMsib7+z9MUZfqHPI9nq0eyZBonR9c3NcLAKPoaZlwBqteLSUD9xtstMkXoEc1/Df3h0JFQgOFZCEDEgos2zSdaeh4C6gdYfsHJD9ttAUenn856ukXF0FAToM7Z/s2x5GXVJCpNGQOQMmTWBsPVfWYpGNeDwSi8Si8bGW6d4TgHVKnFqw07pNq0VqtWQ11FNLTdvgpnkFLpA4ZVItzDdt/FhQadDiO+aWaR1lDbieVnImp8zBpAHHQ51xOqi0p7wQVl0RTBs9gQxa+ZF5rSMOCHd/k/LHGdiyDu9HpW7su6H3WXS7qEPSQBjtXr2xEDkj9hbIZUof8FlcWCPu6OYFJqgycrb6gzrdoV/Eg3P+O/mcoBr69qI9Jh8cTnIrhhnll+eaALh/wmqnGKFwfxBs98LXA1rs8FlR2+ILKVoZ+iU8KNBak/6qDn2XXyr2O8xqio0V2ztaRTHoidUaDa95ysPXjPwPY4MfLg=="})]),(0,e.Lk)("li",null,[s[1]||(s[1]=(0,e.Lk)("p",null,"**但是假设通信双方在首次握手时，中间人伪造了双方的公钥，分发给双方。**即通信双方拥有的对方的公钥信息是篡改过的，那么此时通信双方的数据在经过中间人时，中间人就可以利用自己的私钥进行解密，获取所有数据，然后再通过公钥进行加密传输给对方。这样整个通信过程就是完全透明的，而通信双方完全不知道。",-1)),(0,e.bF)(a,{id:"mermaid-62",code:"eJydVE1z0kAYvvdX7KUzOraMVrlw6EUPXvTiL4iw02GGL9PoGUbLVwlQBVoBTYsyMEABHZ1hAm3/TN5NcuIvuMkmIbQBnCa3fd99nmef591F6BC/e49jQfwizB3wXHQLmZ8QFiIYQeN6z4eUyaV++keRZVKZQmZK/qbU7jEtbVm9CY4XwsFwgosJ6HkkjGOCR+FVOBSK4CgX86i9wfwHzNtwr+MCRnG6YIHtsHIAPfEh0uzpvYI2Sqn1T6QpQv4CvnbhaKB/bivyTyK2LAy2c3d/36ENWGsvcSQSt7qcIm20SbSrAZRO7vay+jIiWzO70COkNiUYfr+lyoOJYQcQadxQwcpEVmY9PXlOT+QYvbR3exupckvL/db7Z4o8hIIMkmTVeBwUEH/wlnuw5/fvPDZ+n//hCiMDiCKA+Gs+Szk+MibSzJFqliQ71k4cC21Mwz0YkO+TQgpGaYoFYgmq6ds52ArUikSy5QSPd6PcoUBDX52XNhqpla4ipx1/mFjIn1OmOxALoS4MygV5Sev88NrhFT9l9MxRz4ikNl5B7TUbhnTbHipd7aQoChMC16eQHbtQNln9lFo9q2ujb5bD5QK5bM9nWa3VX9zNYoEUO/NZbpXzIMmKXFywsiTcuB62LB3I6FcbE0rvscvxwBb9H3ybzv3Mh5jjerKu3FzQ48KwAEddtXEC5cGa0QG5Qv0n1TERh9QnIwu3fybmwirPZ8BMiiFAueiOn70Qa6KHLyIVcB92O6vN7OuGfjET5vTTYVaL4/msTt9PdpWc2dbkvjK9Mq6y2vsIpZpbpzF15KxIahkitdXmMcklzWfC0LT1Dxp09KM="})])])]),s[4]||(s[4]=(0,e.Lk)("li",null,[(0,e.eW)("初步结论： "),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,"验证对端的公钥是否正确是很必要的一件事情"),(0,e.Lk)("li",null,"在TLS场景下，因为是HTTPS通信，客户端会可以通过CA验证服务器证书中的公钥是否正确。（验证时客户端通过CA的公钥，对服务器的公钥签名进行签名，比对从CA获取到的服务器的证书中的签名是否一致。这相当于套一层壳，这就有了CA证书链的概念）"),(0,e.Lk)("li",null,[(0,e.Lk)("code",null,"在SSH场景下，访问某个服务器IP时，默认不会使用CA机构，那么首次连接时的服务器公钥验证就尤其重要")])])],-1))]),s[6]||(s[6]=(0,e.Fv)('<h3 id="手动验证ssh服务器的公钥的方法" tabindex="-1"><a class="header-anchor" href="#手动验证ssh服务器的公钥的方法"><span>手动验证SSH服务器的公钥的方法</span></a></h3><ul><li><p>生成服务器公钥</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ed25519</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;服务器标识&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/ssh/ssh_host_ed25519_key</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 推荐使用ed25519，椭圆曲线加密算法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>获取公钥的签名</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/ssh/ssh_host_ed25519_key.pub</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>当客户端首次连接服务器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ssh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@server_ip</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> authenticity</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;server_ip (xxx.xxx.xxx.xxx)&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> can&#39;t be established.</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ED25519 key fingerprint is SHA256:xxxxxxx.</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>比对fingerprint是否一致</p></li><li><p>补充：</p><ol><li>如果客户端已经连接过服务器，则可以比较known_host文件<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .ssh/known_hosts</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 此处可能有服务器多个不同算法的多个签名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>生成的fingerprint格式不一致 在服务器上生成的是：<code>256 6c:f1:78:09:f6:14:8f:5b:0d:6f:cd:7e:40:f3:c9:9c (ED25519)</code> 这个是MD5格式的签名，可以尝试在客户端修改生成签名的算法指定为MD5<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .ssh/known_hosts</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> md5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 此处可能有服务器多个不同算法的多个签名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><ul><li>客户端的SSH公钥同样可以在服务端使用ssh-keygen 签名后进行验证</li><li>非对称加密的使用场景下，不仅要确保私钥的安全，还需要确保公钥交换时没有被篡改</li><li>在使用SSH等非对称加密的情况下，在确保双方公钥没被篡改的前提下，即使是存在代理服务（正向代理：公网WIFI、公司网络），<code>应用层</code>的通信依然是安全的</li><li>非对称加密推荐使用ed25519、ecdsa（椭圆曲线加密算法）而不是RSA、DSA，因为它安全性更高、性能更好，关键是<code>前向安全</code></li></ul><h4 id="延伸其他相关概念" tabindex="-1"><a class="header-anchor" href="#延伸其他相关概念"><span>延伸其他相关概念：</span></a></h4><ul><li>公钥： <ul><li>隐私性：公开</li><li>作用： 1. 加密数据 2.验证签名</li><li>常见的公钥： <ul><li>TLS公钥 X.509标准<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----BEGIN PUBLIC KEY-----</span></span>\n<span class="line"><span>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw9T7Jq86Z4GZ+8R9J5U9</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>kZcA5m4+8JZu5wIDAQAB</span></span>\n<span class="line"><span>-----END PUBLIC KEY-----</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>SSH公钥 RFC 4253标准<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ssh-rsa AAAAB3NzaC1yc2E...（Base64）... user@host</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul></li><li>私钥： <ul><li>隐私性：保密</li><li>作用： 1. 解密数据 2.生成签名</li><li>常见的公钥： <ul><li>TLS私钥 PKCS#8 标准<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----BEGIN ENCRYPTED PRIVATE KEY-----  </span></span>\n<span class="line"><span># &lt;mcfile name=&quot;private.key&quot; path=&quot;/xxx/private.key&quot;&gt;&lt;/mcfile&gt;</span></span>\n<span class="line"><span>MIIFLTBXBgkqhkiG9w0BB... (Base64)</span></span>\n<span class="line"><span>-----END ENCRYPTED PRIVATE KEY-----</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>SSH私钥 RFC 4716/PKCS#1<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----BEGIN OPENSSH PRIVATE KEY-----</span></span>\n<span class="line"><span>b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmIAAAAtAAAACmFlczI1Ni1jYmI</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>-----END OPENSSH PRIVATE KEY-----</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li>CSR文件： <ul><li>隐私性：不涉及，可公开</li><li>作用：CSR全称是证书签名请求，用于向CA申请数字证书</li><li>结构：<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----BEGIN CERTIFICATE REQUEST-----</span></span>\n<span class="line"><span>  Base64编码数据（包含）</span></span>\n<span class="line"><span>  ├── 主体信息（域名/组织）</span></span>\n<span class="line"><span>  ├── 主体公钥（核心内容）</span></span>\n<span class="line"><span>  └── 内容的数字签名（申请者私钥生成）</span></span>\n<span class="line"><span>-----END CERTIFICATE REQUEST-----</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>证书（PEM）： <ul><li>隐私性：公开</li><li>作用：PEM证书将公钥与持有者信息绑定，并由CA用私钥签名，从而确保公钥的真实性（通过CSR向CA申请或者自签名）</li><li>结构：<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----BEGIN CERTIFICATE-----</span></span>\n<span class="line"><span>  Base64编码数据（包含）</span></span>\n<span class="line"><span>  ├── 版本号</span></span>\n<span class="line"><span>  ├── 序列号</span></span>\n<span class="line"><span>  ├── 签名算法（如SHA256-RSA）</span></span>\n<span class="line"><span>  ├── 颁发者（CA信息）</span></span>\n<span class="line"><span>  ├── 有效期</span></span>\n<span class="line"><span>  ├── 主体信息（域名/组织）</span></span>\n<span class="line"><span>  ├── 主体公钥（核心内容）</span></span>\n<span class="line"><span>  └── CA的数字签名（用CA私钥生成）</span></span>\n<span class="line"><span>  -----END CERTIFICATE-----</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="申请tls证书" tabindex="-1"><a class="header-anchor" href="#申请tls证书"><span>申请TLS证书：</span></a></h4>',7)),(0,e.bF)(a,{id:"mermaid-287",code:"eJx9kM1OwkAUhfc+RfdG3BND0hR3xoXoA9RmwEb+HCqJOwhpoEptRYILMcREkCAi0UiAgk/TO6UrXsGZtkQNibOZydzvnnvuyaGzc5SWUFQWE1hMbXD0ZEWsyJKcFdMKd5RDeO1T4L0vVtuKRNgV5px6i1TMXSEa453noltrL2eVLJbzooJCp+hiOdO8nv2MgjgsJ04ULhP3FMIcqB9ufQADDdQuudXteXPnGG9HfBkyHNtj3elYMCuQZh+aw/XZtnUdwIYJRgPUPn3DZASVe7CmQuzgn9EMXZR7cNmFzyqo7RUdDBD4MEdV7ekTLZBG2bZGdDHMUsspISmHV4sJfEC7verirQitFpg60ahnjTyUfpAgrdcvMG4oZ086VE9CNNy4LLGwsij1J6wkinuGmbbfAFUVzBff+qbAMy1T/206hnCeTXFLXWf+7kcDNWaLdnugTzDHSRmllTB3uBcjxiPRrsjdiDpzC8WA/gaphAEA"}),s[7]||(s[7]=(0,e.Fv)('<ul><li>还有一种自签名证书，可用于开发</li></ul><h4 id="验证tls证书" tabindex="-1"><a class="header-anchor" href="#验证tls证书"><span>验证TLS证书：</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>keys/</span></span>\n<span class="line"><span>├── private.key         # 最初生成（保密）</span></span>\n<span class="line"><span>├── request.csr         # 已提交（可存档）</span></span>\n<span class="line"><span>└── certificate.pem     # 从CA获得（部署用）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 验证私钥与证书匹配（重要！）</span></span>\n<span class="line"><span>openssl x509 -noout -modulus -in keys/certificate.pem | openssl md5</span></span>\n<span class="line"><span>openssl rsa -noout -modulus -in keys/private.key | openssl md5</span></span>\n<span class="line"><span># 两个MD5值必须一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3))])}]]),t=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/09.SSH%E5%85%AC%E7%A7%81%E9%92%A5%E9%AA%8C%E8%AF%81.html","title":"11.SSH公私钥验证","lang":"zh-CN","frontmatter":{"title":"11.SSH公私钥验证","date":"2025-05-12T20:53:57.000Z","author":"Navyum","tags":["AES","TLS","非对称加密"],"categories":["网络"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"icon":"bxs:hot","description":"SSH是否真的安全 背景 在配置完git公钥之后，首次使用git从仓库拉取代码时，都会有如下提示： Img 问题： 为什么要验证这个指纹？ 如何验证这个指纹是否正确呢？ SSH通信、代理服务是否真的安全呢？ 公钥是否被篡改 理论基础 按照公、私钥的原理（TLS、SSH都适用）：通信双方在握手时先通过公私钥加密的方式，协商出一个加密算法，然后进行对称加密...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/09.SSH%E5%85%AC%E7%A7%81%E9%92%A5%E9%AA%8C%E8%AF%81.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"11.SSH公私钥验证"}],["meta",{"property":"og:description","content":"SSH是否真的安全 背景 在配置完git公钥之后，首次使用git从仓库拉取代码时，都会有如下提示： Img 问题： 为什么要验证这个指纹？ 如何验证这个指纹是否正确呢？ SSH通信、代理服务是否真的安全呢？ 公钥是否被篡改 理论基础 按照公、私钥的原理（TLS、SSH都适用）：通信双方在握手时先通过公私钥加密的方式，协商出一个加密算法，然后进行对称加密..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/88e816257eb222148ea91dfaa62d89d5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"AES"}],["meta",{"property":"article:tag","content":"TLS"}],["meta",{"property":"article:tag","content":"非对称加密"}],["meta",{"property":"article:published_time","content":"2025-05-12T20:53:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11.SSH公私钥验证\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/88e816257eb222148ea91dfaa62d89d5.png\\"],\\"datePublished\\":\\"2025-05-12T20:53:57.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":3,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":7,"words":2099},"filePathRelative":"计算机网络/09.SSH公私钥验证.md","localizedDate":"2025年5月12日","excerpt":"<h2>SSH是否真的安全</h2>\\n<h3>背景</h3>\\n<ul>\\n<li>\\n<p>在配置完git公钥之后，首次使用git从仓库拉取代码时，都会有如下提示：\\n<img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/88e816257eb222148ea91dfaa62d89d5.png\\" alt=\\"Img\\" loading=\\"lazy\\"></p>\\n</li>\\n<li>\\n<p>问题：</p>\\n<ol>\\n<li>为什么要验证这个指纹？</li>\\n<li>如何验证这个指纹是否正确呢？</li>\\n<li>SSH通信、代理服务是否真的安全呢？</li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}')}}]);