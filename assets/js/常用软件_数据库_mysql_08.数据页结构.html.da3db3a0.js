"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[491],{11208:(t,e,l)=>{l.r(e),l.d(e,{comp:()=>i,data:()=>n});var a=l(6254);const d={},i=(0,l(36995).A)(d,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础：</span></a></h3><ul><li>页是InnoDB管理存储空间的基本单位，一个页的大小一般是<code>16KB</code></li><li>数据页（索引页）是页的一种，用来组织和和存放用户数据</li><li>索引页之间通过双向链表连接，数据页的物理结构不连续</li></ul><h3 id="数据页的详细结构" tabindex="-1"><a class="header-anchor" href="#数据页的详细结构"><span>数据页的详细结构：</span></a></h3><p><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ccac71f2562f6a1e904a67c0a34d51.png" alt="图片" loading="lazy"> 数据页组成：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">中文名</th><th style="text-align:left;">占用空间大小</th><th style="text-align:left;">简单描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>File Header</code></td><td style="text-align:left;">文件头部</td><td style="text-align:left;">38字节</td><td style="text-align:left;">页的一些通用信息</td></tr><tr><td style="text-align:left;"><code>Page Header</code></td><td style="text-align:left;">页面头部</td><td style="text-align:left;">56字节</td><td style="text-align:left;">数据页专有的一些信息</td></tr><tr><td style="text-align:left;"><code>Infimum + Supremum</code></td><td style="text-align:left;">最小记录和最大记录</td><td style="text-align:left;">26字节</td><td style="text-align:left;">两个虚拟的行记录</td></tr><tr><td style="text-align:left;"><code>User Records</code></td><td style="text-align:left;">用户记录</td><td style="text-align:left;">不确定</td><td style="text-align:left;">实际存储的行记录内容</td></tr><tr><td style="text-align:left;">Free Space</td><td style="text-align:left;">空闲空间</td><td style="text-align:left;">不确定</td><td style="text-align:left;">页中尚未使用的用于存放记录的空间</td></tr><tr><td style="text-align:left;"><code>Page Directory</code></td><td style="text-align:left;">页面目录</td><td style="text-align:left;">不确定</td><td style="text-align:left;">页中的某些特殊用户记录的相对位置</td></tr><tr><td style="text-align:left;"><code>File Trailer</code></td><td style="text-align:left;">文件尾部</td><td style="text-align:left;">8字节</td><td style="text-align:left;">校验页是否完整</td></tr></tbody></table><h3 id="file-header-文件头部" tabindex="-1"><a class="header-anchor" href="#file-header-文件头部"><span><code>File Header</code>（文件头部）：</span></a></h3><ul><li><p>文件头组成： |<code>File Header</code> 组成|占用空间大小|描述| |:----|:----|:----| |FIL_PAGE_SPACE_OR_CHKSUM|4字节|页的校验和（checksum值）| |FIL_PAGE_OFFSET|4字节|页号| |FIL_PAGE_PREV|4字节|上一个页的页号，与FIL_PAGE_NEXT构成双向循环列表| |FIL_PAGE_NEXT|4字节|下一个页的页号，与FIL_PAGE_PREV构成双向循环列表| |FIL_PAGE_LSN|8字节|页面被最后修改时对应的日志序列位置（英文名是：Log Sequence Number），用来做数据恢复时判断该页是否已经持久化| |<code>FIL_PAGE_TYPE</code>|2字节|该页的类型| |FIL_PAGE_FILE_FLUSH_LSN|8字节|仅在系统表空间的一个页中定义，代表文件至少被刷新到了对应的LSN值| |FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID|4字节|页属于哪个表空间|</p></li><li><p><code>FIL_PAGE_TYPE</code>（页类型）： |<code>FIL_PAGE_TYPE</code> 类型名称|十六进制|描述| |:----|:----|:----| |FIL_PAGE_TYPE_ALLOCATED|0x0000|最新分配，还没使用| |FIL_PAGE_UNDO_LOG|0x0002|Undo日志页| |FIL_PAGE_INODE|0x0003|段信息节点| |FIL_PAGE_IBUF_FREE_LIST|0x0004|Insert Buffer空闲列表| |FIL_PAGE_IBUF_BITMAP|0x0005|change buffer记录| |FIL_PAGE_TYPE_SYS|0x0006|系统页| |FIL_PAGE_TYPE_TRX_SYS|0x0007|事务系统数据| |FIL_PAGE_TYPE_FSP_HDR|0x0008|表空间头部信息| |FIL_PAGE_TYPE_XDES|0x0009|扩展描述页| |FIL_PAGE_TYPE_BLOB|0x000A|BLOB页，溢出页| |FIL_PAGE_INDEX|0x45BF|索引页，也就是我们所说的数据页|</p></li><li><p>页之间的连接：FIL_PAGE_PREV + FIL_PAGE_NEXT 构成双向循环链表，不是所有类型的页都有这个</p></li><li><p>采用链表的结构是让数据页之间不需要是物理上的连续的，但逻辑上可以保持连续 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4499ff2280bc5433c2808a34a47435b7.png" alt="图片" loading="lazy"></p></li></ul><h3 id="page-header-页面头部" tabindex="-1"><a class="header-anchor" href="#page-header-页面头部"><span><code>Page Header</code>（页面头部）：</span></a></h3><table><thead><tr><th style="text-align:left;"><code>Page Header</code> 组成</th><th style="text-align:left;">空间大小</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">PAGE_N_DIR_SLOTS</td><td style="text-align:left;">2字节</td><td style="text-align:left;">在页目录中的槽数量</td></tr><tr><td style="text-align:left;">PAGE_HEAP_TOP</td><td style="text-align:left;">2字节</td><td style="text-align:left;">还未使用的空间最小地址，也就是说从该地址之后就是Free Space</td></tr><tr><td style="text-align:left;">PAGE_N_HEAP</td><td style="text-align:left;">2字节</td><td style="text-align:left;">本页中的记录的数量（包括最小和最大记录以及标记为删除的记录）</td></tr><tr><td style="text-align:left;">PAGE_FREE</td><td style="text-align:left;">2字节</td><td style="text-align:left;">第一个已经标记为删除的记录地址（各个已删除的记录通过next_record也会组成一个单链表，这个单链表中的记录可以被重新利用）</td></tr><tr><td style="text-align:left;">PAGE_GARBAGE</td><td style="text-align:left;">2字节</td><td style="text-align:left;">已删除记录占用的字节数</td></tr><tr><td style="text-align:left;">PAGE_LAST_INSERT</td><td style="text-align:left;">2字节</td><td style="text-align:left;">最后插入记录的位置</td></tr><tr><td style="text-align:left;">PAGE_DIRECTION</td><td style="text-align:left;">2字节</td><td style="text-align:left;">记录插入的方向</td></tr><tr><td style="text-align:left;">PAGE_N_DIRECTION</td><td style="text-align:left;">2字节</td><td style="text-align:left;">一个方向连续插入的记录数量</td></tr><tr><td style="text-align:left;">PAGE_N_RECS</td><td style="text-align:left;">2字节</td><td style="text-align:left;">该页中记录的数量（不包括最小和最大记录以及被标记为删除的记录）</td></tr><tr><td style="text-align:left;">PAGE_MAX_TRX_ID</td><td style="text-align:left;">8字节</td><td style="text-align:left;">修改当前页的最大事务ID，该值仅在二级索引中定义</td></tr><tr><td style="text-align:left;">PAGE_LEVEL</td><td style="text-align:left;">2字节</td><td style="text-align:left;">当前页在B+树中所处的层级</td></tr><tr><td style="text-align:left;">PAGE_INDEX_ID</td><td style="text-align:left;">8字节</td><td style="text-align:left;">索引ID，表示当前页属于哪个索引</td></tr><tr><td style="text-align:left;">PAGE_BTR_SEG_LEAF</td><td style="text-align:left;">10字节</td><td style="text-align:left;">B+树叶子段的头部信息，仅在B+树的Root页定义</td></tr><tr><td style="text-align:left;">PAGE_BTR_SEG_TOP</td><td style="text-align:left;">10字节</td><td style="text-align:left;">B+树非叶子段的头部信息，仅在B+树的Root页定义</td></tr></tbody></table><h3 id="infimum-supremum" tabindex="-1"><a class="header-anchor" href="#infimum-supremum"><span><code>Infimum + Supremum</code>:</span></a></h3><ul><li>作用：方便遍历</li><li>mysql 自己创建的两条伪记录</li><li>由于这两条记录不是我们自己定义的记录，所以它们并不存放在页的<code>User Records</code>部分，他们被单独放在一个称为Infimum + Supremum的部分</li><li>本页中Infimum记录（也就是最小记录）的下一条记录就是本页中主键值最小的用户记录</li><li>本页中主键值最大的用户记录的下一条记录就是 Supremum记录（也就是最大记录） <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/967bb4d83797d8e3ad995d2057f3ae62.png" alt="Img" loading="lazy"></li></ul><h3 id="user-records" tabindex="-1"><a class="header-anchor" href="#user-records"><span><code>user_records</code>：</span></a></h3><ul><li>作用：存放用户记录</li><li>next_record： <ul><li>记录之间通过next_record（偏移量）连接，按照主键的大小顺序排成一个单向链表（黑色箭头）</li><li>next_record记录的是从<code>当前记录的真实数据处</code>到下一条记录的<code>真实数据的地址</code>偏移量（字节）（不是下一条记录的头部）</li><li><strong>为什么要指向记录头信息和真实数据之间的位置：这个位置刚刚好，向左读取就是记录头信息，向右读取就是真实数据</strong></li><li>本页中Infimum记录（也就是最小记录）的下一条记录就是本页中主键值最小的用户记录</li><li>本页中主键值最大的用户记录的下一条记录就是 Supremum记录（也就是最大记录） <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b1f83f15e0501bdc3559c41d535d4423.png" alt="Img" loading="lazy"></li></ul></li><li>删除和重用空间 <ul><li>删除的记录，会通过next_record将会把这些被删除掉的记录组成一个<code>垃圾链表</code>，以备之后重用</li><li>删除一条记录： <ul><li>记录并没有从存储空间中直接移除</li><li>把该条记录的delete_mask值设置为1</li><li>next_record值变为了0</li><li>修改前一个记录的next_record指向</li><li>最大记录Supremum的n_owned值减1</li></ul></li><li>恢复一条记录： <ul><li>直接复用了原来被删除记录的存储空间</li></ul></li></ul></li></ul><h3 id="page-directory-页目录" tabindex="-1"><a class="header-anchor" href="#page-directory-页目录"><span><code>Page Directory</code>（页目录）:</span></a></h3><ul><li>作用：通过页目录中槽内的值，可以在页内快速找到目标记录所在的分组，然后从对应分组内最小记录遍历即可（这样就不需要遍历页内的所有记录） <ul><li>页目录由槽组成</li><li>页目录的槽存储的是每个分组中最后一条记录的偏移位置</li><li>槽中的数据是顺序排放的 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b8024de34930678a090fa1759d97d548.png" alt="图片" loading="lazy"></li></ul></li><li>页目录的分组规则： <ul><li>最小记录(infimun)独立为1组</li><li>最大记录(supremum)所在的分组拥有 1~8 条记录</li><li>剩下的若干个分组每组可以有 4~8 条记录</li><li>初始时有两个槽，即最小记录的槽，最大记录的槽。插入数据后，会放入最大记录的槽</li><li>当槽内的记录超过8个，该组会发生分裂，变成两个分组，用两个槽来记录</li><li><em><strong>每组记录用一个槽位记录，组内最大记录的user_records起始位置的偏移量（蓝色箭头）</strong></em></li><li>最大记录的n_owned记录当前组内的记录数</li></ul></li><li>在数据页内查找数据的过程： <ol><li>通过<code>二分法</code>确定该记录所在的槽</li><li>找到该槽中主键值最小的那条记录</li><li>通过next_record属性<code>遍历</code>该槽所在的组中的记录找到符合的记录</li></ol></li></ul><h3 id="file-trailer" tabindex="-1"><a class="header-anchor" href="#file-trailer"><span><code>File Trailer</code>:</span></a></h3><ul><li>作用：解决刷盘过程中断电导致的数据不完整</li><li>具体原理： <ul><li>每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为<code>File Header</code>在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在<code>File Header</code>中的校验和就代表着已经修改过的页，而在<code>File Trialer</code>中的校验和代表着原先的页，二者不同则意味着同步中间出了错</li></ul></li></ul>',17)]))}]]),n=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/08.%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.html","title":"08.数据页结构","lang":"zh-CN","frontmatter":{"title":"08.数据页结构","date":"2025-06-17T15:21:11.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","数据页"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"基础： 页是InnoDB管理存储空间的基本单位，一个页的大小一般是16KB 数据页（索引页）是页的一种，用来组织和和存放用户数据 索引页之间通过双向链表连接，数据页的物理结构不连续 数据页的详细结构： 图片 数据页组成： File Header（文件头部）： 文件头组成： |File Header 组成|占用空间大小|描述| |:----|:----|...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/08.%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"08.数据页结构"}],["meta",{"property":"og:description","content":"基础： 页是InnoDB管理存储空间的基本单位，一个页的大小一般是16KB 数据页（索引页）是页的一种，用来组织和和存放用户数据 索引页之间通过双向链表连接，数据页的物理结构不连续 数据页的详细结构： 图片 数据页组成： File Header（文件头部）： 文件头组成： |File Header 组成|占用空间大小|描述| |:----|:----|..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ccac71f2562f6a1e904a67c0a34d51.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"数据页"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:21:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08.数据页结构\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ccac71f2562f6a1e904a67c0a34d51.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4499ff2280bc5433c2808a34a47435b7.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/967bb4d83797d8e3ad995d2057f3ae62.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b1f83f15e0501bdc3559c41d535d4423.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b8024de34930678a090fa1759d97d548.png\\"],\\"datePublished\\":\\"2025-06-17T15:21:11.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":6.58,"words":1975},"filePathRelative":"常用软件/数据库/mysql/08.数据页结构.md","localizedDate":"2025年6月17日","excerpt":"<h3>基础：</h3>\\n<ul>\\n<li>页是InnoDB管理存储空间的基本单位，一个页的大小一般是<code>16KB</code></li>\\n<li>数据页（索引页）是页的一种，用来组织和和存放用户数据</li>\\n<li>索引页之间通过双向链表连接，数据页的物理结构不连续</li>\\n</ul>\\n<h3>数据页的详细结构：</h3>\\n<p><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ccac71f2562f6a1e904a67c0a34d51.png\\" alt=\\"图片\\" loading=\\"lazy\\">\\n数据页组成：</p>","autoDesc":true}')},36995:(t,e)=>{e.A=(t,e)=>{const l=t.__vccOpts||t;for(const[t,a]of e)l[t]=a;return l}}}]);