"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[96136],{36995:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,a]of e)n[t]=a;return n}},37227:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>i,data:()=>o});var a=n(6254);const p={},i=(0,n(36995).A)(p,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)("<p>互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）</p><p>在众多的同步工具中，真正能够保证原子性执行的只有原子操作</p><p>原子操作在进行的过程中是不允许中断的，这个特性由底层CPU提供芯片级别的支持</p><p>原子操作支持的类型：</p><p>数据类型有：</p><p>int32、int64、uint32、uint64、uintptr</p><p>unsafe包中的Pointer以及 Value的类型（它可以被用来存储任意类型的值）</p><p>原子操作支持的方法：</p><p>加法（add）</p><p>比较并交换（compare and swap，简称 CAS）</p><p>加载（load）</p><p>存储（store）</p><p>交换（swap）</p><p>最佳实践：要想用atomic.AddUint32做减法：</p><ol><li>delta ：= int32(-3)delta，uint32(delta)，就可以绕过编译器的检查并得到正确的结果了。但是uint32(int32(-3))不可行</li><li>使用补码：^uint32(-N-1))</li></ol>",15)]))}]]),o=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E6%A0%87%E5%87%86%E5%BA%93/sync/sync/atomic.html","title":"atomic","lang":"zh-CN","frontmatter":{"title":"atomic","author":"navyum","date":"2025-06-21T22:28:38.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity） 在众多的同步工具中，真正能够保证原子性执行的只有原子操作 原子操作在进行的过程中是不允许中断的，这个特性由底层CPU提供芯片级别的支持 原子操作支持的类型： 数据类型有： int32、int64、uint32、uint64、uintptr unsafe包中...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E6%A0%87%E5%87%86%E5%BA%93/sync/sync/atomic.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"atomic"}],["meta",{"property":"og:description","content":"互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity） 在众多的同步工具中，真正能够保证原子性执行的只有原子操作 原子操作在进行的过程中是不允许中断的，这个特性由底层CPU提供芯片级别的支持 原子操作支持的类型： 数据类型有： int32、int64、uint32、uint64、uintptr unsafe包中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:28:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"atomic\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-21T22:28:38.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"编程语言/golang/标准库/sync/sync/atomic.md","localizedDate":"2025年6月21日","excerpt":"<p>互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）</p>\\n<p>在众多的同步工具中，真正能够保证原子性执行的只有原子操作</p>\\n<p>原子操作在进行的过程中是不允许中断的，这个特性由底层CPU提供芯片级别的支持</p>\\n<p>原子操作支持的类型：</p>\\n<p>数据类型有：</p>\\n<p>int32、int64、uint32、uint64、uintptr</p>\\n<p>unsafe包中的Pointer以及 Value的类型（它可以被用来存储任意类型的值）</p>\\n<p>原子操作支持的方法：</p>\\n<p>加法（add）</p>\\n<p>比较并交换（compare and swap，简称 CAS）</p>","autoDesc":true}')}}]);