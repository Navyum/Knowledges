"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[43925],{36995:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,a]of l)i[e]=a;return i}},64742:(e,l,i)=>{i.r(l),i.d(l,{comp:()=>n,data:()=>c});var a=i(6254);const t={},n=(0,i(36995).A)(t,[["render",function(e,l){return(0,a.uX)(),(0,a.CE)("div",null,l[0]||(l[0]=[(0,a.Fv)('<h2 id="多路查找树" tabindex="-1"><a class="header-anchor" href="#多路查找树"><span>多路查找树</span></a></h2><ul><li>2-3树</li><li>2-3-4树</li><li>B树</li><li>B+树</li></ul><h3 id="多叉树" tabindex="-1"><a class="header-anchor" href="#多叉树"><span>多叉树：</span></a></h3><ul><li>树的每个节点可以有超过2个子节点</li><li>举例：2-3树、2-3-4树、B树、B+树</li></ul><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念：</span></a></h3><ul><li><code>阶数(Order)</code>，对于一颗<code>M阶</code>B树，一个节点最多包含M个子节点</li></ul><h3 id="b树-balanced-tree" tabindex="-1"><a class="header-anchor" href="#b树-balanced-tree"><span>B树(<code>Balanced Tree</code>)：</span></a></h3><ul><li>B树是多路平衡查找树的一种特殊类型</li><li>B 是Balance的意思</li><li><code>M阶</code>B树 特点： <ul><li>每个节点最多包含<code>M</code>个子节点。</li><li>根节点至少包含 <code>2</code> 个子节点（或者0个子节点）</li><li>每个非叶节点至少包含 <code>ceil(M/2)</code> 个子节点；</li><li>拥有 k 个子节点的非叶节点将包含 k - 1 条记录</li><li><span style="color:rgb(255, 41, 65);"><code>所有叶节点都在同一层中</code></span></li></ul></li><li>B树的优点： <ul><li>相对平衡二叉树，节点的空间的利用率更高</li><li>对<code>访问局部性原理</code>的利用(预读机制)</li></ul></li><li>B树缺点： <ul><li>查询范围数据时，必须按照树的中顺遍历来访问各个节点 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/96037820ce236cf9f0b130a823eda857.png" width="60%"></li></ul></li></ul><h3 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B+树：</span></a></h3><ul><li>B+树是B树的优化版本，也是多路平衡查找树的一种特殊类型</li><li>特点： <ul><li><span style="color:rgb(255, 41, 65);">只有叶子节点存储真实的数据，非叶节点只存储键</span>（B树每个节点都存数据）</li><li>一条记录可以重复出现，比如在叶子节点和非叶子节点都出现（B树不可以重复出现）</li><li>叶节点之间通过双向链表链接（Mysql中实际非叶子节点也通过双向链表相连接）</li><li>非叶子节点的子节点数=关键字数（Mysql），或者非叶节点的关键字数=子节点数-1</li></ul></li><li>对B树的优化： <ul><li>B+树的层级更少</li><li>B+树查询速度更稳定</li><li>B+树天然具备排序功能</li><li>B+树全节点遍历更快，只需要遍历叶子节点</li></ul></li><li>缺点： <ul><li>为了保持树的平衡，节点的合并、拆分操作比较耗时（Mysql页分裂、页合并）</li></ul></li></ul><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1ce7b18dd3c72026f75499bae4f03c90.png" width="60%"><h3 id="b-树-1" tabindex="-1"><a class="header-anchor" href="#b-树-1"><span>B*树：</span></a></h3><ul><li>B*树是B+树的变体</li><li>特点： <ul><li>在B+树的非根和非叶子结点再增加指向兄弟的指针</li><li><code>B*</code>树定义了非叶子结点元素个数至少为<code>(2/3)*M</code>，即块的最低使用率为2/3；B+树为<code>(1/2)*M</code></li></ul></li><li>主要缓解了B+树的页分裂问题： <ul><li>B*树节点满时会检查兄弟节点是否满（每个节点都有指向兄弟的指针）</li><li>如果兄弟节点未满则向兄弟节点转移关键字</li><li>如果兄弟节点已满，则从当前节点和兄弟节点各拿出1/3的数据创建一个新的节点出来</li></ul></li></ul><h3 id="查找树的演进" tabindex="-1"><a class="header-anchor" href="#查找树的演进"><span>查找树的演进：</span></a></h3><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/5fbadab1e03730a56e5b6dc4057f3540.png" width="60%">',15)]))}]]),c=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/5.%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91.html","title":"5.多路查找树","lang":"zh-CN","frontmatter":{"title":"5.多路查找树","date":"2025-06-17T14:53:30.000Z","author":"Navyum","tags":["多路查找树"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"多路查找树 2-3树 2-3-4树 B树 B+树 多叉树： 树的每个节点可以有超过2个子节点 举例：2-3树、2-3-4树、B树、B+树 概念： 阶数(Order)，对于一颗M阶B树，一个节点最多包含M个子节点 B树(Balanced Tree)： B树是多路平衡查找树的一种特殊类型 B 是Balance的意思 M阶B树 特点： 每个节点最多包含M个子...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/5.%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"5.多路查找树"}],["meta",{"property":"og:description","content":"多路查找树 2-3树 2-3-4树 B树 B+树 多叉树： 树的每个节点可以有超过2个子节点 举例：2-3树、2-3-4树、B树、B+树 概念： 阶数(Order)，对于一颗M阶B树，一个节点最多包含M个子节点 B树(Balanced Tree)： B树是多路平衡查找树的一种特殊类型 B 是Balance的意思 M阶B树 特点： 每个节点最多包含M个子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"多路查找树"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:53:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.多路查找树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:53:30.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"算法数据结构/数据结构/03.树/5.多路查找树.md","localizedDate":"2025年6月17日","excerpt":"<h2>多路查找树</h2>\\n<ul>\\n<li>2-3树</li>\\n<li>2-3-4树</li>\\n<li>B树</li>\\n<li>B+树</li>\\n</ul>\\n<h3>多叉树：</h3>\\n<ul>\\n<li>树的每个节点可以有超过2个子节点</li>\\n<li>举例：2-3树、2-3-4树、B树、B+树</li>\\n</ul>\\n<h3>概念：</h3>\\n<ul>\\n<li><code>阶数(Order)</code>，对于一颗<code>M阶</code>B树，一个节点最多包含M个子节点</li>\\n</ul>\\n<h3>B树(<code>Balanced Tree</code>)：</h3>\\n<ul>\\n<li>B树是多路平衡查找树的一种特殊类型</li>\\n<li>B 是Balance的意思</li>\\n<li><code>M阶</code>B树 特点：\\n<ul>\\n<li>每个节点最多包含<code>M</code>个子节点。</li>\\n<li>根节点至少包含 <code>2</code> 个子节点（或者0个子节点）</li>\\n<li>每个非叶节点至少包含 <code>ceil(M/2)</code> 个子节点；</li>\\n<li>拥有 k 个子节点的非叶节点将包含 k - 1 条记录</li>\\n<li><span style=\\"color: rgb(255, 41, 65);\\"><code>所有叶节点都在同一层中</code></span></li>\\n</ul>\\n</li>\\n<li>B树的优点：\\n<ul>\\n<li>相对平衡二叉树，节点的空间的利用率更高</li>\\n<li>对<code>访问局部性原理</code>的利用(预读机制)</li>\\n</ul>\\n</li>\\n<li>B树缺点：\\n<ul>\\n<li>查询范围数据时，必须按照树的中顺遍历来访问各个节点\\n<img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/96037820ce236cf9f0b130a823eda857.png\\" width=\\"60%\\"></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);