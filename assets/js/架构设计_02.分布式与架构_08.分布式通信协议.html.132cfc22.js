"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[56481],{36995:(t,d)=>{d.A=(t,d)=>{const r=t.__vccOpts||t;for(const[t,e]of d)r[t]=e;return r}},88684:(t,d,r)=>{r.r(d),r.d(d,{comp:()=>a,data:()=>o});var e=r(6254);const n={},a=(0,r(36995).A)(n,[["render",function(t,d){return(0,e.uX)(),(0,e.CE)("div",null,d[0]||(d[0]=[(0,e.Fv)('<h2 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总"><span>汇总：</span></a></h2><table><thead><tr><th>协议名称</th><th>定义</th><th>特性</th><th>应用场景</th><th>常见实现</th></tr></thead><tbody><tr><td>RPC</td><td>允许程序调用远程服务器上的函数或过程，就像调用本地函数一样</td><td>- 透明性<br>- 同步调用</td><td>- 微服务架构中的服务间通信<br>- 分布式系统中的远程函数调用</td><td>- gRPC<br>- Thrift</td></tr><tr><td>REST</td><td>基于HTTP协议的分布式系统通信风格，使用标准的HTTP方法进行操作</td><td>- 资源导向<br>- 无状态</td><td>- Web服务和API<br>- 微服务架构中的服务间通信</td><td>- Spring Boot<br>- Express.js</td></tr><tr><td>WebSockets</td><td>全双工通信协议，允许客户端和服务器之间建立持久连接，实现实时双向通信</td><td>- 全双工通信<br>- 低延迟</td><td>- 实时聊天应用<br>- 实时数据推送（如股票行情、在线游戏）</td><td>- Socket.IO<br>- SignalR</td></tr><tr><td>MQTT</td><td>轻量级的发布/订阅消息传递协议，设计用于低带宽、高延迟或不可靠网络环境</td><td>- 轻量级<br>- 发布/订阅模式</td><td>- 物联网（IoT）设备通信<br>- 移动消息推送</td><td>- Eclipse Mosquitto<br>- HiveMQ</td></tr><tr><td>Gossip</td><td><code>去中心化的通信协议</code>，用于在分布式系统中的各个节点之间传播信息和状态</td><td>- 去中心化<br>- 容错性高<br>- 渐进一致性<br>- 简单和高效</td><td>- 分布式数据库（如Cassandra、Riak）<br>- 分布式文件系统（如Amazon Dynamo）<br>- 分布式协调服务（如Consul）<br>- 分布式监控系统（如Prometheus）</td><td>- Cassandra<br>- Riak<br>- Amazon Dynamo<br>- Consul<br>- Prometheus</td></tr><tr><td>AMQP</td><td>高级消息队列协议，支持消息的发布/订阅、点对点和事务性消息传递</td><td>- 可靠性（支持消息确认、持久化和事务）<br>- 灵活性（支持多种消息传递模式）</td><td>- 企业级消息传递系统<br>- 分布式系统中的消息队列</td><td>- RabbitMQ<br>- Apache Qpid</td></tr></tbody></table>',2)]))}]]),o=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/08.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html","title":"08.分布式通信协议","lang":"zh-CN","frontmatter":{"title":"08.分布式通信协议","date":"2025-06-17T14:40:06.000Z","author":"Navyum","tags":["架构设计","分布式通信"],"categories":["分布式"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"汇总：","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/08.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"08.分布式通信协议"}],["meta",{"property":"og:description","content":"汇总："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"架构设计"}],["meta",{"property":"article:tag","content":"分布式通信"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:40:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08.分布式通信协议\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:40:06.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"架构设计/02.分布式与架构/08.分布式通信协议.md","localizedDate":"2025年6月17日","excerpt":"<h2>汇总：</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>协议名称</th>\\n<th>定义</th>\\n<th>特性</th>\\n<th>应用场景</th>\\n<th>常见实现</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>RPC</td>\\n<td>允许程序调用远程服务器上的函数或过程，就像调用本地函数一样</td>\\n<td>- 透明性<br>- 同步调用</td>\\n<td>- 微服务架构中的服务间通信<br>- 分布式系统中的远程函数调用</td>\\n<td>- gRPC<br>- Thrift</td>\\n</tr>\\n<tr>\\n<td>REST</td>\\n<td>基于HTTP协议的分布式系统通信风格，使用标准的HTTP方法进行操作</td>\\n<td>- 资源导向<br>- 无状态</td>\\n<td>- Web服务和API<br>- 微服务架构中的服务间通信</td>\\n<td>- Spring Boot<br>- Express.js</td>\\n</tr>\\n<tr>\\n<td>WebSockets</td>\\n<td>全双工通信协议，允许客户端和服务器之间建立持久连接，实现实时双向通信</td>\\n<td>- 全双工通信<br>- 低延迟</td>\\n<td>- 实时聊天应用<br>- 实时数据推送（如股票行情、在线游戏）</td>\\n<td>- Socket.IO<br>- SignalR</td>\\n</tr>\\n<tr>\\n<td>MQTT</td>\\n<td>轻量级的发布/订阅消息传递协议，设计用于低带宽、高延迟或不可靠网络环境</td>\\n<td>- 轻量级<br>- 发布/订阅模式</td>\\n<td>- 物联网（IoT）设备通信<br>- 移动消息推送</td>\\n<td>- Eclipse Mosquitto<br>- HiveMQ</td>\\n</tr>\\n<tr>\\n<td>Gossip</td>\\n<td><code>去中心化的通信协议</code>，用于在分布式系统中的各个节点之间传播信息和状态</td>\\n<td>- 去中心化<br>- 容错性高<br>- 渐进一致性<br>- 简单和高效</td>\\n<td>- 分布式数据库（如Cassandra、Riak）<br>- 分布式文件系统（如Amazon Dynamo）<br>- 分布式协调服务（如Consul）<br>- 分布式监控系统（如Prometheus）</td>\\n<td>- Cassandra<br>- Riak<br>- Amazon Dynamo<br>- Consul<br>- Prometheus</td>\\n</tr>\\n<tr>\\n<td>AMQP</td>\\n<td>高级消息队列协议，支持消息的发布/订阅、点对点和事务性消息传递</td>\\n<td>- 可靠性（支持消息确认、持久化和事务）<br>- 灵活性（支持多种消息传递模式）</td>\\n<td>- 企业级消息传递系统<br>- 分布式系统中的消息队列</td>\\n<td>- RabbitMQ<br>- Apache Qpid</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);