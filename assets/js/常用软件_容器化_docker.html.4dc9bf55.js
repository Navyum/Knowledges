"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[38862],{8727:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>t});var l=a(6254);const e={},n=(0,a(36995).A)(e,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,s[0]||(s[0]=[(0,l.Fv)('<ul><li>client-server 架构</li><li><code>docker client</code>使用REST API，通过UDS或者network，与<code>dockerd</code>进行通信 <img src="https://raw.staticdn.net/Navyum/imgbed/main/IMG/a2959a6248c161ea2a84e671c8a5d38d.png" alt="Img" loading="lazy"></li></ul><h2 id="docker-registries" tabindex="-1"><a class="header-anchor" href="#docker-registries"><span>Docker Registries</span></a></h2><ul><li>用来存储Docker Images</li><li>默认使用Docker Hub Registries</li><li>常用的registries： <ul><li><a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a></li><li><a href="https://aws.amazon.com/ecr/" target="_blank" rel="noopener noreferrer">ECR</a></li><li><a href="https://cloud.google.com/artifact-registry" target="_blank" rel="noopener noreferrer">GCR</a></li><li><a href="https://azure.microsoft.com/en-in/products/container-registry" target="_blank" rel="noopener noreferrer">ACR</a></li><li>自建：Harbor, JFrog Artifactory, GitLab Container registry</li></ul></li><li>相关命令：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 从registies查找镜像</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DOCKER_USERNAME/IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 从registries拉镜像到本地</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> YOUR_DOCKER_USERNAME/IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> YOUR_DOCKER_USERNAME/IMAGE_NAME:1.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //将本地镜像重命名</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> YOUR_DOCKER_USERNAME/IMAGE_NAME:1.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将镜像推送到registries</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="docker-objects" tabindex="-1"><a class="header-anchor" href="#docker-objects"><span>Docker Objects</span></a></h2><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span>Images</span></a></h3><ul><li>Docker Images是用来创建docker container的一组只读的指令集</li><li>Dockerfile 里面的每一条指令都会创建一个层Layer</li><li>特性： <ul><li>不可改变（immutable）：image创建后只能通过新建进行修改</li><li>层（layers）：镜像由层构成，每一层代表文件系统的变更</li></ul></li><li>相关命令：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 罗列本地image</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> history</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看image修改记录</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rmi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 删除image</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    SOURCE_IMAGE_NAME[:TAG]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TARGET_IMAGE_NAME[:TAG]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 给指定image重命名并打上TAG</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看image详细信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                       //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看镜像大小，size为实际占用大小，virtual</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> size为虚拟内存占用，有一个算一个</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="image-layers" tabindex="-1"><a class="header-anchor" href="#image-layers"><span>Image layers</span></a></h4><ul><li>Image构建时，对Layer做了缓存处理。由此实现多个Image之间对已经构建的好的Layer的复用。</li><li>如何利用好Layer Cache：编写dockerfile时，要尽可能考虑layer的层级先后关系，提高复用</li></ul><h3 id="containers" tabindex="-1"><a class="header-anchor" href="#containers"><span>Containers</span></a></h3><ul><li>Docker Containers是Docker Images的可运行的实例（类比类和实例）</li><li>容器是运行在主机上的一个进程</li><li>可以将container的状态打包到一个新的Image中</li><li>特性： <ul><li>自给自足（Self-contained）：不依赖于主机，自身拥有一切所需</li><li>隔离性（Isolated）：容器隔离运行，相互之间几乎没有影响</li><li>独立性（Independent）：每个容器可以独立管理，不影响其他容器</li><li>可移植性（Portable）：容器可以在任何地方运行</li></ul></li><li>相关命令：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     --name=app-container</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [COMMAND] [ARG...]   //新建container，并以交互形式运行 COMMAND ARG。-i即--interactive -t即--tty，it一般搭配 sh 使用</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CONTAINER_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [COMMAND] [ARG...]                         //对运行中的container执行命令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> testcentos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;echo &quot;xxx&quot; &gt;&gt; /data/a&#39;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      CONTAINER_ID</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CONTAINER_ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看container详细信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;message&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;CMD node app.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">容器I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">新镜像名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">称&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//将容器ID保存为新镜像，并设置默认CMD为node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app.js。不推荐，推荐使用dockerfile</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 100M</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --oom-kill-disable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ubuntu:22.04</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/bash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 关闭OOM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> killer时，必须要限制内存使用，否则会导致host内存耗尽</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>其他参数flag： <ul><li>--entrypoint 覆盖Dockerfile ENTRYPOINT指令</li><li>--publish / -p 暴露指定ip和端口</li><li>--env / -e 设置容器环境变量</li><li>--user / -u 设置容器内第一个进程的运行用户，默认为root</li><li>--workdir /-w 设置容器内，程序运行的工作目录</li><li>--memory-xx /-m 设置容器内存使用相关参数，用于性能调优</li><li>--cpu-xx /-c 设置容器CPU使用相关参数，用于性能调优</li><li>--gpus 设置容器可使用的GPU</li><li>--restart 设置容器自动重启策略</li></ul></li></ul><h3 id="volumes-bind-mounts-tmpfs" tabindex="-1"><a class="header-anchor" href="#volumes-bind-mounts-tmpfs"><span>Volumes/bind mounts/tmpfs</span></a></h3><ul><li>作用：将容器中的数据持久化，volumes不会随着container销毁而消失</li><li>图解： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/385b08ca5b077a3bf9bced726581755b.png" alt="Img" loading="lazy"></li><li>差异对比： |方式|管理方式中文名|目录位置|数据隔离|使用场景| |:----|:----|:----|:----|:----| |Bind Mount|host管理|自定义磁盘位置，依赖host文件系统|容器和主机共享|需要直接访问主机文件系统时，共享代码、共享主机配置| |Volume|docker管理|/var/lib/docker/volumes/&lt;volume-name&gt;|容器和主机通过Docker存储驱动进行交互|需要数据持久化、多容器间共享数据时、云存储、远程存储，IO要求高，volumes存储在Linux VM中，而不是主机| |tmpfs|docker管理|存储在主机内存中|隔离性好，多容器之间不共享|不想数据被持久化时，存储密钥等敏感信息|</li><li>相关命令：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VOLUME_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //创建卷</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prune</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VOLUME_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 删除卷</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VOLUME_NAME:/path/in/container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 方式挂载</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --mount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type=volume,source=VOLUME_NAME,target=/path/in/container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --mount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type=bind,source=/path/on/host,target=/path/in/container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mount</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --mount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type=tmpfs,target=/path/in/container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IMAGE_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tmpfs</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CONTAINER_ID</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{{ json .Mounts }}&#39;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VOLUME_NAME</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 其中</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以简写为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 其中</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> destination</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或者</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dst</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 代替</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v/--volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --mount的一个区别，前者如果host对应文件夹不存在，会自动创建，后者会报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="storage-driver" tabindex="-1"><a class="header-anchor" href="#storage-driver"><span>Storage Driver</span></a></h4><ul><li>作用：存储本地镜像、Layer和对应cache</li><li>路径：/var/lib/docker/&lt;storage-driver&gt;，此处storage-driver通常为overlay2</li><li>常见的storage driver <ul><li>overlay2、fuse-overlayfs、btrfs/zfs、vfs</li></ul></li></ul><h3 id="networks" tabindex="-1"><a class="header-anchor" href="#networks"><span>Networks</span></a></h3><ul><li>作用：用于容器之间、容器外部的通信（communicate）</li><li>网络驱动比较 |驱动|说明|使用场景| |:----|:----|:----| |bridge|桥接网络，相同主机的同网络容器之间进行通信，不同网络容器进行隔离|默认的网络驱动，生产环境不建议使用默认的bridge，可以用户自己创建bridge网络| |host|直接使用host的网络，host和容器无网络隔离|使用host的namespace、容器不会被分配IP，高性能场景，仅在linux容器下支持| |none|完全和其他容器、主机隔离|无网络通信的场景| |overlay|连接多个docker守护进程|主要用于Swarm services、或者多个doc´ker host的独立容器通信；当然也可以通过管理host的网络实现service通信| |ipvlan|由用户自主控制容器IP|提供对ipv4、ipv6的完全控制| |macvlan|由用户自主控制容器MAC地址|给容器分配MAC地址|</li></ul><table><thead><tr><th style="text-align:left;">桥接模式</th><th style="text-align:left;">默认bridge</th><th style="text-align:left;">用户自定义bridge</th></tr></thead><tbody><tr><td style="text-align:left;">DNS设置</td><td style="text-align:left;">只能通过IP访问</td><td style="text-align:left;">IP 或者 Name</td></tr><tr><td style="text-align:left;">端口开放</td><td style="text-align:left;">容器必须指定开放端口，其他容器才能访问</td><td style="text-align:left;">所有容器的端口默认开放</td></tr><tr><td style="text-align:left;">隔离性</td><td style="text-align:left;">容器在不指定时默认使用bridge，存在风险</td><td style="text-align:left;">需要明确指定对应bridge名称</td></tr><tr><td style="text-align:left;">热插拔</td><td style="text-align:left;">使用默认bridge的容器需要停止才能加入新网络</td><td style="text-align:left;">可以直接加入或者断开对应自定义网络</td></tr><tr><td style="text-align:left;">灵活性</td><td style="text-align:left;">所有容器使用相同的网络配置，例如防火墙等配置修改不方便</td><td style="text-align:left;">可以自定义多个用户网络，配置独立</td></tr><tr><td style="text-align:left;">环境变量共享</td><td style="text-align:left;">使用--link flag共享</td><td style="text-align:left;">可以选择 volume、compose file、swarm services</td></tr></tbody></table><ul><li>相关命令：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bridge</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                    //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 创建my-net网络</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                 //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 删除my-net网络</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> overlay</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --attachable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-overlay</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   //</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --attachable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现非swarm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> service的连接</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --network=my-net</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=container3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  busybox</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 直接使用my-net网络运行容器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                 //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将容器连接到my-net网络</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> disconnect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将容器从my-net网络断开</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NETWORK_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看NETWORK_NAME网络信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>Plugins</span></a></h3><ul><li>用来扩展docker功能</li><li>常用的Plugins分类： <ul><li>Network plugins 方便网络管理</li><li>Volume plugins 实现卷的云存储</li><li>Authorization plugins 权限管理</li><li>Logging plugins 日志管理</li></ul></li><li>常用命令：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> plugin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PLUGIN_NAME</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> plugin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> plugin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enable</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> plugin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令"><span>其他命令：</span></a></h3><h4 id="inspect-信息检查" tabindex="-1"><a class="header-anchor" href="#inspect-信息检查"><span>inspect 信息检查</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos-8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{{ json .MacAddress }}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="stats-容器运行时metrics获取" tabindex="-1"><a class="header-anchor" href="#stats-容器运行时metrics获取"><span>stats 容器运行时metrics获取</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stats</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CONTAINER_NAME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="格式化输出-filter-和-format" tabindex="-1"><a class="header-anchor" href="#格式化输出-filter-和-format"><span>格式化输出 --filter 和 --format</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COMMAND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --filter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;KEY=VALUE&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //过滤结果仅展示key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{{join .Args &quot; , &quot;}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="build-镜像" tabindex="-1"><a class="header-anchor" href="#build-镜像"><span>Build 镜像</span></a></h2><ul><li>client-server架构图： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/83843a52e15b6b08952df8a8999ce5e3.png" alt="Img" loading="lazy"></li></ul><h3 id="传统build-vs-buildx" tabindex="-1"><a class="header-anchor" href="#传统build-vs-buildx"><span>传统build VS buildx</span></a></h3><ul><li>docker build 是 Docker 的标准构建命令</li><li>✅ docker buildx build 是使用<code>docker buildkit</code>进行构建，支持多平台构建、并行构建，是下一代构建工具</li></ul><h3 id="buildx构建过程" tabindex="-1"><a class="header-anchor" href="#buildx构建过程"><span>buildx构建过程：</span></a></h3><ol><li>创建builder：<code>$ docker buildx create --name=BUILDR --driver=DRIVER ... </code><ul><li>driver类型选择：docker、docker-container、kubernetes、remote<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker driver：默认的driver，不需要参数指定</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker buildx build </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> . `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 直接build</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker-container driver：注意末尾的 container，使用container进行构建</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker buildx create </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--name=BUILDR</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --driver=docker-container</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --driver-opt=[key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value,...]</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --use</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> BUILDR `</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># kubernetes driver：使用k8s进行构建</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker buildx create </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--name=BUILDR</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --driver=kubernetes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --driver-opt=[key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value,...]</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># remote driver：使用远程driver进行构建</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker buildx create </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--name=BUILDR</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --driver=remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tcp://localhost:1234 `</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>使用builder构建：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># platform 指定平台架构，.从当前目录找dockerfile</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buildx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --builder=container</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform=linux/amd64,linux/arm64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">registr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">imag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile：</span></a></h3><h4 id="语法相关-syntax" tabindex="-1"><a class="header-anchor" href="#语法相关-syntax"><span>语法相关 syntax</span></a></h4><ul><li>语法解析器指令，必须位于dockerfile第一行</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># syntax=docker/dockerfile:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>转义问题：windos下文件路径反斜杠问题</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># escape=`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="命令-参考" tabindex="-1"><a class="header-anchor" href="#命令-参考"><span>命令：<a href="https://docs.docker.com/reference/dockerfile/" target="_blank" rel="noopener noreferrer">参考</a></span></a></h4><ul><li><p>FROM</p><ul><li>初始化一个新的构建阶段（build stage），并为后续指令提供基础镜像</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;name&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>WORKDIR</p><ul><li>给RUN, CMD, ENTRYPOINT, COPY ,ADD 设置工作目录</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> path</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>WORKDIR可以重复多次，第一次必须要绝对路径</li><li>如果后续的WORKDIR是相对路径，那么它则是相对于上次的WORKDIR的值</li></ul></li></ul></li><li><p>ARG</p><ul><li>定义用户build构建过程中使用的变量，不会被持久化到镜像中。</li><li><code>docker build</code> 时通过 <code>--build-arg &lt;name&gt;=&lt;value&gt;</code> 传入值或者覆盖默认值</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;name&gt;[=&lt;default value&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>变量的作用域</li><li>docker中有大量预置的变量，全局变量</li></ul></li></ul></li><li><p>ENV</p><ul><li>定义镜像内部后续使用时需要的环境变量，会被持久化到镜像中。</li><li><code>docker run</code> 时，通过 <code>--env &lt;key&gt;=&lt;value&gt;</code> 传入值或者覆盖默认值</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;key&gt;=&lt;value&gt; ... # 支持一次定义多个</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>密钥等敏感信息不要通过ENV传入，推荐使用 <code>RUN --mount=type=secret</code></li></ul></li></ul></li><li><p>ADD</p><ul><li>从src拷贝数据到镜像中的dst路径</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] &lt;src&gt; ... &lt;dst&gt;          # 不支持带空格的路径</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;src&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ... </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;dst&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]   # 支持带空格的路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>支持一次拷贝多个src到dst，此时最后一个位置为dst，并且必须是目录（参考cp命令）</li><li>如果dst不存在，会自动创建</li><li>dst如果是文件夹，末尾一定要加&quot;/&quot;</li><li>ADD命令会自动判断src的类型 <ul><li>file/directory：直接完整拷贝到dst</li><li>tar压缩包：解压后拷贝到dst</li><li>url：下载url内容后拷贝到dst</li><li>git仓库：仓库被克隆到dst</li></ul></li></ul></li></ul></li><li><p>COPY</p><ul><li>从src拷贝数据到镜像中的dst路径</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] &lt;src&gt; ... &lt;dst&gt;          # 不支持带空格的路径</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;src&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ... </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;dst&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]   # 支持带空格的路径</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [--from=&lt;image|stage|context&gt;] &lt;src&gt; ... &lt;dest&gt;  # 重要‼️ 从镜像、阶段、上下文拷贝数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>COPY 命令主要用于： <ul><li>build context 用法同ADD</li><li>build stage 构建阶段 <code>COPY --from=build /myapp /usr/bin/</code> //将build阶段生成的/myapp 拷贝到当前阶段</li><li>named context 从自定义上下文拷贝</li><li>image 从镜像拷贝数据</li></ul></li><li>使用COPY --from 时，路径必须是绝对路径</li></ul></li></ul></li><li><p><strong>CMD</strong></p><ul><li>容器启动时，定义默认参数和选项；镜像构建时不会起任何作用</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># shell form：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> command param1 param2</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># exec form：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;executable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># exec form： 作为ENTRYPOINT的默认参数使用，此时必须搭配ENTRYPOINT使用</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>CMD只能有一个；如果有多个，则只有最后一个生效</li><li>推荐用法 exec form形式作为ENTRYPOINT 默认参数</li><li>shell 模式，默认使用shell，存在字符串修改问题，例如转义、空格等</li><li>exec 模式，可以自己定义程序，对字符串参数处理较好，仍需要处理好转义问题</li></ul></li></ul></li><li><p><strong>ENTRYPOINT</strong></p><ul><li>容器启动时，定义启动命令；镜像构建过程中不会起任何作用。（多阶段构建中可以有多个ENTRYPOINT）</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># shell form：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> command param1 param2</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># exec form：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;executable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;param2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>通过docker run --entrypoint 可以覆盖镜像中的ENTRYPOINT</li><li>如果使用shell模式的 ENTRYPOINT <ul><li>则CMD会全部失效，包括run对应的命令行参数；</li><li>并且会先启动shell作为1号进程，然后在shell环境下执行对应命令</li><li>docker stop 不够优雅，docker内的程序并不能基于外部的退出信号优雅退出</li></ul></li></ul></li><li><code>CMD 和 ENTRYPOINT的组合</code>： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/832031b8fb17ede21a4e43cd2b00fdd0.png" alt="Img" loading="lazy"></li></ul></li><li><p><strong>RUN</strong></p><ul><li>通过执行命令，解决镜像构建过程中的依赖</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Shell form:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] &lt;command&gt; ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Exec form:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;command&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ... ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>每一个RUN都会生成镜像的一层Layer</li><li>RUN 的 OPTIONS有三个： <ul><li>--mount build过程中需要访问的挂载点</li><li>--network build过程中需要使用的网络</li><li>--security 稳定版尚未提供</li></ul></li></ul></li></ul></li><li><p>EXPOSE</p><ul><li>定义由该IMAGE生成的CONTAINER，在运行时的监听端口和协议</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注意事项： <ul><li>EXPOSE需要搭配 -p 使用，EXPOSE只定义了容器内部的可用端口，并没有做外部的端口映射并暴露出去。</li></ul></li></ul></li><li><p>VOLUME</p><ul><li>将镜像中的某个目录变成卷</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mkdir /data</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">VOLUME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>USER</p><ul><li>给RUN, CMD, ENTRYPOINT 设置执行者</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;user&gt;[:&lt;group&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>LABEL</p><ul><li>给镜像添加元数据metadata，例如维护者信息、版本号、镜像描述等</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LABEL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;key&gt;=&lt;value&gt;  ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>SHELL</p><ul><li>修改默认shell从/bin/sh 改为指定shell，windows下常用。例如改为powershell和cmd</li><li>一般用于 RUN 指令的shell模式下</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SHELL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;executable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;parameters&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>HEALTHCHECK</p><ul><li>用于检查container运行是否健康，通过在容器内运行CMD 检查命令</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HEALTHCHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] CMD command</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="多阶段构建" tabindex="-1"><a class="header-anchor" href="#多阶段构建"><span>多阶段构建</span></a></h4><ul><li>作用： <ul><li>通过 docker build --target=&lt;stage_name&gt;，用同一个dockerfile，构建某阶段的镜像</li><li>通过 FROM scratch，利用阶段生成的二进制文件，降低最终镜像大小</li><li>buildx通过buildkit构建时，只构建依赖的阶段；传统build会构建所有阶段；</li></ul></li><li>使用： <ul><li>给stage定义别名： FROM &lt;base_image&gt;:&lt;tag&gt; AS &lt;name&gt;</li><li>通过COPY使用外部镜像的文件 COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</li><li>通过COPY使用前面阶段的文件 COPY --from=pre_stage result /src</li><li>构建指定的阶段：docker build -t IMAGE_NAME --target=stage_name . // 从dockerfile构建stage_name对应阶段做为IMAGE_NAME镜像</li></ul></li><li>例子：<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># syntax=docker/dockerfile:1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> golang:1.21-alpine </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> base</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /src</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> go.mod go.sum /src/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> go mod download</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># build client</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> base </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build-client</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> go build -o /bin/client ./cmd/client</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># build server</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> base </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build-server</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> go build -o /bin/server ./cmd/server</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># copy client binary to client image</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scratch </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> client</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=build-client /bin/client /bin/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/client&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># copy server binary to server image</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scratch </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=build-server /bin/server /bin/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>',45)]))}]]),t=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E5%AE%B9%E5%99%A8%E5%8C%96/docker.html","title":"docker","lang":"zh-CN","frontmatter":{"title":"docker","date":"2025-06-17T15:18:52.000Z","author":"Navyum","tags":["Docker"],"categories":["容器技术"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"icon":"simple-icons:docker","description":"client-server 架构 docker client使用REST API，通过UDS或者network，与dockerd进行通信 Img Docker Registries 用来存储Docker Images 默认使用Docker Hub Registries 常用的registries： Docker Hub ECR GCR ACR 自建：H...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E5%AE%B9%E5%99%A8%E5%8C%96/docker.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"docker"}],["meta",{"property":"og:description","content":"client-server 架构 docker client使用REST API，通过UDS或者network，与dockerd进行通信 Img Docker Registries 用来存储Docker Images 默认使用Docker Hub Registries 常用的registries： Docker Hub ECR GCR ACR 自建：H..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/main/IMG/a2959a6248c161ea2a84e671c8a5d38d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T10:51:59.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:18:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T10:51:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/main/IMG/a2959a6248c161ea2a84e671c8a5d38d.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/385b08ca5b077a3bf9bced726581755b.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/83843a52e15b6b08952df8a8999ce5e3.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/832031b8fb17ede21a4e43cd2b00fdd0.png\\"],\\"datePublished\\":\\"2025-06-17T15:18:52.000Z\\",\\"dateModified\\":\\"2025-06-23T10:51:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750675919000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":11.84,"words":3551},"filePathRelative":"常用软件/容器化/docker.md","localizedDate":"2025年6月17日","excerpt":"<ul>\\n<li>client-server 架构</li>\\n<li><code>docker client</code>使用REST API，通过UDS或者network，与<code>dockerd</code>进行通信\\n<img src=\\"https://raw.staticdn.net/Navyum/imgbed/main/IMG/a2959a6248c161ea2a84e671c8a5d38d.png\\" alt=\\"Img\\" loading=\\"lazy\\"></li>\\n</ul>\\n<h2>Docker Registries</h2>\\n<ul>\\n<li>用来存储Docker Images</li>\\n<li>默认使用Docker Hub Registries</li>\\n<li>常用的registries：\\n<ul>\\n<li><a href=\\"https://hub.docker.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Docker Hub</a></li>\\n<li><a href=\\"https://aws.amazon.com/ecr/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ECR</a></li>\\n<li><a href=\\"https://cloud.google.com/artifact-registry\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GCR</a></li>\\n<li><a href=\\"https://azure.microsoft.com/en-in/products/container-registry\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ACR</a></li>\\n<li>自建：Harbor, JFrog Artifactory, GitLab Container registry</li>\\n</ul>\\n</li>\\n<li>相关命令：<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> search</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> IMAGE_NAME</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">  //</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 从registies查找镜像</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> pull</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> DOCKER_USERNAME/IMAGE_NAME</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> //</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 从registries拉镜像到本地</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> tag</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> YOUR_DOCKER_USERNAME/IMAGE_NAME</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> YOUR_DOCKER_USERNAME/IMAGE_NAME:1.0</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> //将本地镜像重命名</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> push</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> YOUR_DOCKER_USERNAME/IMAGE_NAME:1.0</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> //</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 将镜像推送到registries</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}')},36995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,l]of s)a[i]=l;return a}}}]);