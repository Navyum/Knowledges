"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[7733],{36995:(t,e)=>{e.A=(t,e)=>{const d=t.__vccOpts||t;for(const[t,a]of e)d[t]=a;return d}},95120:(t,e,d)=>{d.r(e),d.d(e,{comp:()=>n,data:()=>i});var a=d(6254);const l={},n=(0,d(36995).A)(l,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h2 id="独立表空间" tabindex="-1"><a class="header-anchor" href="#独立表空间"><span>独立表空间：</span></a></h2><ul><li>表空间的是由<code>若干个区</code>组成的</li><li><code>区（extent）</code>： <code>连续的64个页</code>就是一个<code>区extent</code>，默认占用1MB空间大小。 <ul><li><code>为什么要有区</code>：同层的索引页之间以链表组织，物理距离可能会比较远，这样就会引起<code>随机IO</code>。使用区可以保证64个页的连续）</li></ul></li><li><code>段（segment）</code>： <ul><li>定义：某些<code>零散的页</code>以及<code>一些完整的区</code>的集合</li><li>innodb段分类： <ul><li>索引段：存放 B + 树的非叶子节点的区的集合；</li><li>数据段：存放 B + 树的叶子节点的区的集合；</li><li>回滚段：存放的是回滚数据的区的集合</li></ul></li></ul></li><li><code>碎片区(fragment)</code>： <ul><li>背景：以完整的区为单位分配给某个段，对于数据量较小的表太浪费存储空间</li><li>在一个碎片区中的页可以给不同的段分配页</li></ul></li></ul><h2 id="区-extent-示意图" tabindex="-1"><a class="header-anchor" href="#区-extent-示意图"><span>区（extent）示意图：</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f88ce3d405ad9091febc7f1c472309bb.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="fsp-hdr-类型页-特殊的xdes类型页" tabindex="-1"><a class="header-anchor" href="#fsp-hdr-类型页-特殊的xdes类型页"><span>FSP_HDR 类型页（特殊的XDES类型页）：</span></a></h2><p>第一个组的第一个页，当然也是表空间的第一个页，页号为<code>0</code>。这个页的类型是<code>FSP_HDR</code>，它存储了表空间的整体属性以及第一个组内256个区的对应的<code>XDES Entry</code>结构 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37bbfb5686165201ab5ca5bfa9f9da85.png" alt="图片" loading="lazy"></p><h3 id="file-space-header" tabindex="-1"><a class="header-anchor" href="#file-space-header"><span>File Space Header：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c0515d2bbf029c1e1183995fdd28ab95.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><table><thead><tr><th style="text-align:left;">File Space Header结构</th><th style="text-align:left;">空间大小</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Space ID</td><td style="text-align:left;">4字节</td><td style="text-align:left;">表空间的ID</td></tr><tr><td style="text-align:left;">Not Used</td><td style="text-align:left;">4字节</td><td style="text-align:left;">这4个字节未被使用，可以忽略</td></tr><tr><td style="text-align:left;">Size</td><td style="text-align:left;">4字节</td><td style="text-align:left;">当前表空间占有的页数</td></tr><tr><td style="text-align:left;">FREE Limit</td><td style="text-align:left;">4字节</td><td style="text-align:left;">尚未被初始化的最小页号，大于或等于这个页号的区对应的XDES Entry结构都没有被加入FREE链表</td></tr><tr><td style="text-align:left;">Space Flags</td><td style="text-align:left;">4字节</td><td style="text-align:left;">表空间的一些占用存储空间比较小的属性</td></tr><tr><td style="text-align:left;">FRAG_N_USED</td><td style="text-align:left;">4字节</td><td style="text-align:left;">FREE_FRAG链表中已使用的页数量</td></tr><tr><td style="text-align:left;">List Base Node for FREE List</td><td style="text-align:left;">16字节</td><td style="text-align:left;">FREE链表的基节点</td></tr><tr><td style="text-align:left;">List Base Node for FREE_FRAG List</td><td style="text-align:left;">16字节</td><td style="text-align:left;">FREE_FREG链表的基节点</td></tr><tr><td style="text-align:left;">List Base Node for FULL_FRAG List</td><td style="text-align:left;">16字节</td><td style="text-align:left;">FULL_FREG链表的基节点</td></tr><tr><td style="text-align:left;">Next Unused Segment ID</td><td style="text-align:left;">8字节</td><td style="text-align:left;">当前表空间中下一个未使用的 Segment ID</td></tr><tr><td style="text-align:left;">List Base Node for SEG_INODES_FULL List</td><td style="text-align:left;">16字节</td><td style="text-align:left;">SEG_INODES_FULL链表的基节点</td></tr><tr><td style="text-align:left;">List Base Node for SEG_INODES_FREE List</td><td style="text-align:left;">16字节</td><td style="text-align:left;">SEG_INODES_FREE链表的基节点</td></tr></tbody></table><h3 id="记录插入时的区的分配" tabindex="-1"><a class="header-anchor" href="#记录插入时的区的分配"><span>记录插入时的区的分配：</span></a></h3><p>当段中数据较少的时候，首先会查看表空间中是否有状态为<code>FREE_FRAG</code>的区，也就是找还有空闲空间的碎片区；如果找到了，那么从该区中取一些零碎的页把数据插进去；否则到表空间下申请一个状态为<code>FREE</code>的区，也就是空闲的区，把该区的状态变为<code>FREE_FRAG</code>，然后从该新申请的区中取一些零碎的页把数据插进去。之后不同的段使用零碎页的时候都会从该区中取，直到该区中没有空闲空间，然后该区的状态就变成了<code>FULL_FRAG</code> * 把状态为<code>FREE</code>的区对应的<code>XDES Entry</code>结构通过<code>List Node</code>来连接成一个链表，这个链表我们就称之为<code>FREE</code>链表。 * 把状态为<code>FREE_FRAG</code>的区对应的<code>XDES Entry</code>结构通过<code>List Node</code>来连接成一个链表，这个链表我们就称之为<code>FREE_FRAG</code>链表。 * 把状态为<code>FULL_FRAG</code>的区对应的<code>XDES Entry</code>结构通过<code>List Node</code>来连接成一个链表，这个链表我们就称之为<code>FULL_FRAG</code>链表。</p><p>这样每当我们想找一个<code>FREE_FRAG</code>状态的区时，就直接把<code>FREE_FRAG</code>链表的头节点拿出来，从这个节点中取一些零碎的页来插入数据，当这个节点对应的区用完时，就修改一下这个节点的<code>State</code>字段的值，然后从<code>FREE_FRAG</code>链表中移到<code>FULL_FRAG</code>链表中。同理，如果<code>FREE_FRAG</code>链表中一个节点都没有，那么就直接从<code>FREE</code>链表中取一个节点移动到<code>FREE_FRAG</code>链表的状态，并修改该节点的<code>STATE</code>字段值为<code>FREE_FRAG</code>，然后从这个节点对应的区中获取零碎的页就好了</p><h3 id="xdes-entry-用来记录区的属性" tabindex="-1"><a class="header-anchor" href="#xdes-entry-用来记录区的属性"><span>XDES Entry：用来记录区的属性</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f2479364e5d8a7ed82735565efb72ca9.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="ibuf-bitmap-类型页" tabindex="-1"><a class="header-anchor" href="#ibuf-bitmap-类型页"><span>IBUF_BITMAP 类型页：</span></a></h2><p>记录了一些有关<code>Change Buffer</code></p><h2 id="inode-类型页" tabindex="-1"><a class="header-anchor" href="#inode-类型页"><span>INODE 类型页：</span></a></h2><p>每个索引定义了两个段，而且为某些特殊功能定义了些特殊的段。为了方便管理，又为每个段设计了一个<code>INODE Entry</code>结构，这个结构中记录了关于这个段的相关属性 。</p><p>段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念，由若干个零散的页以及一些完整的区组成。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/831c94cf44bf2a6afac07e8079351cca.png" alt="图片" loading="lazy"></p><h3 id="inode-entry-段结构-用来记录段的属性" tabindex="-1"><a class="header-anchor" href="#inode-entry-段结构-用来记录段的属性"><span>INODE Entry（段结构）：用来记录段的属性</span></a></h3><p><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d752dd37914c98c46af67226ea28fbef.png" alt="图片" loading="lazy"> 为<strong>每个段</strong>中的区对应的<code>XDES Entry</code>结构建立了三个链表 ：</p><ul><li><code>FREE</code>链表：同一个段中，所有页都是空闲的区对应的<code>XDES Entry</code>结构会被加入到这个链表。注意和直属于表空间的<code>FREE</code>链表区别开了，此处的<code>FREE</code>链表是附属于某个段的。</li><li><code>NOT_FULL</code>链表：同一个段中，仍有空闲空间的区对应的<code>XDES Entry</code>结构会被加入到这个链表。</li><li><code>FULL</code>链表：同一个段中，已经没有空闲空间的区对应的<code>XDES Entry</code>结构会被加入到这个链表。</li></ul><h2 id="xdes-类型页" tabindex="-1"><a class="header-anchor" href="#xdes-类型页"><span>XDES 类型页：</span></a></h2><p>每个<code>XDES Entry</code>结构对应表空间的一个区。在区的数量非常多时，一个单独的页可能就不够存放足够多的<code>XDES Entry</code>结构，所以我们把表空间的每256个区，分为了若干个组。每组开头的一个页记录着本组内所有的区对应的<code>XDES Entry</code>结构。由于第一个组的第一个页（FSP_HDR ）有些特殊，因为它也是整个表空间的第一个页，所以除了记录本组中的所有区对应的<code>XDES Entry</code>结构以外，还记录着表空间的一些整体属性。整个表空间里只有一个这个类型的页。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/94eee7992de378b138b121ece2576d7a.png" alt="图片" loading="lazy"></p><h2 id="区的状态-state" tabindex="-1"><a class="header-anchor" href="#区的状态-state"><span>区的状态（State）：</span></a></h2><table><thead><tr><th style="text-align:left;">状态名</th><th style="text-align:left;">含义</th><th style="text-align:left;">从属</th></tr></thead><tbody><tr><td style="text-align:left;">FREE</td><td style="text-align:left;">空闲的区</td><td style="text-align:left;">直属于表空间</td></tr><tr><td style="text-align:left;">FREE_FRAG</td><td style="text-align:left;">有剩余空间的碎片区</td><td style="text-align:left;">直属于表空间</td></tr><tr><td style="text-align:left;">FULL_FRAG</td><td style="text-align:left;">没有剩余空间的碎片区</td><td style="text-align:left;">直属于表空间</td></tr><tr><td style="text-align:left;">FSEG</td><td style="text-align:left;">附属于某个段的区</td><td style="text-align:left;">附属于某个段</td></tr></tbody></table><h2 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总"><span>汇总：</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/cd131c68727df1ab80a39b0c25de837b.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>',28)]))}]]),i=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/10.%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.html","title":"10.表空间结构","lang":"zh-CN","frontmatter":{"title":"10.表空间结构","date":"2025-06-17T15:21:28.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","表空间"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"独立表空间： 表空间的是由若干个区组成的 区（extent）： 连续的64个页就是一个区extent，默认占用1MB空间大小。 为什么要有区：同层的索引页之间以链表组织，物理距离可能会比较远，这样就会引起随机IO。使用区可以保证64个页的连续） 段（segment）： 定义：某些零散的页以及一些完整的区的集合 innodb段分类： 索引段：存放 B +...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/10.%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"10.表空间结构"}],["meta",{"property":"og:description","content":"独立表空间： 表空间的是由若干个区组成的 区（extent）： 连续的64个页就是一个区extent，默认占用1MB空间大小。 为什么要有区：同层的索引页之间以链表组织，物理距离可能会比较远，这样就会引起随机IO。使用区可以保证64个页的连续） 段（segment）： 定义：某些零散的页以及一些完整的区的集合 innodb段分类： 索引段：存放 B +..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f88ce3d405ad9091febc7f1c472309bb.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"表空间"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:21:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10.表空间结构\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f88ce3d405ad9091febc7f1c472309bb.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/37bbfb5686165201ab5ca5bfa9f9da85.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c0515d2bbf029c1e1183995fdd28ab95.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f2479364e5d8a7ed82735565efb72ca9.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/831c94cf44bf2a6afac07e8079351cca.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d752dd37914c98c46af67226ea28fbef.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/94eee7992de378b138b121ece2576d7a.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/cd131c68727df1ab80a39b0c25de837b.png\\"],\\"datePublished\\":\\"2025-06-17T15:21:28.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":5.39,"words":1617},"filePathRelative":"常用软件/数据库/mysql/10.表空间结构.md","localizedDate":"2025年6月17日","excerpt":"<h2>独立表空间：</h2>\\n<ul>\\n<li>表空间的是由<code>若干个区</code>组成的</li>\\n<li><code>区（extent）</code>： <code>连续的64个页</code>就是一个<code>区extent</code>，默认占用1MB空间大小。\\n<ul>\\n<li><code>为什么要有区</code>：同层的索引页之间以链表组织，物理距离可能会比较远，这样就会引起<code>随机IO</code>。使用区可以保证64个页的连续）</li>\\n</ul>\\n</li>\\n<li><code>段（segment）</code>：\\n<ul>\\n<li>定义：某些<code>零散的页</code>以及<code>一些完整的区</code>的集合</li>\\n<li>innodb段分类：\\n<ul>\\n<li>索引段：存放 B + 树的非叶子节点的区的集合；</li>\\n<li>数据段：存放 B + 树的叶子节点的区的集合；</li>\\n<li>回滚段：存放的是回滚数据的区的集合</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><code>碎片区(fragment)</code>：\\n<ul>\\n<li>背景：以完整的区为单位分配给某个段，对于数据量较小的表太浪费存储空间</li>\\n<li>在一个碎片区中的页可以给不同的段分配页</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);