"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[50601],{33789:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>m,data:()=>e});var t=n(6254);const l={},m=(0,n(36995).A)(l,[["render",function(s,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析"><span>复杂度分析：</span></a></h2><ul><li><p>渐近复杂度分析（asymptotic complexity analysis），简称复杂度分析。</p></li><li><p>定义：</p><ul><li>复杂度分析能够体现算法运行所需的<code>时间和空间资源</code>与<code>输入数量级之间</code>的关系；</li><li>它描述了随着输入数据量级的增加，算法执行所需时间和空间的<span style="color:rgb(255, 41, 65);">增长趋势</span>。</li></ul></li><li><p>复杂度分析的三个重点：</p><ul><li>时间和空间资源：分别对应时间复杂度、空间复杂度</li><li>随着输入数据大小的增加：意味着复杂度反映算法运行效率与输入数据体量之间的关系</li><li>时间和空间的增长趋势：表示复杂度分析关注的不是运行时间或占用空间的具体值，而是<code>时间或空间增长的“快慢”</code>。</li></ul></li></ul><h3 id="_1-最差复杂度、最佳复杂度、平均复杂度" tabindex="-1"><a class="header-anchor" href="#_1-最差复杂度、最佳复杂度、平均复杂度"><span>1. 最差复杂度、最佳复杂度、平均复杂度</span></a></h3><ul><li>在实际中很少使用最佳时间复杂度，因为通常只有在很小概率下才能达到，可能会带来一定的误导性。</li><li><strong>而最差时间复杂度更为实用，因为它给出了一个效率安全值</strong>，让我们可以放心地使用算法。</li><li><strong>平均时间复杂度可以体现算法在随机输入数据下的运行效率</strong>，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Θ</span></span></span></span> 记号来表示。</li><li>通常使用<span style="color:rgb(255, 41, 65);">最差时间复杂度作为算法效率的评判标准</span></li></ul><h3 id="_2-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-时间复杂度"><span>2. 时间复杂度：</span></a></h3><ul><li>时间复杂度分析统计的不是算法运行时间，而是算法运行时间随着数据量变大时的增长趋势</li></ul><h4 id="实践经验" tabindex="-1"><a class="header-anchor" href="#实践经验"><span>实践经验：</span></a></h4><ol><li>只关注循环执行次数最多的一段代码</li><li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li><li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li></ol><h4 id="常见时间复杂度" tabindex="-1"><a class="header-anchor" href="#常见时间复杂度"><span>常见时间复杂度：</span></a></h4><ul><li>设输入数据大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，常见的时间复杂度类型如下图所示（按照从低到高的顺序排列）</li></ul>',10),(0,t.Lk)("p",{class:"katex-block"},[(0,t.Lk)("span",{class:"katex-display"},[(0,t.Lk)("span",{class:"katex"},[(0,t.Lk)("span",{class:"katex-mathml"},[(0,t.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,t.Lk)("semantics",null,[(0,t.Lk)("mtable",{rowspacing:"0.25em",columnalign:"right",columnspacing:""},[(0,t.Lk)("mtr",null,[(0,t.Lk)("mtd",null,[(0,t.Lk)("mstyle",{scriptlevel:"0",displaystyle:"true"},[(0,t.Lk)("mrow",null,[(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mn",null,"1"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"log"),(0,t.Lk)("mo",null,"⁡"),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mi",null,"log"),(0,t.Lk)("mo",null,"⁡"),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("msup",null,[(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mn",null,"2")]),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("msup",null,[(0,t.Lk)("mn",null,"2"),(0,t.Lk)("mi",null,"n")]),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},"!"),(0,t.Lk)("mo",{stretchy:"false"},")")])])])]),(0,t.Lk)("mtr",null,[(0,t.Lk)("mtd",null,[(0,t.Lk)("mstyle",{scriptlevel:"0",displaystyle:"true"},[(0,t.Lk)("mrow",null,[(0,t.Lk)("mtext",null,"常数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"对数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"线性阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"线性对数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"平方阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"指数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"阶乘阶")])])])])]),(0,t.Lk)("annotation",{encoding:"application/x-tex"},"\\begin{aligned} O(1) < O(\\log n) < O(n) < O(n \\log n) < O(n^2) < O(2^n) < O(n!) \\newline \\text{常数阶} < \\text{对数阶} < \\text{线性阶} < \\text{线性对数阶} < \\text{平方阶} < \\text{指数阶} < \\text{阶乘阶} \\end{aligned} ")])])]),(0,t.Lk)("span",{class:"katex-html","aria-hidden":"true"},[(0,t.Lk)("span",{class:"base"},[(0,t.Lk)("span",{class:"strut",style:{height:"3.0241em","vertical-align":"-1.2621em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mtable"},[(0,t.Lk)("span",{class:"col-align-r"},[(0,t.Lk)("span",{class:"vlist-t vlist-t2"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"1.7621em"}},[(0,t.Lk)("span",{style:{top:"-3.8979em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},"1"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mop"},[(0,t.eW)("lo"),(0,t.Lk)("span",{style:{"margin-right":"0.01389em"}},"g")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),(0,t.Lk)("span",{class:"mop"},[(0,t.eW)("lo"),(0,t.Lk)("span",{style:{"margin-right":"0.01389em"}},"g")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"msupsub"},[(0,t.Lk)("span",{class:"vlist-t"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"0.8641em"}},[(0,t.Lk)("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,t.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,t.Lk)("span",{class:"mord mtight"},"2")])])])])])])]),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord"},"2"),(0,t.Lk)("span",{class:"msupsub"},[(0,t.Lk)("span",{class:"vlist-t"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"0.7144em"}},[(0,t.Lk)("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,t.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,t.Lk)("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},"!)")])]),(0,t.Lk)("span",{style:{top:"-2.3979em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"常数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"对数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"线性阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"线性对数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"平方阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"指数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"阶乘阶")])])])]),(0,t.Lk)("span",{class:"vlist-s"},"​")]),(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"1.2621em"}},[(0,t.Lk)("span")])])])])])])])])])])],-1),(0,t.Fv)('<img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9365a803707a30dd80d43e096bc7ab00.png" width="60%"> * 常数阶 $O(1)$ * 常数阶的操作数量与输入数据大小 $n$ 无关，即不随着 $n$ 的变化而变化。 <ul><li><p>对数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>与指数阶相反，对数阶反映了“每轮缩减到一半”的情况。设输入数据大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，由于每轮缩减到一半，因此循环次数是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\\log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> ，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 的反函数。</li><li>对数阶也常出现于<code>递归函数</code>中。</li><li>对数阶常出现于基于分治策略的算法中，体现了“一分为多”和“化繁为简”的算法思想。它增长缓慢，是仅次于常数阶的理想的时间复杂度。</li></ul></li><li><p>线性阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>线性阶的操作数量相对于输入数据大小 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 以线性级别增长。</li><li>线性阶通常出现在<code>单层循环</code>中。</li><li>遍历数组和遍历链表等操作的时间复杂度均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为数组或链表的长度：</li></ul></li><li><p>线性对数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>线性对数阶常出现于<code>嵌套循环</code>中，两层循环的时间复杂度分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</li><li>主流排序算法的时间复杂度通常为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，例如快速排序、归并排序、堆排序等。</li></ul></li><li><p>平方阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>平方阶的操作数量相对于输入数据大小 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 以平方级别增长。</li><li>平方阶通常出现在<code>嵌套循环</code>中</li><li>例如冒泡排序。外层循环和内层循环的时间复杂度都为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，因此总体的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ：</li></ul></li><li><p>指数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>生物学的“细胞分裂”是指数阶增长的典型例子：初始状态为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个细胞，分裂一轮后变为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 个，分裂两轮后变为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span> 个，以此类推，分裂 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 轮后有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个细胞。</li><li>指数阶常出现于<code>递归函数</code>中。</li><li>指数阶的复杂度一般不可接受，通常需要使用<code>动态规划</code>或<code>贪心算法</code>等来解决。</li></ul></li><li><p>阶乘阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></p><ul><li>阶乘阶对应数学上的“全排列”问题。给定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个互不重复的元素，求其所有可能的排列方案。</li><li>阶乘通常出现在<code>递归实现</code>中</li></ul></li></ul><h3 id="_3-空间复杂度" tabindex="-1"><a class="header-anchor" href="#_3-空间复杂度"><span>3. 空间复杂度：</span></a></h3><ul><li>用于衡量算法<code>占用内存空间</code>随着数据量变大时的<code>增长趋势</code>。</li></ul><h4 id="算法使用空间" tabindex="-1"><a class="header-anchor" href="#算法使用空间"><span>算法使用空间：</span></a></h4><ul><li><p><strong>输入空间</strong>：用于存储算法的输入数据。</p></li><li><p><strong>暂存空间</strong>：用于存储算法在运行过程中的变量、对象、函数上下文等数据。进一步划分：</p><ul><li><strong>暂存数据</strong>：用于保存算法运行过程中的各种常量、变量、对象等。</li><li><strong>栈帧空间</strong>：用于保存调用函数的上下文数据。系统在每次调用函数时都会在栈顶部创建一个栈帧，函数返回后，栈帧空间会被释放。</li><li><strong>指令空间</strong>：用于保存编译后的程序指令，在实际统计中通常忽略不计。</li></ul></li><li><p><strong>输出空间</strong>：用于存储算法的输出数据。</p></li><li><p>空间复杂度分析哪些空间：</p><ul><li><strong>通常统计暂存数据、栈帧空间和输出数据三部分</strong>，只关注<code>最差空间复杂度</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dda290982d71cc7c82ab778149aea81e.png" width="60%"></li><li>在递归函数中，需要注意统计<code>栈帧空间</code></li></ul></li></ul><h4 id="常见空间复杂度" tabindex="-1"><a class="header-anchor" href="#常见空间复杂度"><span>常见空间复杂度：</span></a></h4><ul><li>设输入数据大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，下图展示了常见的空间复杂度类型（从低到高排列）。</li></ul>',9),(0,t.Lk)("p",{class:"katex-block"},[(0,t.Lk)("span",{class:"katex-display"},[(0,t.Lk)("span",{class:"katex"},[(0,t.Lk)("span",{class:"katex-mathml"},[(0,t.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,t.Lk)("semantics",null,[(0,t.Lk)("mtable",{rowspacing:"0.25em",columnalign:"right",columnspacing:""},[(0,t.Lk)("mtr",null,[(0,t.Lk)("mtd",null,[(0,t.Lk)("mstyle",{scriptlevel:"0",displaystyle:"true"},[(0,t.Lk)("mrow",null,[(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mn",null,"1"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"log"),(0,t.Lk)("mo",null,"⁡"),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("msup",null,[(0,t.Lk)("mi",null,"n"),(0,t.Lk)("mn",null,"2")]),(0,t.Lk)("mo",{stretchy:"false"},")"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mi",null,"O"),(0,t.Lk)("mo",{stretchy:"false"},"("),(0,t.Lk)("msup",null,[(0,t.Lk)("mn",null,"2"),(0,t.Lk)("mi",null,"n")]),(0,t.Lk)("mo",{stretchy:"false"},")")])])])]),(0,t.Lk)("mtr",null,[(0,t.Lk)("mtd",null,[(0,t.Lk)("mstyle",{scriptlevel:"0",displaystyle:"true"},[(0,t.Lk)("mrow",null,[(0,t.Lk)("mtext",null,"常数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"对数阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"线性阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"平方阶"),(0,t.Lk)("mo",null,"<"),(0,t.Lk)("mtext",null,"指数阶")])])])])]),(0,t.Lk)("annotation",{encoding:"application/x-tex"},"\\begin{aligned} O(1) < O(\\log n) < O(n) < O(n^2) < O(2^n) \\newline \\text{常数阶} < \\text{对数阶} < \\text{线性阶} < \\text{平方阶} < \\text{指数阶} \\end{aligned} ")])])]),(0,t.Lk)("span",{class:"katex-html","aria-hidden":"true"},[(0,t.Lk)("span",{class:"base"},[(0,t.Lk)("span",{class:"strut",style:{height:"3.0241em","vertical-align":"-1.2621em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mtable"},[(0,t.Lk)("span",{class:"col-align-r"},[(0,t.Lk)("span",{class:"vlist-t vlist-t2"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"1.7621em"}},[(0,t.Lk)("span",{style:{top:"-3.8979em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},"1"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mop"},[(0,t.eW)("lo"),(0,t.Lk)("span",{style:{"margin-right":"0.01389em"}},"g")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord mathnormal"},"n"),(0,t.Lk)("span",{class:"msupsub"},[(0,t.Lk)("span",{class:"vlist-t"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"0.8641em"}},[(0,t.Lk)("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,t.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,t.Lk)("span",{class:"mord mtight"},"2")])])])])])])]),(0,t.Lk)("span",{class:"mclose"},")"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),(0,t.Lk)("span",{class:"mopen"},"("),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord"},"2"),(0,t.Lk)("span",{class:"msupsub"},[(0,t.Lk)("span",{class:"vlist-t"},[(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"0.7144em"}},[(0,t.Lk)("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,t.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,t.Lk)("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),(0,t.Lk)("span",{class:"mclose"},")")])]),(0,t.Lk)("span",{style:{top:"-2.3979em"}},[(0,t.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,t.Lk)("span",{class:"mord"},[(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"常数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"对数阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"线性阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"平方阶")]),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mrel"},"<"),(0,t.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,t.Lk)("span",{class:"mord text"},[(0,t.Lk)("span",{class:"mord cjk_fallback"},"指数阶")])])])]),(0,t.Lk)("span",{class:"vlist-s"},"​")]),(0,t.Lk)("span",{class:"vlist-r"},[(0,t.Lk)("span",{class:"vlist",style:{height:"1.2621em"}},[(0,t.Lk)("span")])])])])])])])])])])],-1),(0,t.Fv)('<img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/bad71d1284a5ebad530c059254b1a319.png" width="60%"><ul><li><p>常数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><ul><li>常数阶常见于数量与输入数据大小 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 无关的常量、变量、对象。</li><li>在循环中初始化变量或调用函数而占用的内存，在进入下一循环后就会被释放，因此不会累积占用空间，空间复杂度仍为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ：</li></ul></li><li><p>线性阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>线性阶常见于元素数量与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 成正比的数组、链表、栈、队列以及递归函数中：</li><li>函数的递归深度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，即同时存在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个未返回的 <code>recur()</code> 函数，使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 大小的栈帧空间：</li></ul></li><li><p>平方阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>平方阶常见于矩阵和图，元素数量与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 成平方关系：</li></ul></li><li><p>指数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>指数阶常见于二叉树。观察下图，层数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的“满二叉树”的节点数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，占用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 空间：</li><li><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b6a6c91ba546b228308f0cafa47e44a0.png" width="60%"></li></ul></li><li><p>对数阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>对数阶常见于分治算法。</li><li>例如归并排序，输入长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的数组，每轮递归将数组从中点处划分为两半，形成高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 的递归树，使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 栈帧空间</li></ul></li></ul><h3 id="_4-权衡时间与空间" tabindex="-1"><a class="header-anchor" href="#_4-权衡时间与空间"><span>4.权衡时间与空间</span></a></h3><ul><li>降低时间复杂度通常需要以提升空间复杂度为代价，反之亦然。</li><li>牺牲内存空间来提升算法运行速度的思路称为“以空间换时间”；反之，则称为“以时间换空间”。</li><li>在大多数情况下，时间比空间更宝贵，因此“以空间换时间”通常是更常用的策略。当然，在数据量很大的情况下，控制空间复杂度也非常重要。</li></ul>',4)]))}]]),e=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/1.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html","title":"复杂度分析","lang":"zh-CN","frontmatter":{"title":"复杂度分析","date":"2025-06-17T14:56:15.000Z","author":"Navyum","tags":["复杂度分析"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"复杂度分析： 渐近复杂度分析（asymptotic complexity analysis），简称复杂度分析。 定义： 复杂度分析能够体现算法运行所需的时间和空间资源与输入数量级之间的关系； 它描述了随着输入数据量级的增加，算法执行所需时间和空间的增长趋势。 复杂度分析的三个重点： 时间和空间资源：分别对应时间复杂度、空间复杂度 随着输入数据大小的增加...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/1.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"复杂度分析"}],["meta",{"property":"og:description","content":"复杂度分析： 渐近复杂度分析（asymptotic complexity analysis），简称复杂度分析。 定义： 复杂度分析能够体现算法运行所需的时间和空间资源与输入数量级之间的关系； 它描述了随着输入数据量级的增加，算法执行所需时间和空间的增长趋势。 复杂度分析的三个重点： 时间和空间资源：分别对应时间复杂度、空间复杂度 随着输入数据大小的增加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"复杂度分析"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:56:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"复杂度分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:56:15.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":6.54,"words":1961},"filePathRelative":"算法数据结构/算法/1.复杂度分析/复杂度分析.md","localizedDate":"2025年6月17日","excerpt":"<h2>复杂度分析：</h2>\\n<ul>\\n<li>\\n<p>渐近复杂度分析（asymptotic complexity analysis），简称复杂度分析。</p>\\n</li>\\n<li>\\n<p>定义：</p>\\n<ul>\\n<li>复杂度分析能够体现算法运行所需的<code>时间和空间资源</code>与<code>输入数量级之间</code>的关系；</li>\\n<li>它描述了随着输入数据量级的增加，算法执行所需时间和空间的<span style=\\"color: rgb(255, 41, 65);\\">增长趋势</span>。</li>\\n</ul>\\n</li>\\n<li>\\n<p>复杂度分析的三个重点：</p>\\n<ul>\\n<li>时间和空间资源：分别对应时间复杂度、空间复杂度</li>\\n<li>随着输入数据大小的增加：意味着复杂度反映算法运行效率与输入数据体量之间的关系</li>\\n<li>时间和空间的增长趋势：表示复杂度分析关注的不是运行时间或占用空间的具体值，而是<code>时间或空间增长的“快慢”</code>。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},36995:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,t]of a)n[s]=t;return n}}}]);