"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[23505],{36478:(n,e,i)=>{i.r(e),i.d(e,{comp:()=>l,data:()=>t});var a=i(6254);const s={},l=(0,i(36995).A)(s,[["render",function(n,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<ol><li><p>相似点： <code>类型转换</code>、<code>类型断言</code>本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。</p></li><li><p>类型转换：</p><ol><li>转换前后的两个类型要相互兼容才行，高精度转低精度会出现数据精度异常等问题</li><li>语法：&lt;结果类型&gt; := &lt;目标类型&gt; ( &lt;表达式&gt; )</li><li>举例：</li></ol></li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>\tvar i int = 9</span></span>\n<span class="line"><span>\tvar f float64</span></span>\n<span class="line"><span>\tf = float64(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>断言： <ol><li>go中所有接口都实现了空接口<code>interface{}</code> 即 Any类型</li><li>场景：当一个函数的形参是 <code>interface{}</code>，那么在函数中，需要对形参进行断言，从而得到它的真实类型</li><li>语法： <ol><li>&lt;目标类型的值&gt;，&lt;布尔参数&gt; := &lt;表达式&gt;.( 目标类型 ) // 安全类型断言</li><li>&lt;目标类型的值&gt; := &lt;表达式&gt;.( 目标类型 ) // 非安全类型断言</li></ol></li><li>举例：</li></ol></li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var i interface{} = new(Student)</span></span>\n<span class="line"><span>s, ok := i.(Student)</span></span>\n<span class="line"><span>if ok {</span></span>\n<span class="line"><span>  fmt.Println(s)</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func judge(v interface{}) {</span></span>\n<span class="line"><span>\tswitch v := v.(type) {</span></span>\n<span class="line"><span>\tcase nil:</span></span>\n<span class="line"><span>      ...</span></span>\n<span class="line"><span>    case Student:</span></span>\n<span class="line"><span>      ...</span></span>\n<span class="line"><span>    case *Student:</span></span>\n<span class="line"><span>      ..</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)]))}]]),t=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%96%AD%E8%A8%80.html","title":"类型转换和断言","lang":"zh-CN","frontmatter":{"title":"类型转换和断言","author":"navyum","date":"2025-06-21T22:27:03.000Z","article":false,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"相似点： 类型转换、类型断言本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。 类型转换： 转换前后的两个类型要相互兼容才行，高精度转低精度会出现数据精度异常等问题 语法：<结果类型> := <目标类型> ( <表达式> ) 举例： 断言： go中所有接口都实现了空接口interface{} 即 Any类型 场景：当一...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%96%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"类型转换和断言"}],["meta",{"property":"og:description","content":"相似点： 类型转换、类型断言本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。 类型转换： 转换前后的两个类型要相互兼容才行，高精度转低精度会出现数据精度异常等问题 语法：<结果类型> := <目标类型> ( <表达式> ) 举例： 断言： go中所有接口都实现了空接口interface{} 即 Any类型 场景：当一..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:27:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"类型转换和断言\\",\\"description\\":\\"相似点： 类型转换、类型断言本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。 类型转换： 转换前后的两个类型要相互兼容才行，高精度转低精度会出现数据精度异常等问题 语法：<结果类型> := <目标类型> ( <表达式> ) 举例： 断言： go中所有接口都实现了空接口interface{} 即 Any类型 场景：当一...\\"}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1,"words":299},"filePathRelative":"编程语言/golang/类型转换和断言.md","localizedDate":"2025年6月21日","excerpt":"<ol>\\n<li>\\n<p>相似点：\\n<code>类型转换</code>、<code>类型断言</code>本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。</p>\\n</li>\\n<li>\\n<p>类型转换：</p>\\n<ol>\\n<li>转换前后的两个类型要相互兼容才行，高精度转低精度会出现数据精度异常等问题</li>\\n<li>语法：&lt;结果类型&gt; := &lt;目标类型&gt; ( &lt;表达式&gt; )</li>\\n<li>举例：</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\"language-plain line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"plain\\" data-title=\\"plain\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>\\tvar i int = 9</span></span>\\n<span class=\\"line\\"><span>\\tvar f float64</span></span>\\n<span class=\\"line\\"><span>\\tf = float64(i)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},36995:(n,e)=>{e.A=(n,e)=>{const i=n.__vccOpts||n;for(const[n,a]of e)i[n]=a;return i}}}]);