"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[12063],{18200:(e,l,i)=>{i.r(l),i.d(l,{comp:()=>d,data:()=>c});var a=i(6254);const t={},d=(0,i(36995).A)(t,[["render",function(e,l){return(0,a.uX)(),(0,a.CE)("div",null,l[0]||(l[0]=[(0,a.Fv)('<h2 id="哨兵-观察者" tabindex="-1"><a class="header-anchor" href="#哨兵-观察者"><span>哨兵（观察者）</span></a></h2><h3 id="哨兵特征" tabindex="-1"><a class="header-anchor" href="#哨兵特征"><span>哨兵特征：</span></a></h3><ul><li>哨兵是一个运行在特殊模式下的 Redis 进程</li><li>每个哨兵都需要和所有的主、从库建立连接</li><li>哨兵相当于&quot;观察者节点&quot;，观察的对象是主、从节点</li><li>哨兵之间互相发现： <ul><li><code>主库的发布/订阅 机制</code>：通过主库的<code>__sentinel__:hello</code></li><li>哨兵在主库发布自己的信息、订阅其他哨兵信息</li></ul></li><li>哨兵如何发现从库： <ul><li>哨兵会每<code>10秒一次的频率</code>向主库发送<code>INFO</code>命令，获取从库列表</li></ul></li><li>哨兵如何通知客户端： <ul><li>每个哨兵对外提供<code>发布/订阅机制</code></li><li>客户端从哨兵订阅消息，关注主、从故障转移中的关键事件</li></ul></li></ul><h3 id="哨兵机制作用" tabindex="-1"><a class="header-anchor" href="#哨兵机制作用"><span>哨兵机制作用：</span></a></h3><ul><li>主库挂了之后，实现主从库<code>自动切换</code>（<code>故障转移</code>）</li><li>主从模式是读写分离的，主节点挂了，没有主节点来服务客户端的写操作请求</li></ul><h2 id="哨兵如何工作" tabindex="-1"><a class="header-anchor" href="#哨兵如何工作"><span>哨兵如何工作：</span></a></h2><h4 id="哨兵的主要职责" tabindex="-1"><a class="header-anchor" href="#哨兵的主要职责"><span>哨兵的主要职责：</span></a></h4><ul><li>监控</li><li>选主</li><li>通知 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/3c68cf3a79e2a87c85df1da33dbae137.png" width="60%"></li></ul><h4 id="监控" tabindex="-1"><a class="header-anchor" href="#监控"><span>监控：</span></a></h4><ul><li>通信机制： <ul><li>通过发送PING命令给主、从节点，进行心跳检测</li></ul></li><li><code>故障判断</code>： <ul><li><code>主观下线</code>： <ul><li><code>主节点或者从节点</code>没有在规定的时间内响应哨兵的PING命令</li></ul></li><li><code>客观下线</code>：（投票、可信网络） <ul><li>发起者： <ul><li>当一个哨兵判断主节点为<code>主观下线</code>后，向其他哨兵发起投票</li></ul></li><li>参与者： <ul><li>其他哨兵根据自己和主节点的网络状况，做出【赞成/拒绝】投票</li></ul></li><li><code>客观下线条件</code>： <ul><li>发起者获得的赞同票数 &gt;= <code>quorum</code>值，主节点会被该哨兵标记为<code>客观下线</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d348f7a50bf7283ec95282087db3e6af.png" width="60%"></li></ul></li></ul></li></ul></li></ul><h4 id="选取哨兵leader" tabindex="-1"><a class="header-anchor" href="#选取哨兵leader"><span>选取哨兵leader：</span></a></h4><ul><li>目的：选择哨兵集群中的节点进行<code>主从故障转移</code>（主、从切换指挥）</li><li>候选者： <ul><li>判断主节点<code>客观下线</code>的那个哨兵节点（候选者就是想当Leader的哨兵）</li></ul></li><li>发起投票： <ul><li><code>候选者</code>向其他哨兵发起投票，表明自己希望成为Leader来执行主从切换</li></ul></li><li><code>竞选成功条件</code>： <ol><li>获得 1/2以上的赞成票</li><li>获得的票数 &gt; quorum值</li></ol></li></ul><h4 id="quorum-建议" tabindex="-1"><a class="header-anchor" href="#quorum-建议"><span>quorum 建议：</span></a></h4><ul><li>quorum 的值建议设置： (哨兵个数/2) + 1</li></ul><h3 id="故障转移全过程" tabindex="-1"><a class="header-anchor" href="#故障转移全过程"><span><code>故障转移</code>全过程：</span></a></h3><ul><li>故障转移过程由<code>哨兵leader</code>负责，主要工作： <ul><li>通过规则选出主库</li><li>通知从库的主库变更</li><li>通知客户端主库变更</li><li>修改重新上线的旧主库为从库</li></ul></li></ul><h4 id="_1-选主" tabindex="-1"><a class="header-anchor" href="#_1-选主"><span>1. 选主：</span></a></h4><ul><li>选主规则：<code>过滤+打分</code><ol><li><code>过滤</code>： <ul><li>过滤已下线的主库、网络差的从库</li></ul></li><li><code>打分</code>优先级： <ol><li>从库的优先级，越小越靠前（<code>slave-priority配置项</code>）</li><li>从库复制进度，越小越靠前（<code>slave_repl_offset</code>和 <code>master_repl_offset</code>的差值）</li><li>从库ID号，越小越靠前（<code>runID</code>） <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/ce8d4ab27b39f1a928abadc87acf6e93.png" width="60%"></li></ol></li></ol></li></ul><h4 id="_2-修改从库的主库ip信息" tabindex="-1"><a class="header-anchor" href="#_2-修改从库的主库ip信息"><span>2. 修改从库的主库IP信息：</span></a></h4><ul><li><code>哨兵leader</code>通过向所有<code>从库</code>发送<code>SLAVEOF</code>命令实现从库更换主库IP</li><li>获取集群内所有从库信息（IP）： <ul><li>哨兵向主库发送<code>INFO</code>命令（主库未故障前获取）</li><li>主库返回<code>从库列表</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/48e898daa482c4c2344a113fc5ceeee3.png" width="60%"></li></ul></li></ul><h4 id="_3-通知客户端主库变更" tabindex="-1"><a class="header-anchor" href="#_3-通知客户端主库变更"><span>3. 通知客户端主库变更：</span></a></h4><ul><li><code>哨兵集群</code>将新主库的信息（IP等）通知给客户端</li><li>哨兵和客户端通信：<code>发布/订阅机制</code>： <ul><li>每个<code>哨兵节点</code>提供<code>发布者/订阅者机制</code>，客户端可以从哨兵订阅消息，关注主、从故障转移中的关键事件 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9dd8582a2a13ab80f9e61b0a57c0dfab.png" width="60%"></li></ul></li></ul><h4 id="_4-修改重新上线的旧主库为从库" tabindex="-1"><a class="header-anchor" href="#_4-修改重新上线的旧主库为从库"><span>4. 修改重新上线的旧主库为从库</span></a></h4><ul><li>故障转移操作最后要做的是，继续监视旧主节点</li><li>当旧主节点重新上线时，哨兵集群就会向它发送 <code>SLAVEOF</code>命令，让它成为新主库的从库</li></ul>',24)]))}]]),c=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/09.%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6-Sentinel.html","title":"09.哨兵机制-Sentinel","lang":"zh-CN","frontmatter":{"title":"09.哨兵机制-Sentinel","date":"2025-06-17T15:38:36.000Z","author":"Navyum","icon":"devicon-plain:redis","tags":["Redis","哨兵机制","Sentinel"],"categories":["Redis"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"哨兵（观察者） 哨兵特征： 哨兵是一个运行在特殊模式下的 Redis 进程 每个哨兵都需要和所有的主、从库建立连接 哨兵相当于\\"观察者节点\\"，观察的对象是主、从节点 哨兵之间互相发现： 主库的发布/订阅 机制：通过主库的__sentinel__:hello 哨兵在主库发布自己的信息、订阅其他哨兵信息 哨兵如何发现从库： 哨兵会每10秒一次的频率向主库发...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/09.%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6-Sentinel.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"09.哨兵机制-Sentinel"}],["meta",{"property":"og:description","content":"哨兵（观察者） 哨兵特征： 哨兵是一个运行在特殊模式下的 Redis 进程 每个哨兵都需要和所有的主、从库建立连接 哨兵相当于\\"观察者节点\\"，观察的对象是主、从节点 哨兵之间互相发现： 主库的发布/订阅 机制：通过主库的__sentinel__:hello 哨兵在主库发布自己的信息、订阅其他哨兵信息 哨兵如何发现从库： 哨兵会每10秒一次的频率向主库发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"哨兵机制"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:38:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09.哨兵机制-Sentinel\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T15:38:36.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"常用软件/数据库/redis/09.哨兵机制-Sentinel.md","localizedDate":"2025年6月17日","excerpt":"<h2>哨兵（观察者）</h2>\\n<h3>哨兵特征：</h3>\\n<ul>\\n<li>哨兵是一个运行在特殊模式下的 Redis 进程</li>\\n<li>每个哨兵都需要和所有的主、从库建立连接</li>\\n<li>哨兵相当于\\"观察者节点\\"，观察的对象是主、从节点</li>\\n<li>哨兵之间互相发现：\\n<ul>\\n<li><code>主库的发布/订阅 机制</code>：通过主库的<code>__sentinel__:hello</code></li>\\n<li>哨兵在主库发布自己的信息、订阅其他哨兵信息</li>\\n</ul>\\n</li>\\n<li>哨兵如何发现从库：\\n<ul>\\n<li>哨兵会每<code>10秒一次的频率</code>向主库发送<code>INFO</code>命令，获取从库列表</li>\\n</ul>\\n</li>\\n<li>哨兵如何通知客户端：\\n<ul>\\n<li>每个哨兵对外提供<code>发布/订阅机制</code></li>\\n<li>客户端从哨兵订阅消息，关注主、从故障转移中的关键事件</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},36995:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,a]of l)i[e]=a;return i}}}]);