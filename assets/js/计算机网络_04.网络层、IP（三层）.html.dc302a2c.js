"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[24959],{9134:(i,e,l)=>{l.r(e),l.d(e,{comp:()=>t,data:()=>d});var a=l(6254);const c={},t=(0,l(36995).A)(c,[["render",function(i,e){const l=(0,a.g2)("font");return(0,a.uX)(),(0,a.CE)("div",null,[e[4]||(e[4]=(0,a.Fv)('<h2 id="网络层又叫ip层" tabindex="-1"><a class="header-anchor" href="#网络层又叫ip层"><span>网络层又叫IP层：</span></a></h2><h3 id="主要的解决问题" tabindex="-1"><a class="header-anchor" href="#主要的解决问题"><span>主要的解决问题：</span></a></h3><ol><li>数据包的转发，<code>IP to IP</code></li><li>路由选择</li><li>IP地址的分配</li><li>分片和重组</li></ol><h2 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址"><span>IP地址：</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8fe2a027b29b28f86cae3a200c3219c6.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h3 id="cidr-classless-inter-domain-routing" tabindex="-1"><a class="header-anchor" href="#cidr-classless-inter-domain-routing"><span><code>CIDR</code>（Classless Inter-Domain Routing）：</span></a></h3><ul><li>CIDR是一种更灵活的网络划分方法，它将IP地址和子网掩码写在一起。将IP 地址被划分为两部分：<code>网络号</code> + <code>主机号</code></li><li>CIDR 表示形式 a.b.c.d/x <ul><li>其中 /x 表示前 x 位属于网络号，x 属于[0, 32] e.g. 10.100.122.2/24, 表示前24位是网络号，后8位是主机号，子网掩码为/24</li></ul></li></ul><h3 id="子网掩码" tabindex="-1"><a class="header-anchor" href="#子网掩码"><span>子网掩码：</span></a></h3><ul><li>掩码的意思就是掩盖掉主机号，剩余的就是网络号</li><li>将子网掩码和IP地址<code>按位计算AND</code>，就可得到网络号</li><li>CIDR中 /24，即子网掩码255.255.255.0 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/064c4c0b7df41727895315f4cbde0ee5.png" alt="Img" loading="lazy"></li><li>作用：路由器通过计算目标地址网络号，与路由表比较</li></ul><h2 id="ip层协议" tabindex="-1"><a class="header-anchor" href="#ip层协议"><span>IP层协议：</span></a></h2><h3 id="协议解析" tabindex="-1"><a class="header-anchor" href="#协议解析"><span>协议解析：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ed5c7c7562001e341a9e2a3d11fe11.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure>',13)),(0,a.Lk)("ul",null,[e[2]||(e[2]=(0,a.Fv)("<li><code>版本</code>：IPv4、IPv6</li><li>服务类型（ToS）：包的优先级</li><li><code>标识</code>：当分片发生时，用于分片重组</li><li><code>标志（Flags）</code>： <ul><li>第二个bit位：<code>DF</code>，为1表示路由器不能对该上层数据包分段。(如果不分段无法转发，则路由器会丢弃该上层数据包并返回一个错误信息)</li><li>第三个bit位：<code>MF</code>，DF为1时有效，对上层数据包做分段时，最后一个值为0，其他为1</li><li>经验：<code>一般UDP由IP层分片，TCP自己根据MSS自行分段，不需要IP层分片</code></li></ul></li>",4)),(0,a.Lk)("li",null,[e[1]||(e[1]=(0,a.eW)("片偏移：当IP层做了分片后，接收端根据该字段将IP分片重组，")),(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>e[0]||(e[0]=[(0,a.eW)("但分片数据可能丢失，导致无法重组`")]))),_:1})]),e[3]||(e[3]=(0,a.Fv)("<li><code>生命周期</code>（TTL）： <ul><li>每一跳减1，为0时丢弃</li></ul></li><li><code>协议</code>： <ul><li>1 ICMP</li><li>2 IGMP</li><li>6 TCP</li><li>17 UDP</li><li>88 IGRP</li><li>89 OSPF</li></ul></li>",2))]),e[5]||(e[5]=(0,a.Fv)('<h4 id="mtu-第三层中的概念" tabindex="-1"><a class="header-anchor" href="#mtu-第三层中的概念"><span>MTU（第三层中的概念）：</span></a></h4><ul><li>含义：Maximum Transmission Unit，<code>最大传输单元</code>，定义了这些数据包在<code>网络层</code>传输的最大大小</li><li>标准MTU值为<code>576</code>（因特网），最大值为<code>1500</code>（以太网）</li><li>超过 MTU 大小、且设置了DF时，会发生数据分片，</li></ul><h3 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议"><span>TCP 协议：</span></a></h3><ul><li>见传输层</li></ul><h3 id="udp-协议" tabindex="-1"><a class="header-anchor" href="#udp-协议"><span>UDP 协议：</span></a></h3><ul><li>见传输层</li></ul><h3 id="icmp-协议" tabindex="-1"><a class="header-anchor" href="#icmp-协议"><span>ICMP 协议：</span></a></h3><ul><li><p>即 Internet Control Message Protocol，互联网控制报文协议 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f0bf192a1cf0f08545024033e15b4ed5.png" alt="Img" loading="lazy"></p></li><li><p>查询报文类型：</p><ul><li>8：主动查询</li><li>0：主动查询回显</li></ul></li><li><p>差错报文类型：</p><ul><li>3：终点不可达（地址不可达）</li><li>4：源抑制（让源站放慢发送速度）</li><li>5：重定向（让下次发给另一个路由器）</li><li>11：超时（也就是超过网络包的生存时间还是没到）</li></ul></li><li><p>具体应用：</p><ul><li><p><code>ping</code>：主动发送查询报文，获得查询回显报文</p></li><li><p><code>traceroute</code>：发送udp数据包，做网络探测：</p><ol><li>探测沿途的路由（超时类型）： <ul><li>使用特殊的TTL，将TTL逐个累增，逐个获取链路上的路由器 IP</li></ul></li><li>探测目的主机（不可达类型）： <ul><li>使用不可能UDP端口号，收到端口不可达回应，则表示成功到达目的主机</li></ul></li><li>确定整条路径的MTU（分片错误类型）： <ul><li>故意设置为不分片，每次收到该差错报文，则调小MTU，直到到达目的主机</li></ul></li></ol></li></ul></li></ul><h2 id="三层设备-网关-gateway-设备" tabindex="-1"><a class="header-anchor" href="#三层设备-网关-gateway-设备"><span>三层设备：网关（gateway）设备</span></a></h2><ul><li><p>网关设备作用：负责不同网络之间的通信，<code>三层转发的设备</code></p></li><li><p>主机访问另一个IP的过程：</p><ol><li>判断是否同一个网段，基于<code>CIDR</code>和<code>子网掩码</code>，计算出目标IP网络号，和自己网络号做对比</li><li>如果同网段： <ul><li>先封装目标IP头，再基于MAC地址表或者根据ARP协议获取<code>目标IP的MAC地址</code>封装MAC头，直接发送到目标机器</li></ul></li><li>非同网段： <ul><li>先封装目标IP头，基于MAC地址表或者ARP协议<code>获取网关MAC地址</code>，再<code>封装网关MAC</code>，<code>将数据先发给网关</code></li><li>网关收到包后，解开MAC头发现是自己的，再解开IP头，发现不是自己的，继续通过路由表找到下一个网关的IP地址。</li><li>转发规则见下面</li></ul></li><li>例子： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/67659587bddd1e9ac2b7d1944be17516.png" alt="Img" loading="lazy"><ol><li>主机 A 发送 源地址是 <code>10.1.1.30</code> 和目标地址是 <code>10.1.2.10</code>的IP包。由于没有在主机 A 的路由表找到与目标地址 <code>10.1.2.10</code> 的网络地址，于是包被转发到默认路由（路由器 <code>1</code> ）</li><li>路由器 <code>1</code> 收到 IP 包后，尝试在自己的路由表匹配与目标地址相同的网络号，发现匹配到了，于是就把 IP 数据包转发到下一跳地址<code>10.1.0.2</code>这台路由器 <code>2</code></li><li>路由器 <code>2</code> 收到IP包，对比自身的路由表，发现匹配到，将IP包转发到下一跳<code>10.1.2.1</code>，最终通过交换机（通过ARP协议）把 IP 数据包转发到了目标主机</li><li>如果主机/路由器中没有匹配到目标IP的网络号，则会转给默认路由/网关</li></ol></li></ol></li></ul><h3 id="网关转发-路由转发" tabindex="-1"><a class="header-anchor" href="#网关转发-路由转发"><span>网关转发/路由转发：</span></a></h3><ul><li>基于路由表：多条规则的集合</li><li>路由（转发）的三要素： <ul><li><code>目的网络</code>：这个包想去哪儿</li><li><code>出口设备</code>：将包从哪个口扔出去</li><li><code>下一跳网关</code>：下一个路由器（网关）的地址</li></ul></li></ul><h4 id="路由表分类" tabindex="-1"><a class="header-anchor" href="#路由表分类"><span>路由表分类：</span></a></h4><ul><li>静态路由： <ul><li>在网关上，配置一条一条规则，基于规则判断下一跳是哪里</li></ul></li><li>动态路由： <ul><li><code>动态路由器</code>根据<code>路由协议算法</code>生成<code>动态路由表</code>：</li><li><code>路由协议算法</code>（计算路由的方式）： <ul><li><code>距离矢量路由算法</code>（基于 Bellman-Ford 算法） <ul><li>具体实现：每个路由器都保存一个全局路由表</li><li>问题： <ul><li>同步成本高：更新时需要发送整个路由表信息</li><li>更新不及时：路由器故障，只能被动发现</li></ul></li></ul></li><li><code>链路状态路由算法</code>（基于 Dijkstra 算法） <ul><li>具体实现：当自己链路状态发生变化，将自己和邻居之间的链路状态包广播给其他路由器，每个路由器在自己本地构建一个完整的图，然后针对这个图使用 Dijkstra 算法，找到两点之间的最短路径。</li><li>优点： <ul><li>同步成本低：只广播改变的链路状态，广播量小</li><li>更新及时：任意路由出现故障，会引起相邻路由的多个广播。</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="动态路由协议" tabindex="-1"><a class="header-anchor" href="#动态路由协议"><span>动态路由协议：</span></a></h4><ul><li>用于实现路由信息交换和更新的协议</li></ul><h5 id="ospf-igp" tabindex="-1"><a class="header-anchor" href="#ospf-igp"><span><code>OSPF/IGP</code>：</span></a></h5><ul><li>即 <code>Open Shortest Path First</code>，开放式最短路径优先</li><li>基于<code>链路状态路由算法</code>实现</li><li>基于<code>IP</code>协议同步路由信息</li><li>应用：广泛应用在数据中心内部（即内网），所以又叫内部网关协议（Interior Gateway Protocol，即<code>IGP</code>）</li></ul><h5 id="bgp" tabindex="-1"><a class="header-anchor" href="#bgp"><span><code>BGP</code>：</span></a></h5><ul><li>即 <code>Border Gateway Protocol</code>，外部网关协议</li><li>基于<code>距离矢量路由算法</code>实现</li><li>基于<code>TCP</code>协议同步信息</li><li>应用：用于<code>数据中心</code>跟<code>外部其他边界路由器</code>之间的路由</li><li>BGP 又分为两类： <ul><li><code>eBGP</code>： <ul><li>自治系统间，边界路由器之间使用 eBGP 广播路由</li></ul></li><li><code>iBGP</code>： <ul><li>内部网络也需要访问其他的自治系统。边界路由器通过运行 iBGP，使得内部的路由器能够找到到达外网目的地的最好的边界路由器。</li></ul></li></ul></li></ul><h4 id="网关系统相关设备" tabindex="-1"><a class="header-anchor" href="#网关系统相关设备"><span>网关系统相关设备：</span></a></h4><ul><li><code>核心路由器/骨干路由器</code>： <ul><li>待补充</li></ul></li><li><code>边界路由器</code>： <ul><li>待补充</li></ul></li><li><code>AS 自制系统</code>： <ul><li>Stub AS：对外只有一个连接。这类 AS 不会传输其他 AS 的包。例如<code>个人或者小公司的网络</code></li><li>Multihomed AS：可能有多个连接连到其他的 AS，但是大多拒绝帮其他的 AS 传输包。例如一些<code>大公司的网络</code></li><li>Transit AS：有多个连接连到其他的 AS，并且可以帮助其他的 AS 传输包。例如<code>主干网</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/32311db09568d2474c98666b5764a026.png" alt="Img" loading="lazy"></li></ul></li><li>NAT路由器： <ul><li>NAT：网络地址转换</li><li>两个客户端192.168.1.10:1025 和 192.168.1.11:1025 同时与服务器 183.232.231.172 进行通信</li><li></li></ul></li></ul>',22))])}]]),d=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/04.%E7%BD%91%E7%BB%9C%E5%B1%82%E3%80%81IP%EF%BC%88%E4%B8%89%E5%B1%82%EF%BC%89.html","title":"04.网络层、IP（三层）","lang":"zh-CN","frontmatter":{"title":"04.网络层、IP（三层）","date":"2024-03-24T15:00:39.000Z","author":"Navyum","tags":["IP"],"categories":["网络"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"icon":"bxs:hot","description":"网络层又叫IP层： 主要的解决问题： 数据包的转发，IP to IP 路由选择 IP地址的分配 分片和重组 IP地址： 分类： ImgImg CIDR（Classless Inter-Domain Routing）： CIDR是一种更灵活的网络划分方法，它将IP地址和子网掩码写在一起。将IP 地址被划分为两部分：网络号 + 主机号 CIDR 表示形式 ...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/04.%E7%BD%91%E7%BB%9C%E5%B1%82%E3%80%81IP%EF%BC%88%E4%B8%89%E5%B1%82%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"04.网络层、IP（三层）"}],["meta",{"property":"og:description","content":"网络层又叫IP层： 主要的解决问题： 数据包的转发，IP to IP 路由选择 IP地址的分配 分片和重组 IP地址： 分类： ImgImg CIDR（Classless Inter-Domain Routing）： CIDR是一种更灵活的网络划分方法，它将IP地址和子网掩码写在一起。将IP 地址被划分为两部分：网络号 + 主机号 CIDR 表示形式 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8fe2a027b29b28f86cae3a200c3219c6.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"IP"}],["meta",{"property":"article:published_time","content":"2024-03-24T15:00:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04.网络层、IP（三层）\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8fe2a027b29b28f86cae3a200c3219c6.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/064c4c0b7df41727895315f4cbde0ee5.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f1ed5c7c7562001e341a9e2a3d11fe11.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f0bf192a1cf0f08545024033e15b4ed5.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/67659587bddd1e9ac2b7d1944be17516.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/32311db09568d2474c98666b5764a026.png\\"],\\"datePublished\\":\\"2024-03-24T15:00:39.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":3,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":6.76,"words":2027},"filePathRelative":"计算机网络/04.网络层、IP（三层）.md","localizedDate":"2024年3月24日","excerpt":"<h2>网络层又叫IP层：</h2>\\n<h3>主要的解决问题：</h3>\\n<ol>\\n<li>数据包的转发，<code>IP to IP</code></li>\\n<li>路由选择</li>\\n<li>IP地址的分配</li>\\n<li>分片和重组</li>\\n</ol>\\n<h2>IP地址：</h2>\\n<h3>分类：</h3>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8fe2a027b29b28f86cae3a200c3219c6.png\\" alt=\\"Img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Img</figcaption></figure>","autoDesc":true}')},36995:(i,e)=>{e.A=(i,e)=>{const l=i.__vccOpts||i;for(const[i,a]of e)l[i]=a;return l}}}]);