"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[20631],{36995:(i,a)=>{a.A=(i,a)=>{const l=i.__vccOpts||i;for(const[i,e]of a)l[i]=e;return l}},49332:(i,a,l)=>{l.r(a),l.d(a,{comp:()=>n,data:()=>p});var e=l(6254);const t={},n=(0,l(36995).A)(t,[["render",function(i,a){return(0,e.uX)(),(0,e.CE)("div",null,a[0]||(a[0]=[(0,e.Fv)('<h2 id="_0-基础概念" tabindex="-1"><a class="header-anchor" href="#_0-基础概念"><span>0）基础概念：</span></a></h2><h4 id="系统与子系统" tabindex="-1"><a class="header-anchor" href="#系统与子系统"><span>系统与子系统：</span></a></h4><ul><li><p>关联：一群有关联的个体</p></li><li><p>规则：个体之间按照规则运作</p></li><li><p>能力：系统能力超越个体能力</p></li><li><p>分层：自顶向下逐层分解</p></li><li><p>子系统的定义和系统定义是一样的，只是观察的角度有差异。一个系统可能是另外一个更大系统的子系统。</p></li><li><p>举例：微信系统和微信的支付系统</p></li><li><p>顶层的理解(L0~L4)：一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层级的架构。所以微信架构，就是指微信系统这个层级的架构。当然，微信的子系统，比如支付系统，也有它自己的架构，同样只包括顶层。</p></li></ul><h4 id="模块与组件" tabindex="-1"><a class="header-anchor" href="#模块与组件"><span>模块与组件：</span></a></h4><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/411be1cf97bb8d3a428a4978f2926305.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>拆分角度不同 <ul><li>从业务逻辑的角度“模块”，主要目的是职责分离；</li><li>从物理部署的角度“组件”，主要目的是单元复用。</li></ul></li></ul><h4 id="架构与框架" tabindex="-1"><a class="header-anchor" href="#架构与框架"><span>架构与框架：</span></a></h4><p><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f77c23166030fbbc11ef1ea700ceb0bb.png" alt="图片" loading="lazy"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1318083054f3eff4f8a59d9584a3629e.png" alt="图片" loading="lazy"></p><ul><li>框架关注的是“规范”（框），架构关注的是“结构”（构）。</li><li>架构设计的主要目的： <ul><li>解决软件系统复杂度带来的问题，从而设计相对应的解决方案。</li></ul></li></ul><h2 id="_1-架构设计原则" tabindex="-1"><a class="header-anchor" href="#_1-架构设计原则"><span>1）架构设计原则：</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/5051efecb7af5dffe5947bde0a723a3c.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>概括： <ul><li><strong>合适优于业界领先</strong></li><li><strong>简单优于复杂</strong></li><li><strong>演化优于一步到位</strong></li></ul></li></ul><h2 id="_2-复杂度来源" tabindex="-1"><a class="header-anchor" href="#_2-复杂度来源"><span>2) 复杂度来源：</span></a></h2><h4 id="高性能-系统运行效率高-体验好" tabindex="-1"><a class="header-anchor" href="#高性能-系统运行效率高-体验好"><span><code>高性能</code>：系统运行效率高，体验好</span></a></h4><ul><li>核心思想：水平和垂直两个方向扩展</li><li>垂直维度主要是针对单台计算机，通过升级软、硬件能力实现性能提升</li><li>水平维度则主要针对集群系统，利用合理的任务分配与任务分解实现性能的提升。</li><li>垂直维度具体措施： <ul><li>增大内存减少I/O操作</li><li>更换为固态硬盘（SSD）提升I/O访问速度</li><li>使用RAID增加I/O吞吐能力</li><li>置换服务器获得更多的处理器或分配更多的虚拟核</li><li>升级网络接口或增加网络接口</li></ul></li><li>水平维度具体措施： <ul><li>功能分解：基于功能将系统分解为更小的子系统</li><li>多实例副本：同一组件重复部署到多台不同的服务器</li><li>数据分割：在每台机器上都只部署一部分数据</li></ul></li></ul><h4 id="高可用-系统无中断运行" tabindex="-1"><a class="header-anchor" href="#高可用-系统无中断运行"><span>高可用：系统无中断运行</span></a></h4><ul><li>核心思想：服务与数据的冗余备份与失效转移</li><li>计算高可用</li><li>存储高可用</li><li>高可用状态决策</li></ul><h4 id="可扩展-系统对业务需求、环境变化的适应能力-从而快速响应变化、降低影响" tabindex="-1"><a class="header-anchor" href="#可扩展-系统对业务需求、环境变化的适应能力-从而快速响应变化、降低影响"><span>可扩展：系统对业务需求、环境变化的适应能力，从而快速响应变化、降低影响</span></a></h4><ul><li>核心思想：按照流程、服务、功能拆分</li><li>正确预测变化 <ul><li>从业务维度：对业务深入理解，对可预计的业务变化进行预测</li><li>从技术维度：利用扩展性好的技术，实现对变化的封装</li></ul></li><li>完美应对变化 <ul><li>提炼出“变化层”和“稳定层”</li><li>提炼出“抽象层”和“实现层”</li></ul></li><li>拆分模式： <ul><li>面向流程拆分：分层架构</li><li>面向服务拆分：SOA、微服务</li><li>面向功能拆分: 微内核架构</li></ul></li></ul><h4 id="其他考量-低成本、安全、规模" tabindex="-1"><a class="header-anchor" href="#其他考量-低成本、安全、规模"><span>其他考量：低成本、安全、规模</span></a></h4><h2 id="_3-4-1-视图" tabindex="-1"><a class="header-anchor" href="#_3-4-1-视图"><span>3) 4+1 视图</span></a></h2><ol><li>逻辑视图</li><li>处理视图</li><li>开发视图</li><li>物理视图</li><li>场景视图 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8febca38a2cec3c97972129db99311d7.png" alt="图片" loading="lazy"></li></ol><h2 id="_4-4r-架构" tabindex="-1"><a class="header-anchor" href="#_4-4r-架构"><span>4) 4R 架构：</span></a></h2><ul><li><strong>Rank</strong>：顶层结构，架构是分层的</li><li><strong>Role</strong>：组成角色，系统包含哪些角色</li><li><strong>Relation</strong>：角色关系，角色之间的关系</li><li><strong>Rule</strong>：运作规则，角色如何协作完成系统功能</li><li>补充说明： <ul><li><p>Rank：它是指软件架构是分层的（L0~L4），对应“系统”和“子系统”的分层关系。无论是架构设计还是画架构图，都应该采取“自顶向下，逐步细化”。</p></li><li><p>Role：架构设计最重要的工作之一就是将系统拆分为多个角色。最常见的微服务拆分其实就是将整体复杂的业务系统按照业务领域的方式，拆分为多个微服务，每个微服务就是系统的一个角色。</p></li><li><p>Relation：任何关系最后都需要代码来实现，包括连接方式（HTTP、TCP、UDP 和串口等）、数据协议（JSON、XML 和二进制等）以及具体的接口。</p></li><li><p>Rule：系统角色之间如何协作来完成系统功能，系统能力不是个体之和，而是通过协作产生新能力。在架构设计的时候，核心的业务场景都需要设计 Rule。</p></li></ul></li></ul><p><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2086473457cb8ae9390dd2545b542be9.png" alt="图片" loading="lazy"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/bf5fcbd644dc8bd2e48b3ac47dfe31a1.png" alt="图片" loading="lazy"></p><h2 id="_5-4r-架构设计如何画" tabindex="-1"><a class="header-anchor" href="#_5-4r-架构设计如何画"><span>5) 4R 架构设计如何画：</span></a></h2><ol><li><strong>明确 Rank</strong>：也就是说，不要事无巨细地把一个大系统的方方面面都在一张架构图中展现出来，而应该明确你要阐述的系统所属的级别（L0～L4），然后只描述这个级别的架构信息。</li><li><strong>画出 Role</strong>：从不同的角度来分解系统，看看系统包含哪些角色，角色对应架构图中的区块、图标和节点等。</li><li><strong>画出 Relation</strong>：有了角色后，画出角色之间的关系，对应架构图中角色之间的连接线，不同的连接线可以代表不同的关系。</li><li><strong>最后画出 Rule</strong>：挑选核心场景，画出系统角色之间如何协作来完成某项具体的业务功能，对应系统序列图。</li></ol><h2 id="_6-常见架构图" tabindex="-1"><a class="header-anchor" href="#_6-常见架构图"><span>6) 常见架构图：</span></a></h2><ol><li><p>架构划分 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/390560199674bd9ffb7745a02a31dc43.png" alt="图片" loading="lazy"></p></li><li><p>架构绘画要点 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/cdf10afe97d669d63da0067fb37ebbbb.png" alt="图片" loading="lazy"></p></li></ol><h2 id="_7-互联网的标准技术架构" tabindex="-1"><a class="header-anchor" href="#_7-互联网的标准技术架构"><span>7) 互联网的标准技术架构：</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a9b193e973f0cdb7106fe2fc18523fa0.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_8-架构设计流程" tabindex="-1"><a class="header-anchor" href="#_8-架构设计流程"><span>8) 架构设计流程：</span></a></h2><ol><li>识别复杂度</li><li>设计备选方案</li><li>评估和选择备选方案</li><li>详细方案设计</li></ol><hr><h2 id="_9-扩展" tabindex="-1"><a class="header-anchor" href="#_9-扩展"><span>9）扩展：</span></a></h2><h4 id="_1-架构师如何学习新的工具" tabindex="-1"><a class="header-anchor" href="#_1-架构师如何学习新的工具"><span>1. 架构师如何学习新的工具</span></a></h4><ol><li><p>如何技术选型</p><ul><li><p>Q :“PPT 架构师”的口头禅是“细节不讨论”，一个优秀的架构师，需要对细节有多少考虑呢？</p></li><li><p>A：华仔学习 Elasticsearch 具体的做法是：</p><ol><li>搭建一个单机伪集群，搭建完成后看看安装路径下的文件和目录，看看配置文件有哪些配置项，不同的配置项会有什么样的影响。</li><li>执行常用的操作，例如创建索引，插入、删除、查询文档，查看一下各种输出。</li><li>研究其基本原理，例如索引、分片、副本等，研究的时候要多思考，例如索引应该如何建，分片数量和副本数量对系统有什么影响等。</li><li>和其他类似系统对比，例如 Solr、Sphinx，研究其优点、缺点、适用场景。</li><li>模拟一个案例看看怎么应用。例如，假设我用 Elasticsearch 来存储淘宝的商品信息，我应该如何设计索引和分片。</li><li>查看业界使用的案例，思考一下别人为何这么用；看看别人测试的结果，大概了解性能范围。</li><li>如果某部分特别有兴趣或者很关键，可能去看源码，例如 Elasticsearch 的选举算法。如果确定要引入，会进行性能和可用性测试。</li><li>不建议拿到一个系统一开始就去读源码，效率太低，而且效果也不好。</li></ol></li></ul></li><li><p>基本能力：</p><ul><li>架构师的沟通能力非常重要，既要说得动老板，让老板支持自己的设计决定；</li><li>又要镇得住技术人员，让技术人员信服自己的设计选择；</li><li>同时还要能够理解业务，结合业务不同发展阶段设计合适的架构，所以也要参与产品和项目决策</li></ul></li><li><p>基于设计方法论：</p><ul><li>架构师是基于完善的架构设计方法论的指导来进行架构设计，</li><li>而技术专家更多的是基于经验进行架构设计。</li><li>简单来说，即使是同样一个方案，初级架构师能够清晰地阐述架构设计的理由和原因，而技术专家可能就是因为自己曾经这样做过，或者看到别人这样做过而选择设计方案。</li></ul></li></ol><h4 id="_2-架构师职责" tabindex="-1"><a class="header-anchor" href="#_2-架构师职责"><span>2. 架构师职责：</span></a></h4><ul><li>确定层级</li><li>拆解角色</li><li>定义关系</li><li>设计规则</li></ul><h4 id="_3-架构文档内容" tabindex="-1"><a class="header-anchor" href="#_3-架构文档内容"><span>3. 架构文档内容：</span></a></h4><ul><li>指明层级</li><li>描述角色</li><li>定义关系</li><li>展现规则</li></ul><h4 id="_4-如何学习架构" tabindex="-1"><a class="header-anchor" href="#_4-如何学习架构"><span>4. 如何学习架构：</span></a></h4><ul><li>自顶向下学习</li><li>角色有哪些</li><li>角色关系如何</li><li>运作规则是什么</li></ul><h4 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料：</span></a></h4><ul><li>架构脑图：<a href="https://zhimap.com/mmap/6159a37f642c480e984e9ad5d97e2489" target="_blank" rel="noopener noreferrer">https://zhimap.com/mmap/6159a37f642c480e984e9ad5d97e2489</a></li><li>高性能网络模型：<a href="https://unixism.net/2019/04/linux-applications-performance-introduction/" target="_blank" rel="noopener noreferrer">https://unixism.net/2019/04/linux-applications-performance-introduction/</a></li></ul><h3 id="形象举例" tabindex="-1"><a class="header-anchor" href="#形象举例"><span>形象举例:</span></a></h3><blockquote><p>搬砖的：“头，我们要造什么？”；（做什么系统？）</p><p>工程师：“龙之梦商城”；（XXX系统，比如微博系统）</p><p>搬砖的：“图纸画出来了嘛？”；（架构是怎么设计的？）</p><p>工程师：“一楼主要以女性消费为主体、二楼以大众娱乐为主体、三楼以美食为主体”；（相当于微博系统中的各个子系统，比如评论子系统、动态子系统、消息子系统）</p><p>搬砖的：“头，说人话”；</p><p>工程师：“一楼有卖衣服、化妆品的，二楼有唱歌、看电影的，三楼有吃的”；（【模块】按照逻辑区分，比如存储数据模块、搜索模块、消息推送模块）</p><p>搬砖的：“有没有很知名的店啊？”；</p><p>工程师：“有的，一楼有香奈儿、优衣库...、二楼有好乐迪、万达影院....、三楼有海底捞、避风塘.....”；（【组件】按照物理区分，存储数据模块对应Mysql、搜索模块对应ElasticSearch、 消息推送模块对应Kafka）</p><p>搬砖的：“对了，头，商城大门有啥需要叮嘱的施工规范不？或有啥简化施工工艺的新技术嘛？”；（有框架的可以用吗？）</p><p>工程师猛吸了一口烟，把烟头扔在地上，用皮鞋左右撵了两下，缓缓从嘴里崩出四个字。</p><p>“老样子吧”。（Spring全家桶甩起来）</p></blockquote>',47)]))}]]),p=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/10._%E5%A6%82%E4%BD%95%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html","title":"10.*如何做架构设计","lang":"zh-CN","frontmatter":{"title":"10.*如何做架构设计","date":"2025-06-17T14:40:46.000Z","author":"Navyum","tags":["架构设计"],"categories":["分布式"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"0）基础概念： 系统与子系统： 关联：一群有关联的个体 规则：个体之间按照规则运作 能力：系统能力超越个体能力 分层：自顶向下逐层分解 子系统的定义和系统定义是一样的，只是观察的角度有差异。一个系统可能是另外一个更大系统的子系统。 举例：微信系统和微信的支付系统 顶层的理解(L0~L4)：一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/10._%E5%A6%82%E4%BD%95%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"10.*如何做架构设计"}],["meta",{"property":"og:description","content":"0）基础概念： 系统与子系统： 关联：一群有关联的个体 规则：个体之间按照规则运作 能力：系统能力超越个体能力 分层：自顶向下逐层分解 子系统的定义和系统定义是一样的，只是观察的角度有差异。一个系统可能是另外一个更大系统的子系统。 举例：微信系统和微信的支付系统 顶层的理解(L0~L4)：一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/411be1cf97bb8d3a428a4978f2926305.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"架构设计"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:40:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10.*如何做架构设计\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/411be1cf97bb8d3a428a4978f2926305.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f77c23166030fbbc11ef1ea700ceb0bb.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1318083054f3eff4f8a59d9584a3629e.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/5051efecb7af5dffe5947bde0a723a3c.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8febca38a2cec3c97972129db99311d7.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2086473457cb8ae9390dd2545b542be9.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/bf5fcbd644dc8bd2e48b3ac47dfe31a1.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/390560199674bd9ffb7745a02a31dc43.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/cdf10afe97d669d63da0067fb37ebbbb.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a9b193e973f0cdb7106fe2fc18523fa0.png\\"],\\"datePublished\\":\\"2025-06-17T14:40:46.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":8.49,"words":2548},"filePathRelative":"架构设计/02.分布式与架构/10.*如何做架构设计.md","localizedDate":"2025年6月17日","excerpt":"<h2>0）基础概念：</h2>\\n<h4>系统与子系统：</h4>\\n<ul>\\n<li>\\n<p>关联：一群有关联的个体</p>\\n</li>\\n<li>\\n<p>规则：个体之间按照规则运作</p>\\n</li>\\n<li>\\n<p>能力：系统能力超越个体能力</p>\\n</li>\\n<li>\\n<p>分层：自顶向下逐层分解</p>\\n</li>\\n<li>\\n<p>子系统的定义和系统定义是一样的，只是观察的角度有差异。一个系统可能是另外一个更大系统的子系统。</p>\\n</li>\\n<li>\\n<p>举例：微信系统和微信的支付系统</p>\\n</li>\\n<li>\\n<p>顶层的理解(L0~L4)：一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层级的架构。所以微信架构，就是指微信系统这个层级的架构。当然，微信的子系统，比如支付系统，也有它自己的架构，同样只包括顶层。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);