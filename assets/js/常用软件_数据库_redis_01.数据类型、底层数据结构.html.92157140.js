"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[33364],{29423:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var n=a(6254);const e={},l=(0,a(36995).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h2 id="redis-对象类型和编码" tabindex="-1"><a class="header-anchor" href="#redis-对象类型和编码"><span>Redis 对象类型和编码：</span></a></h2><p>Redis键和值都是由<code>redisObject</code>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct redisObiect{</span></span>\n<span class="line"><span>\t//类型</span></span>\n<span class="line"><span>\tunsigned type:4;</span></span>\n<span class="line"><span>\t//编码</span></span>\n<span class="line"><span>\tunsigned encoding:4;</span></span>\n<span class="line"><span>\t//指向底层数据结构的指针</span></span>\n<span class="line"><span>\tvoid *ptr;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型和底层数据结构的关系" tabindex="-1"><a class="header-anchor" href="#数据类型和底层数据结构的关系"><span>数据类型和底层数据结构的关系：</span></a></h2><p><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dd0269c80d09ab2c4aad73bb86ccac51.png" alt="Img" loading="lazy"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/7330435b36787440bcd02946846100bc.png" alt="Img" loading="lazy"></p><h3 id="底层数据结构时间复杂度" tabindex="-1"><a class="header-anchor" href="#底层数据结构时间复杂度"><span>底层数据结构时间复杂度：</span></a></h3><table><thead><tr><th style="text-align:left;">数据结构</th><th style="text-align:left;">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left;">哈希表</td><td style="text-align:left;">O(1)</td></tr><tr><td style="text-align:left;">跳表</td><td style="text-align:left;">O(logN)</td></tr><tr><td style="text-align:left;">双向链表</td><td style="text-align:left;">O(N)</td></tr><tr><td style="text-align:left;">压缩列表</td><td style="text-align:left;">O(N)</td></tr><tr><td style="text-align:left;">整数数组</td><td style="text-align:left;">O(N)</td></tr></tbody></table><h2 id="string-对象的编码和数据结构" tabindex="-1"><a class="header-anchor" href="#string-对象的编码和数据结构"><span>String 对象的编码和数据结构：</span></a></h2><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c7cc848eabc1431e79f9fab98cb50a89.png" width="60%"><ul><li>特征： <ul><li>String 是最基本的 key-value 结构</li></ul></li><li>最大长度：512M</li><li>编码规则：根据<code>值的类型</code>和<code>长度</code><ul><li>元素全部为整数， 且可以使用long表示，则 <code>encoding</code>为 <code>int</code></li><li>字符串 且长度 &gt; 32字节，则<code>encoding</code>为 <code>raw</code></li><li>字符串 且长度 &lt;= 32字节，则<code>encoding</code>为 <code>embstr</code></li></ul></li><li>embstr 和 raw的区别： <ul><li>embstr编码时，只需要一次内存分配，<code>redisObject</code>和<a href="#%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-%60SDS%60%EF%BC%9A"><code>SDS</code></a>结构会存储在一块连续内存。embstr编码一般用于仅查询的场景，如果对embstr编码的数据做修改，需要先将编码改成raw，再修改数据</li><li>raw需要两次内存分配，能存储的字符串长度更大</li></ul></li></ul><h3 id="简单动态字符串-sds" tabindex="-1"><a class="header-anchor" href="#简单动态字符串-sds"><span>简单动态字符串 <code>SDS</code>：</span></a></h3><h4 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构：</span></a></h4><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">free</td><td style="text-align:left;">buf数组中未使用字节的数量</td></tr><tr><td style="text-align:left;">len</td><td style="text-align:left;">buf数组中已使用字节的数量</td></tr><tr><td style="text-align:left;">buff[]</td><td style="text-align:left;"><code>字节</code>数组用于保存字符串，以空字符\\0结尾</td></tr></tbody></table><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/36c6cac8d092574f174c365bc500afc3.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h4><ol><li>动态扩展，最大不能超过512MB</li><li>性能高（减少内存重分配次数） <ol><li>空间预分配</li><li>空间惰性释放</li></ol></li><li>二进制安全 <ol><li>通过len判断是否结束，而不是结束符，存储的是二进制数据，而不是字符</li></ol></li><li>遵循以空字符结尾的惯例，因此兼容C字符串函数</li></ol><h2 id="list对象的编码和数据结构" tabindex="-1"><a class="header-anchor" href="#list对象的编码和数据结构"><span>List对象的编码和数据结构：</span></a></h2><ul><li>特征： <ul><li>List是列表结构，按照<code>插入顺序排序</code>，可以从头部或尾部向 List 列表添加元素</li></ul></li><li>最大长度： 2^32 - 1（40亿）</li><li>编码规则：<code>元素个数</code>和<code>元素值大小</code><ul><li>元素个数 &lt; 512 且元素值大小 &lt; 64字节，encoding 为 <a href="#ziplist-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%EF%BC%9A"><code>ziplist</code></a>(压缩列表，压缩列表本身可以支持的元素大小很大)</li><li>否则，encoding为<a href="#linkedlist-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%9A"><code>linkedlist</code></a>(双向链表)</li><li>Redis &gt; 3.2版本后，encoding只有<a href="#quicklist%EF%BC%9A"><code>quicklist</code></a></li></ul></li></ul><h3 id="quicklist" tabindex="-1"><a class="header-anchor" href="#quicklist"><span>quicklist：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0465ebdf55eb11ee155b9705e31b2187.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征：</span></a></h4><ul><li>ziplist和linkedlist的混合体</li><li>外层是linkedlist，每个node里面是ziplist</li><li>quicklist会<code>控制 quicklistNode 结构里的压缩列表的大小或者元素个数，来规避潜在的连锁更新的风险</code>，但是这并没有完全解决连锁更新的问题</li></ul><h4 id="查找过程" tabindex="-1"><a class="header-anchor" href="#查找过程"><span>查找过程：</span></a></h4><p>因为是有序插入，可以先找对应node，再到node里面的ziplist找元素</p><h3 id="ziplist-压缩列表" tabindex="-1"><a class="header-anchor" href="#ziplist-压缩列表"><span>ziplist 压缩列表：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/65b08e759bd03482ea07d9ed7d2accb4.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="特征-1" tabindex="-1"><a class="header-anchor" href="#特征-1"><span>特征：</span></a></h4><ul><li>内存占用小且连续，分配速度快，随机访问相对高效，插入删除相对低效（因为需要挪动）</li><li>压缩列表只会用于保存的节点数量不多的场景</li><li>压缩列表每个节点因为需要保存前一个节点的长度字段 <code>prevlen</code>，就会有连锁更新的隐患</li></ul><h4 id="结构-1" tabindex="-1"><a class="header-anchor" href="#结构-1"><span>结构：</span></a></h4><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">描述</th><th style="text-align:left;">长度</th></tr></thead><tbody><tr><td style="text-align:left;">zlbytes</td><td style="text-align:left;">列表长度</td><td style="text-align:left;">4字节</td></tr><tr><td style="text-align:left;">zltail</td><td style="text-align:left;">列表尾的偏移量</td><td style="text-align:left;">4字节</td></tr><tr><td style="text-align:left;">zllen</td><td style="text-align:left;">列表中的 entry 个数</td><td style="text-align:left;">2字节</td></tr><tr><td style="text-align:left;">zlend</td><td style="text-align:left;">列表结束标志</td><td style="text-align:left;">1字节</td></tr><tr><td style="text-align:left;">entryX</td><td style="text-align:left;">节点</td><td style="text-align:left;">&lt; 64字节</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">entry</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">prevlen</td><td style="text-align:left;">前一个entry的长度</td></tr><tr><td style="text-align:left;">encoding</td><td style="text-align:left;">data的类型和字符个数</td></tr><tr><td style="text-align:left;">data</td><td style="text-align:left;">实际数据</td></tr></tbody></table><ul><li><code>prevlen</code>的作用： <ul><li><code>快速反向遍历</code>：通过记录前一个 entry 的长度，可以快速定位到前一个元素的起始位置</li></ul></li><li>encoding: | encoding 编码 | 编码长度 | data保存的值类型、范围、和个数 | | -- | -- | -- | | 00开头 | 1字节 | data存字符串，长度&lt;=63字节，编码的后6位记录字符串长度 | | 01开头 | 2字节 | data存字符串，长度&lt;=2^14-1，编码的后14位记录字符串长度 | | 10开头 | 5字节 | data存字符串，长度&lt;=2^32-1，编码的后38位记录字符串长度 | | 11开头 | 1字节 | data存的1个整数 |</li></ul><h4 id="查找过程-1" tabindex="-1"><a class="header-anchor" href="#查找过程-1"><span>查找过程：</span></a></h4><ol><li>查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)</li><li>查找其他元素时，只能逐个查找，此时的复杂度就是 O(N)。如果 ziplist 里面保存的是字符串，ziplist在查找某个元素时，还需要通过<code>encoding</code>逐个解码元素，判断每个元素的data大小。</li></ol><h3 id="linkedlist-双向链表" tabindex="-1"><a class="header-anchor" href="#linkedlist-双向链表"><span>linkedlist 双向链表：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/96479735034454430b778f12bfa9c44f.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="特征-2" tabindex="-1"><a class="header-anchor" href="#特征-2"><span>特征：</span></a></h4><ul><li>内存不连续，随机访问低效，插入删除相对高效</li><li>无大小限制</li></ul><h4 id="结构-2" tabindex="-1"><a class="header-anchor" href="#结构-2"><span>结构：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct listNode</span></span>\n<span class="line"><span>{ </span></span>\n<span class="line"><span>\t// 前置节点 </span></span>\n<span class="line"><span>\tstruct listNode *prev; </span></span>\n<span class="line"><span>\t// 后置节点 </span></span>\n<span class="line"><span>\tstruct listNode *next; </span></span>\n<span class="line"><span>\t// 节点的值 </span></span>\n<span class="line"><span>\tvoid *value; </span></span>\n<span class="line"><span>} listNode;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>typedef struct list{</span></span>\n<span class="line"><span>    //表头节点</span></span>\n<span class="line"><span>    listNode *head;</span></span>\n<span class="line"><span>    //表尾节点</span></span>\n<span class="line"><span>    listNode *tail;</span></span>\n<span class="line"><span>    //链表所包含的节点数量</span></span>\n<span class="line"><span>    unsigned long len;</span></span>\n<span class="line"><span>    //节点值复制函数</span></span>\n<span class="line"><span>    void *(*dup)(void *ptr);</span></span>\n<span class="line"><span>    //节点值释放函数</span></span>\n<span class="line"><span>    void *(*free)(void *ptr);</span></span>\n<span class="line"><span>    //节点值对比函数</span></span>\n<span class="line"><span>    int (*match)(void *ptr,void *key);</span></span>\n<span class="line"><span>}list;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listpack" tabindex="-1"><a class="header-anchor" href="#listpack"><span>listpack:</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c43a1bc5659c46cdce1d78c099b67876.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="特征-3" tabindex="-1"><a class="header-anchor" href="#特征-3"><span>特征：</span></a></h4><ul><li>每个节点不再包含前一个节点的长度，无连锁更新隐患</li><li>用来替代ziplist</li></ul><h4 id="结构-3" tabindex="-1"><a class="header-anchor" href="#结构-3"><span>结构：</span></a></h4><ul><li>encoding，定义该元素的编码类型，会对不同长度的整数和字符串进行编码；</li><li>data，实际存放的数据；</li><li>len，encoding + data的总长度</li></ul><h2 id="hash对象的编码和数据结构" tabindex="-1"><a class="header-anchor" href="#hash对象的编码和数据结构"><span>Hash对象的编码和数据结构：</span></a></h2><ul><li>特征： <ul><li>键值对中的值本身又是一个键值对结构</li></ul></li><li>编码规则：<code>元素个数</code>和<code>元素值大小</code><ul><li>元素个数 &lt; 512 且元素值大小 &lt; 64字节，encoding 为 <a href="#ziplist-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%EF%BC%9A"><code>ziplist</code></a>(压缩列表)</li><li>否则，encoding为<a href="#hashtable-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%9A"><code>hashtable</code></a>(哈希表)</li></ul></li></ul><h3 id="hashtable-哈希表" tabindex="-1"><a class="header-anchor" href="#hashtable-哈希表"><span>hashtable 哈希表：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a3a869f82501c94a62356d1a95cf3d90.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h4 id="特征-4" tabindex="-1"><a class="header-anchor" href="#特征-4"><span>特征：</span></a></h4><ol><li>基于数组按照下标随机访问，复杂度O(1)</li><li>hash函数</li><li>hash冲突： <ul><li>开放寻址（重新探测一一个空闲位）</li><li>链表法</li><li>负载因子 rehash（是个指标，基于此扩容、收缩）</li></ul></li></ol><h4 id="结构-4" tabindex="-1"><a class="header-anchor" href="#结构-4"><span>结构：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct dictht {</span></span>\n<span class="line"><span>    //哈希表数组</span></span>\n<span class="line"><span>    dictEntry **table;</span></span>\n<span class="line"><span>    //哈希表大小</span></span>\n<span class="line"><span>    unsigned long size;  </span></span>\n<span class="line"><span>    //哈希表大小掩码，用于计算索引值</span></span>\n<span class="line"><span>    unsigned long sizemask;</span></span>\n<span class="line"><span>    //该哈希表已有的节点数量</span></span>\n<span class="line"><span>    unsigned long used;</span></span>\n<span class="line"><span>} dictht;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>typedef struct dictEntry {</span></span>\n<span class="line"><span>    //键值对中的键</span></span>\n<span class="line"><span>    void *key;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>    //键值对中的值</span></span>\n<span class="line"><span>    union {</span></span>\n<span class="line"><span>        void *val;</span></span>\n<span class="line"><span>        uint64_t u64;</span></span>\n<span class="line"><span>        int64_t s64;</span></span>\n<span class="line"><span>        double d;</span></span>\n<span class="line"><span>    } v;</span></span>\n<span class="line"><span>    //指向下一个哈希表节点，形成链表</span></span>\n<span class="line"><span>    struct dictEntry *next;</span></span>\n<span class="line"><span>} dictEntry;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="渐进式rehash" tabindex="-1"><a class="header-anchor" href="#渐进式rehash"><span>渐进式rehash：</span></a></h4><ul><li>当负载因子系数满足条件时，开始rehash</li><li>为字典的ht[1]散列表分配空间，修改rehashidx为0表示正在rehash</li><li>每次有更新命令时，将对应数据更新到ht[1],并分批将ht[0]部分键重新计算hash值，放入ht[1]</li><li>期间的操作需要到两个hash表查询</li><li>完成迁移后，调整rehashidx值，ht[0]变为空表</li></ul><h2 id="set-对象的编码和数据结构" tabindex="-1"><a class="header-anchor" href="#set-对象的编码和数据结构"><span>Set 对象的编码和数据结构：</span></a></h2><ul><li>特征： <ul><li><code>无序</code>、<code>不可重复</code>、支持并交差等操作</li><li>元素个数上限：2^32-1</li></ul></li><li>编码规则：<code>元素个数</code>和<code>元素类型</code><ul><li>元素全部为整数，且个数 &lt; 512，则encoding为<a href="#intset-%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88%EF%BC%9A"><code>intset</code></a>整数集合</li><li>其他，使用<a href="#hashtable-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%9A"><code>hashtable</code></a>哈希表</li></ul></li></ul><h3 id="intset-整数集合" tabindex="-1"><a class="header-anchor" href="#intset-整数集合"><span>intset 整数集合：</span></a></h3><h4 id="特征-5" tabindex="-1"><a class="header-anchor" href="#特征-5"><span>特征：</span></a></h4><ul><li>整数集合是Redis自己设计的一种存储结构</li><li>可以存储int16_t、int32_t、int64_t的整数</li></ul><h4 id="结构-5" tabindex="-1"><a class="header-anchor" href="#结构-5"><span>结构：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//每个intset结构表示一个整数集合</span></span>\n<span class="line"><span>typedef struct intset{</span></span>\n<span class="line"><span>    //编码方式</span></span>\n<span class="line"><span>    uint32_t encoding;</span></span>\n<span class="line"><span>    //集合中包含的元素数量</span></span>\n<span class="line"><span>    uint32_t length;</span></span>\n<span class="line"><span>    //保存元素的数组</span></span>\n<span class="line"><span>    int8_t contents[];</span></span>\n<span class="line"><span>} intset;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整数集合升级： <ul><li>新元素的类型比整数集合现有元素的类型长时</li><li>根据新元素的类型,扩展整数集合底层数组的空间大小</li><li>原有元素类型转换</li><li>新元素插入</li></ul></li><li>整数集合降级： <ul><li>升级后不再发生降级</li></ul></li></ul><h2 id="zset-对象的编码和数据结构-sorted-set" tabindex="-1"><a class="header-anchor" href="#zset-对象的编码和数据结构-sorted-set"><span>Zset 对象的编码和数据结构(Sorted Set)：</span></a></h2><ul><li>特征： <ul><li><code>有序</code>、<code>不可重复</code>、支持并交差等操作</li><li>相比于 <code>Set 类型</code>多了一个排序属性 <code>score</code>（分值）</li></ul></li><li>元素个数上限：2^32-1</li><li>编码规则：<code>元素个数</code>和<code>元素大小</code><ul><li>元素个数 &lt; 128 且元素 &lt; 64字节，encoding为<a href="#ziplist-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%EF%BC%9A"><code>ziplist</code></a>压缩列表</li><li>其他，使用<a href="#skiplist-%E8%B7%B3%E8%A1%A8%EF%BC%9A"><code>skiplist</code></a>跳表</li></ul></li></ul><h3 id="skiplist-跳表" tabindex="-1"><a class="header-anchor" href="#skiplist-跳表"><span>skiplist 跳表：</span></a></h3><ul><li>定义：在链表的基础上，增加了多级索引</li><li>优点：既能进行高效的范围查询，也能进行高效单点查询</li></ul><h4 id="结构-6" tabindex="-1"><a class="header-anchor" href="#结构-6"><span>结构：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct zskiplistNode {</span></span>\n<span class="line"><span>    //Zset 对象的元素值</span></span>\n<span class="line"><span>    sds ele;</span></span>\n<span class="line"><span>    //元素权重值</span></span>\n<span class="line"><span>    double score;</span></span>\n<span class="line"><span>    //后向指针</span></span>\n<span class="line"><span>    struct zskiplistNode *backward;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>    //节点的 level 数组，保存每层上的前向指针和跨度</span></span>\n<span class="line"><span>    struct zskiplistLevel {</span></span>\n<span class="line"><span>        struct zskiplistNode *forward;</span></span>\n<span class="line"><span>        unsigned long span;</span></span>\n<span class="line"><span>    } level[];</span></span>\n<span class="line"><span>} zskiplistNode;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>typedef struct zskiplist {</span></span>\n<span class="line"><span>    struct zskiplistNode *header, *tail;</span></span>\n<span class="line"><span>    unsigned long length;</span></span>\n<span class="line"><span>    int level;</span></span>\n<span class="line"><span>} zskiplist;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查找" tabindex="-1"><a class="header-anchor" href="#查找"><span>查找：</span></a></h4><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 跳表查找元素</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> zsl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> zsl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">forward</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                     sdscmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ele</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,ele) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dac02df0f5cd3a7a16de8fb2d2bd302a.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li>查找 (abcd，4)</li><li>过程： <ul><li>先从头节点的最高层 L2 开始，L2 forward 指向(abc，3)。权重3 &lt; 4，x 设置为(abc，3)；</li><li>(abc，3)的forward为空指针, 向其下一层leve[1]寻找;</li><li>(abc，3)的leve[1]的forward指向(abcde，4)。权重4和查找元素相等，但 &quot;abced&quot; &gt; &quot;abcd&quot;，不满足条件，继续向其下一层 leve[0]寻找;</li><li>(abc，3)的leve[0]的forward指针指向(abcd，4)，权重和SDS都与查找的节点相等，元素找到，查询结束。</li></ul></li></ul><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明：</span></a></h4><ul><li>跳表在链表的基础上，增加了多级索引。通过索引位置的几个跳转，实现数据的快速定位。（空间换时间的方式，首先得保证链表是有序的）</li></ul><h2 id="bitmap-对象和数据结构" tabindex="-1"><a class="header-anchor" href="#bitmap-对象和数据结构"><span>Bitmap 对象和数据结构：</span></a></h2><ul><li>特征： <ul><li>Bitmap，即位图，是一串连续的二进制数组</li><li>查找：可以通过偏移量（offset）定位元素</li><li>BitMap 通过最小的单位 bit 来进行0|1的设置，表示某个元素的值或者状态</li><li>时间复杂度为 O(1)</li></ul></li><li>编码规则： <ul><li>用 <a href="#String-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A"><code>String</code></a> 类型作为底层数据结构</li></ul></li><li>作用：统计二值状态</li></ul><h2 id="hyperloglog-对象和数据结构" tabindex="-1"><a class="header-anchor" href="#hyperloglog-对象和数据结构"><span>HyperLogLog 对象和数据结构：</span></a></h2><ul><li>特征： <ul><li>提供不精确的去重计数，基于概率统计</li><li>节省内存：HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数</li></ul></li><li>作用：基数统计（指统计一个集合中不重复的元素个数）</li><li>底层数据结构：忽略</li></ul><h2 id="geo-对象和数据结构" tabindex="-1"><a class="header-anchor" href="#geo-对象和数据结构"><span>GEO 对象和数据结构：</span></a></h2><ul><li>特征：</li><li>作用：用于存储地理位置信息，并对存储的信息进行操作</li><li>底层数据结构：<a href="#Zset-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A"><code>Sorted Set</code></a> 集合类型</li><li>机制： <ul><li>「对二维地图做区间划分」</li><li>「对区间进行编码」</li><li>把编码值作为 <code>Sorted Set</code> 元素的权重分数</li></ul></li></ul><h2 id="stream-对象和数据结构" tabindex="-1"><a class="header-anchor" href="#stream-对象和数据结构"><span>Stream 对象和数据结构：</span></a></h2><ul><li>特征： <ul><li>专门为消息队列设计的数据类型</li><li>支持消息的持久化（pub/sub不支持）</li><li>支持自动生成全局唯一 ID（List不支持）</li><li>支持ack消息确认的模式（List不支持）</li><li>支持消费组模式等</li></ul></li><li>pub/sub机制问题： <ul><li>因为不是基于基本数据类型实现，所以无法持久化</li><li>订阅者离线重连，无法消费历史数据</li><li>消费端消费能力差时，会被强行断开</li></ul></li></ul>',84)]))}]]),t=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"01.数据类型、底层数据结构","lang":"zh-CN","frontmatter":{"title":"01.数据类型、底层数据结构","date":"2025-06-17T15:37:41.000Z","author":"Navyum","icon":"devicon-plain:redis","tags":["Redis","数据类型","底层数据结构"],"categories":["Redis"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"Redis 对象类型和编码： Redis键和值都是由redisObject定义 数据类型和底层数据结构的关系： Img Img 底层数据结构时间复杂度： String 对象的编码和数据结构： 特征： String 是最基本的 key-value 结构 最大长度：512M 编码规则：根据值的类型和长度 元素全部为整数， 且可以使用long表示，则 enc...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"01.数据类型、底层数据结构"}],["meta",{"property":"og:description","content":"Redis 对象类型和编码： Redis键和值都是由redisObject定义 数据类型和底层数据结构的关系： Img Img 底层数据结构时间复杂度： String 对象的编码和数据结构： 特征： String 是最基本的 key-value 结构 最大长度：512M 编码规则：根据值的类型和长度 元素全部为整数， 且可以使用long表示，则 enc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dd0269c80d09ab2c4aad73bb86ccac51.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"数据类型"}],["meta",{"property":"article:tag","content":"底层数据结构"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:37:41.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01.数据类型、底层数据结构\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dd0269c80d09ab2c4aad73bb86ccac51.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/7330435b36787440bcd02946846100bc.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/36c6cac8d092574f174c365bc500afc3.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0465ebdf55eb11ee155b9705e31b2187.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/65b08e759bd03482ea07d9ed7d2accb4.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/96479735034454430b778f12bfa9c44f.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c43a1bc5659c46cdce1d78c099b67876.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/a3a869f82501c94a62356d1a95cf3d90.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/dac02df0f5cd3a7a16de8fb2d2bd302a.png\\"],\\"datePublished\\":\\"2025-06-17T15:37:41.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":9.65,"words":2895},"filePathRelative":"常用软件/数据库/redis/01.数据类型、底层数据结构.md","localizedDate":"2025年6月17日","excerpt":"<h2>Redis 对象类型和编码：</h2>\\n<p>Redis键和值都是由<code>redisObject</code>定义</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>typedef struct redisObiect{</span></span>\\n<span class=\\"line\\"><span>\\t//类型</span></span>\\n<span class=\\"line\\"><span>\\tunsigned type:4;</span></span>\\n<span class=\\"line\\"><span>\\t//编码</span></span>\\n<span class=\\"line\\"><span>\\tunsigned encoding:4;</span></span>\\n<span class=\\"line\\"><span>\\t//指向底层数据结构的指针</span></span>\\n<span class=\\"line\\"><span>\\tvoid *ptr;</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},36995:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);