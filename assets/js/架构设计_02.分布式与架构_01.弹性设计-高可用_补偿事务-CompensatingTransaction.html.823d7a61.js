"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[68375],{36995:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,i]of t)n[e]=i;return n}},82624:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>l,data:()=>a});var i=n(6254);const p={},l=(0,n(36995).A)(p,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h1 id="补偿事务" tabindex="-1"><a class="header-anchor" href="#补偿事务"><span>补偿事务</span></a></h1><p>含义：</p><pre><code>为了保证业务上一致性（或者说努力将业务流程执行完成，达到最终状态）。如果业务流中某个步骤失败了（即执行不下去的时候），那么需要启动业务补偿。要么回滚到以前的服务调用（revert/cancel），要么不断重试保证所有的步骤都成功（retry）。\n</code></pre><p>ACID(酸) 和 BASE(碱)</p><p>ACID:</p><ul><li><p>原子性：整个事务中的所有操作，要么全部完成，要么全部失败，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p></li><li><p>隔离性：两个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时中间某一时刻的数据。两个事务不会发生交互。</p></li><li><p>持久性：在事务完成以后，该事务对数据库所做的更改便持久地保存在数据库之中，并不会被回滚。</p></li><li><p>强调 C BASE:</p></li><li><p>Basic Availability：基本可用。这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。</p></li><li><p>Soft-state：软状态。它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。</p></li><li><p>Eventual Consistency：最终一致性，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。</p></li><li><p>强调 A</p></li></ul><p>BASE 系统是允许或是容忍系统出现暂时性问题的，使得系统就能更有弹力。在分布式系统的世界里，故障是不可避免的，将故障处理当成&#39;功能写入代码中，这就是 Design for Failure。</p><p>BASE 系统保证在短时间内，就算是有数据不同步的风险，也应该允许新的交易可以发生，而后在业务上将可能出现问题的事务给处理掉，以保证最终的一致性。</p><p>业务的补偿：</p><p>业务的事务补偿通常需要一个工作流引擎。e.g. Airflow。 该引擎可以把把各式各样的服务给串联在一起，通过在工作流上做相应的业务补偿，整个过程设计成为最终一致性的。</p><p>补偿设计要点：</p><ul><li>起始状态定义。描述最终需要达到什么状态，如果不满足，需要回退到哪个状态。</li><li>状态拟合。系统可以通过一系列操作达到最终状态，如果不能达到，则通过回滚方式的补偿机制。</li><li>对于已经完成的事务进行整体修改，可以考虑成一个修改事务</li><li>服务方支持幂等性，并且在上游有重试机制。</li><li>通过高可用、稳定的工作流引擎来集中管理各个流程的状态。</li><li>设计好业务的反向补偿流程。即undo</li><li>补偿流程和业务强相关，基本无法通用。</li><li></li></ul>',12)]))}]]),a=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E8%A1%A5%E5%81%BF%E4%BA%8B%E5%8A%A1-CompensatingTransaction.html","title":"补偿事务","lang":"zh-CN","frontmatter":{"description":"补偿事务 含义： ACID(酸) 和 BASE(碱) ACID: 原子性：整个事务中的所有操作，要么全部完成，要么全部失败，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。 隔离性：两个事务的执行是互...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E8%A1%A5%E5%81%BF%E4%BA%8B%E5%8A%A1-CompensatingTransaction.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"补偿事务"}],["meta",{"property":"og:description","content":"补偿事务 含义： ACID(酸) 和 BASE(碱) ACID: 原子性：整个事务中的所有操作，要么全部完成，要么全部失败，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。 隔离性：两个事务的执行是互..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T10:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"补偿事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-15T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\",\\"url\\":\\"https://myblog.camscanner.top\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1749983452000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":2.79,"words":836},"filePathRelative":"架构设计/02.分布式与架构/01.弹性设计-高可用/补偿事务-CompensatingTransaction.md","localizedDate":"2025年6月15日","excerpt":"\\n<p>含义：</p>\\n<pre><code>为了保证业务上一致性（或者说努力将业务流程执行完成，达到最终状态）。如果业务流中某个步骤失败了（即执行不下去的时候），那么需要启动业务补偿。要么回滚到以前的服务调用（revert/cancel），要么不断重试保证所有的步骤都成功（retry）。\\n</code></pre>\\n<p>ACID(酸)  和  BASE(碱)</p>\\n<p>ACID:</p>\\n<ul>\\n<li>\\n<p>原子性：整个事务中的所有操作，要么全部完成，要么全部失败，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>\\n</li>\\n<li>\\n<p>一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p>\\n</li>\\n<li>\\n<p>隔离性：两个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时中间某一时刻的数据。两个事务不会发生交互。</p>\\n</li>\\n<li>\\n<p>持久性：在事务完成以后，该事务对数据库所做的更改便持久地保存在数据库之中，并不会被回滚。</p>\\n</li>\\n<li>\\n<p>强调 C\\nBASE:</p>\\n</li>\\n<li>\\n<p>Basic Availability：基本可用。这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。</p>\\n</li>\\n<li>\\n<p>Soft-state：软状态。它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。</p>\\n</li>\\n<li>\\n<p>Eventual Consistency：最终一致性，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。</p>\\n</li>\\n<li>\\n<p>强调 A</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);