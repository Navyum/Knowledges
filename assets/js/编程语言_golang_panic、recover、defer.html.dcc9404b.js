"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[40103],{20872:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>c});var r=a(6254);const n={},o=(0,a(36995).A)(n,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)("div",null,t[0]||(t[0]=[(0,r.Lk)("h2",{id:"panic从引发到终止的过程",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#panic从引发到终止的过程"},[(0,r.Lk)("span",null,"panic从引发到终止的过程：")])],-1),(0,r.Lk)("p",null,"某个函数中的某行代码有意或无意地引发了一个 panic。这时，初始的 panic 详情会被建立起来，并且该程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上，也就是调用栈中的上一级。这也意味着，此行代码所属函数的执行随即终止。紧接着，控制权并不会在此有片刻的停留，它又会立即转移至再上一级的调用代码处。控制权如此一级一级地沿着调用栈的反方向传播至顶端，也就是我们编写的最外层函数那里。这里的最外层函数指的是go函数，对于主 goroutine 来说就是main函数。但是控制权也不会停留在那里，而是被 Go 语言运行时系统收回。",-1),(0,r.Lk)("h2",{id:"defer",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#defer"},[(0,r.Lk)("span",null,"defer")])],-1),(0,r.Lk)("p",null,"延迟到什么时候呢？这要延迟到该语句所在的函数即将执行结束的那一刻，无论结束执行的原因是什么。",-1),(0,r.Lk)("p",null,"我们可以把这里的函数叫做defer函数或者延迟函数。注意，被延迟执行的是defer函数，而不是defer语句。",-1)]))}]]),c=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/panic%E3%80%81recover%E3%80%81defer.html","title":"panic、recover、defer","lang":"zh-CN","frontmatter":{"title":"panic、recover、defer","author":"navyum","date":"2025-06-21T22:25:45.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"panic从引发到终止的过程： 某个函数中的某行代码有意或无意地引发了一个 panic。这时，初始的 panic 详情会被建立起来，并且该程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上，也就是调用栈中的上一级。这也意味着，此行代码所属函数的执行随即终止。紧接着，控制权并不会在此有片刻的停留，它又会立即转移至再上一级的调用代码处。控制权如此...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/panic%E3%80%81recover%E3%80%81defer.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"panic、recover、defer"}],["meta",{"property":"og:description","content":"panic从引发到终止的过程： 某个函数中的某行代码有意或无意地引发了一个 panic。这时，初始的 panic 详情会被建立起来，并且该程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上，也就是调用栈中的上一级。这也意味着，此行代码所属函数的执行随即终止。紧接着，控制权并不会在此有片刻的停留，它又会立即转移至再上一级的调用代码处。控制权如此..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:25:45.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"panic、recover、defer\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-21T22:25:45.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.16,"words":347},"filePathRelative":"编程语言/golang/panic、recover、defer.md","localizedDate":"2025年6月21日","excerpt":"<h2>panic从引发到终止的过程：</h2>\\n<p>某个函数中的某行代码有意或无意地引发了一个 panic。这时，初始的 panic 详情会被建立起来，并且该程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上，也就是调用栈中的上一级。这也意味着，此行代码所属函数的执行随即终止。紧接着，控制权并不会在此有片刻的停留，它又会立即转移至再上一级的调用代码处。控制权如此一级一级地沿着调用栈的反方向传播至顶端，也就是我们编写的最外层函数那里。这里的最外层函数指的是go函数，对于主 goroutine 来说就是main函数。但是控制权也不会停留在那里，而是被 Go 语言运行时系统收回。</p>","autoDesc":true}')},36995:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,r]of t)a[e]=r;return a}}}]);