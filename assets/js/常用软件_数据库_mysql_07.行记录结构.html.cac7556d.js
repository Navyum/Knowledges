"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[93064],{36995:(e,c)=>{c.A=(e,c)=>{const i=e.__vccOpts||e;for(const[e,d]of c)i[e]=d;return i}},42003:(e,c,i)=>{i.r(c),i.d(c,{comp:()=>l,data:()=>t});var d=i(6254);const o={},l=(0,i(36995).A)(o,[["render",function(e,c){return(0,d.uX)(),(0,d.CE)("div",null,c[0]||(c[0]=[(0,d.Fv)('<h3 id="行记录分类" tabindex="-1"><a class="header-anchor" href="#行记录分类"><span>行记录分类：</span></a></h3><ul><li><code>Compact</code></li><li><code>Redundant</code>（ &lt; 5.0`）</li><li><code>Dynamic</code> （默认）</li><li><code>Compressed</code></li></ul><h3 id="compact-行记录结构" tabindex="-1"><a class="header-anchor" href="#compact-行记录结构"><span>Compact 行记录结构：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9b2478b80165fe95ae801cd4d5982c04.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li><code>记录的额外信息</code><ul><li><code>变长字段长度列表</code><ul><li>图示： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1ec8fea4a6afa3a70d2f1bf8276e00db.png" alt="Img" loading="lazy"></li><li>变长字段的定义： <ul><li><code>VARCHAR(M)</code></li><li><code>CAHR(M)</code> 但字符集为变长字符集(除了ascii、latin1、utf32之外都是，见文末的字符集编码)</li></ul></li><li>按照变长列的顺序倒序排列</li><li>使用1～2个字节，记录的是对应列<code>真实</code>占用的<code>字节数</code><ul><li><code>W</code> 表示当前字符集的最多字节数（utf8mb4 1～4）</li><li><code>VARCHAR(M)</code> 这种类型表示能存储最多<code>M</code>个<code>字符</code>（注意是字符不是字节）</li><li>该类型理论最多占用的字节数就是<code>M×W</code></li><li>实际占用字节数计做<code>L</code></li><li>结论： <ul><li>M×W &lt;= 255 <ul><li>用1个字节表示</li></ul></li><li>M×W &gt; 255，L &lt;= 127 <ul><li>用1个字节表示</li></ul></li><li>M×W &gt; 255，L &gt; 127 <ul><li>用2个字节表示</li></ul></li></ul></li></ul></li></ul></li><li><code>Null值列表</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1ec8fea4a6afa3a70d2f1bf8276e00db.png" alt="Img" loading="lazy"><ul><li>按照Null值列的顺序倒序排列</li><li>用bit位记录的是对应列是否为Null，需要是字节的整数，不足在高位补0</li></ul></li><li><code>记录头信息</code><ul><li>图示： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4b3c4c56bb5c16800c29412c82d72b87.png" alt="Img" loading="lazy"></li><li>结构如下：</li><li>|名称|大小（单位：bit）|描述| |:--😐:--😐:--😐 |<code>预留位1</code>|<code>1</code>|没有使用| |<code>预留位2</code>|<code>1</code>|没有使用| |<code>delete_mask</code>|<code>1</code>|标记该记录是否被删除| |<code>min_rec_mask</code>|<code>1</code>|B+树的<code>每层</code>非叶子节点中的最小记录都会添加该标记| |<code>n_owned</code>|<code>4</code>|表示当前Page directory分组拥有的记录数，仅分组内的最大记录存在该字段| |<code>heap_no</code>|<code>13</code>|表示当前记录在记录堆的位置信息| |<code>record_type</code>|<code>3</code>|表示当前记录的类型，<code>0</code>普通记录，<code>1</code>B+树非叶子节点记录，<code>2</code>最小记录，<code>3</code>最大记录| |<code>next_record</code>|<code>16</code>|表示下一条记录的相对位置|</li></ul></li></ul></li><li><code>记录的真实数据</code><ul><li><code>隐藏列</code><ul><li>图示： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b17a9f8ef15bd2165fff4b7aee1cf216.png" alt="Img" loading="lazy"></li><li>结构如下：</li><li>|列名|是否必须|占用空间|描述| |:--😐:--😐:--😐:--😐 |<code>row_id</code>|<strong>否</strong>|<code>6</code>字节|行ID，唯一标识一条记录| |<code>transaction_id</code>|是|<code>6</code>字节|事务ID| |<code>roll_pointer</code>|是|<code>7</code>字节|回滚指针，指向undo记录|</li><li>补充： <ul><li>** <code>InnoDB</code>主键的生成策略 **： <ol><li>优先使用用户自定义主键，否则2</li><li>选取一个<code>Unique</code>键作为主键，否则3</li><li>为表默认添加一个名为<code>row_id</code>的隐藏列作为主键</li></ol></li></ul></li></ul></li><li><code>用户数据列</code><ul><li>真实的用户数据</li></ul></li></ul></li></ul><h3 id="redundant-行格式" tabindex="-1"><a class="header-anchor" href="#redundant-行格式"><span>Redundant 行格式：</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8cb1f0df47d5a63210c00b3e5941f2e9.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h3 id="dynamic-行格式" tabindex="-1"><a class="header-anchor" href="#dynamic-行格式"><span>Dynamic 行格式：</span></a></h3><ul><li>行溢出时处理方式跟<code>Compact</code>存在差异，其他类似</li></ul><h3 id="compressed-行格式" tabindex="-1"><a class="header-anchor" href="#compressed-行格式"><span>Compressed 行格式：</span></a></h3><ul><li>行溢出时处理方式跟<code>Compact</code>存在差异，其他类似；多页面进行压缩算法，节省空间，但消耗更多CPU</li></ul><h3 id="行溢出" tabindex="-1"><a class="header-anchor" href="#行溢出"><span><code>行溢出</code>：</span></a></h3><ul><li><p><code>MySQL</code>对一条记录占用的最大存储空间是有限制的（<code>BLOB</code>、<code>TEXT</code>除外，但会发生行溢出）</p></li><li><p><code>所有列</code>（<code>不包括隐藏列和记录头信息</code>）占用的字节长度在语法上加起来不能超过<code>65535</code>个字节（否则语法报错），在使用上超过<code>8098</code>字节会发生行溢出（不影响使用，语法不报错）</p></li><li><p>VARCHAR(M)理论存储的字符数量：</p><ul><li>M 表示存储的字符个数，<strong>不是字节数</strong></li><li>ASCII编码, M的最大值： <ul><li>VARCHAR(M) NOT NULL, M最多为65533 = (65535-2)/1 <ul><li>字节数最多为65535个</li><li>字段值长度占2字节</li><li>ASCII每个字符需要1个字节</li></ul></li><li>VARCHAR(M) 没有定义NOT NULL, M最多为65532 = (65535-2-1)/1 <ul><li>字节数最多为65535个</li><li>字段值长度占2字节</li><li><code>NULL</code>值标识占1个字节</li><li>ASCII每个字符需要1个字节</li></ul></li></ul></li><li>不同编码下的M最大值： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d386014556933b4aac7822842ea0304c.png" alt="Img" loading="lazy"></li></ul></li><li><p><code>行溢出</code>：<code>单个记录</code>数据超过页的大小限制：</p><ul><li><strong>TEXT、BLOB类型的列在存储数据非常多的时候也会发生<code>行溢出</code></strong></li><li>例如：VARCHAR(65532) 65533约64KB，超过单页16KB（16384字节）的限制</li><li>行记录格式针对<code>行溢出</code>的方案： <ul><li>对于<code>Compact</code>、<code>Reduntant</code>，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的<code>前</code>768<code>个字节的数据</code>和<code>一个指向其他页的地址</code>，然后把剩下的数据存放到其他页中。</li><li>对于<code>Dynamic</code>、<code>Compressed</code>行格式，不会在记录的真实数据处存储数据的前<code>768</code>个字节，而是把<code>所有的字节都存储到其他页面</code>中，只在记录的真实数据处<code>存储其他页面的地址</code></li><li><code>Compact</code>、<code>Reduntant</code> 行溢出： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/6c44d94914129346c74045ec6ef2fc35.png" alt="Img" loading="lazy"></li><li><code>Dynamic</code>、<code>Compressed</code> 行溢出： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/ca704c255cdaab31f93fb7d58d2cbb05.png" alt="Img" loading="lazy"></li></ul></li><li><code>行溢出的临界点</code>计算： <ul><li>假设：表结构只有一个字段（行记录只有一列）</li><li>规定：一个页中至少存放两行记录</li><li>数据推导： <ul><li>每个记录至少27个额外字节；27 * 2</li><li>每个页的额外信息，136个字节</li><li>每个页最大16384字节</li></ul></li><li>公式： 136 + 2×(27 + n) &gt; 16384</li><li>求解后：n &gt; 8098</li><li>如果我们向一个行中存储了很大的数据(超过8098个字节)时，可能发生<code>行溢出</code>的现象</li></ul></li></ul></li></ul><h3 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集"><span>字符集：</span></a></h3><ul><li><p>MySQL有四个级别的字符集和比较规则：服务器级别、库级别、表级别、列级别</p></li><li><p>字符集 CHARSET：</p><ol><li>作用：某个字符范围的编码规则</li><li>查看命令：SHOW CHARSET</li><li>utf8mb3 （别名utf8）：阉割过的utf8字符集，只使用1～3个字节表示字符，包含常用字符</li><li>utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符，包含所有字符</li></ol></li><li><p>比较规则 COLLATION：</p><ol><li>用来做排序和比较大小</li><li>查看命令：SHOW COLLATION [LIKE 匹配的模式]</li></ol></li><li><p>字符集占用字节数： |字符集名称|Maxlen|备注| |:--😐:--😐:--😐 |<code>ascii</code>|<code>1</code>|128个字符| |<code>latin1</code>/<code>ISO 8859-1字符集</code>|<code>1</code>|256个字符| |<code>gb2312</code>|<code>1～2</code>|兼容ASCII,ASCII占1个字节，其他2字节，| |<code>gbk</code>|<code>1～2</code>|对GB2312字符集的扩充| |<code>Unicode字符集</code>|<code>1～4</code>|收录所有能想到的字符| |<code>utf8</code>|<code>1～4</code>|unicode字符集的一种编码方式| |<code>utf16</code>|<code>2、4</code>|unicode字符集的一种编码方式| |<code>utf32</code>|<code>4</code>|unicode字符集的一种编码方式|</p></li></ul>',15)]))}]]),t=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/07.%E8%A1%8C%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%84.html","title":"07.行记录结构","lang":"zh-CN","frontmatter":{"title":"07.行记录结构","date":"2025-06-17T15:21:03.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","行记录"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"行记录分类： Compact Redundant（ < 5.0`） Dynamic （默认） Compressed Compact 行记录结构： ImgImg 记录的额外信息 变长字段长度列表 图示： Img 变长字段的定义： VARCHAR(M) CAHR(M) 但字符集为变长字符集(除了ascii、latin1、utf32之外都是，见文末的字符集编...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/07.%E8%A1%8C%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"07.行记录结构"}],["meta",{"property":"og:description","content":"行记录分类： Compact Redundant（ < 5.0`） Dynamic （默认） Compressed Compact 行记录结构： ImgImg 记录的额外信息 变长字段长度列表 图示： Img 变长字段的定义： VARCHAR(M) CAHR(M) 但字符集为变长字符集(除了ascii、latin1、utf32之外都是，见文末的字符集编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9b2478b80165fe95ae801cd4d5982c04.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"行记录"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:21:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07.行记录结构\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9b2478b80165fe95ae801cd4d5982c04.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1ec8fea4a6afa3a70d2f1bf8276e00db.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/1ec8fea4a6afa3a70d2f1bf8276e00db.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4b3c4c56bb5c16800c29412c82d72b87.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b17a9f8ef15bd2165fff4b7aee1cf216.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/8cb1f0df47d5a63210c00b3e5941f2e9.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d386014556933b4aac7822842ea0304c.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/6c44d94914129346c74045ec6ef2fc35.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/ca704c255cdaab31f93fb7d58d2cbb05.png\\"],\\"datePublished\\":\\"2025-06-17T15:21:03.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":5.12,"words":1536},"filePathRelative":"常用软件/数据库/mysql/07.行记录结构.md","localizedDate":"2025年6月17日","excerpt":"<h3>行记录分类：</h3>\\n<ul>\\n<li><code>Compact</code></li>\\n<li><code>Redundant</code>（ &lt; 5.0`）</li>\\n<li><code>Dynamic</code> （默认）</li>\\n<li><code>Compressed</code></li>\\n</ul>\\n<h3>Compact 行记录结构：</h3>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/9b2478b80165fe95ae801cd4d5982c04.png\\" alt=\\"Img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Img</figcaption></figure>","autoDesc":true}')}}]);