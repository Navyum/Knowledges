"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[80150],{36995:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,t]of i)e[l]=t;return e}},59691:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>o,data:()=>a});var t=e(6254);const n={},o=(0,e(36995).A)(n,[["render",function(l,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h3 id="mysql逻辑架构图" tabindex="-1"><a class="header-anchor" href="#mysql逻辑架构图"><span>mysql逻辑架构图</span></a></h3><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2ef23a6d2026c74ef182788fb9ff7ccc.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="mysql从架构角度可以分为" tabindex="-1"><a class="header-anchor" href="#mysql从架构角度可以分为"><span>MySQL从架构角度可以分为：</span></a></h3><ul><li><code>Server层</code>： <ol><li>该层实现所有跨存储引擎的功能。e.g. 存储过程、触发器、视图等</li><li><code>连接器</code>： <ul><li>职责：连接器负责跟客户端建立连接、获取权限、维持和管理连接</li><li>查看当前的连接状态: show processlist</li><li>连接： <ul><li>生命周期：一个用户成功建立tcp连接后，该连接生效直到连接断开（修改用户权限，也不会影响已经存在连接的权限）</li><li>长连接：连接成功后，多个请求，使用同一个连接</li><li>短连接：每次执行完很少的几次查询就断开连接，下次查询再重建</li></ul></li><li>MySQL在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放，如果连接长时间不释放，可能导致OOM</li></ul></li><li><code>查询缓存</code>（不建议开启）： <ul><li>原理：MySQL拿到一个查询请求后，会先去查询缓存查询。key 是查询的语句，value 是查询的结果。命中直接返回，否则继续后面的执行阶段。</li><li>不建议开启查询缓存的原因： <ul><li>查询缓存失效非常频繁，命中率非常低（只要表有更新，则该表所有查询缓存失效）</li><li>除非该表是静态的配置表，改动频率非常低</li></ul></li></ul></li><li><code>分析器</code>（词法、语法分析）： <ul><li>词法分析： 将sql 拆解成单词</li><li>语法分析： 根据语法规则判断sql是否满足语法要求</li></ul></li><li><code>优化器</code>（优化sql，确定执行方案）： <ul><li>存在多个索引时，决定使用哪个索引</li><li>多个表join时，决定各个表的连接顺序</li><li>优化器阶段完成后，这个语句的执行方案就确定下来</li></ul></li><li><code>执行器</code>（检查表权限，与引擎交互）： <ul><li>先权限检查，检查对这个表 T 有没有执行查询的权限</li><li>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</li></ul></li><li>内置函数： <ul><li>例如:<code>sum</code>、<code>distinct</code>等函数</li></ul></li></ol></li><li><code>存储引擎层</code>： <ul><li>插件式设计，存储引擎层负责数据的存储和提取</li><li>常见的引擎： <ul><li>InnoDB</li><li>MyISAM</li><li>Memory</li></ul></li></ul></li></ul>',4)]))}]]),a=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/01.Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.html","title":"01.Mysql逻辑架构","lang":"zh-CN","frontmatter":{"title":"01.Mysql逻辑架构","date":"2025-06-17T15:20:23.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","逻辑架构"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"mysql逻辑架构图 图片图片 MySQL从架构角度可以分为： Server层： 该层实现所有跨存储引擎的功能。e.g. 存储过程、触发器、视图等 连接器： 职责：连接器负责跟客户端建立连接、获取权限、维持和管理连接 查看当前的连接状态: show processlist 连接： 生命周期：一个用户成功建立tcp连接后，该连接生效直到连接断开（修改用户...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/01.Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"01.Mysql逻辑架构"}],["meta",{"property":"og:description","content":"mysql逻辑架构图 图片图片 MySQL从架构角度可以分为： Server层： 该层实现所有跨存储引擎的功能。e.g. 存储过程、触发器、视图等 连接器： 职责：连接器负责跟客户端建立连接、获取权限、维持和管理连接 查看当前的连接状态: show processlist 连接： 生命周期：一个用户成功建立tcp连接后，该连接生效直到连接断开（修改用户..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2ef23a6d2026c74ef182788fb9ff7ccc.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"逻辑架构"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:20:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01.Mysql逻辑架构\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2ef23a6d2026c74ef182788fb9ff7ccc.png\\"],\\"datePublished\\":\\"2025-06-17T15:20:23.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"常用软件/数据库/mysql/01.Mysql逻辑架构.md","localizedDate":"2025年6月17日","excerpt":"<h3>mysql逻辑架构图</h3>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/2ef23a6d2026c74ef182788fb9ff7ccc.png\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<h3>MySQL从架构角度可以分为：</h3>\\n<ul>\\n<li><code>Server层</code>：\\n<ol>\\n<li>该层实现所有跨存储引擎的功能。e.g. 存储过程、触发器、视图等</li>\\n<li><code>连接器</code>：\\n<ul>\\n<li>职责：连接器负责跟客户端建立连接、获取权限、维持和管理连接</li>\\n<li>查看当前的连接状态: show processlist</li>\\n<li>连接：\\n<ul>\\n<li>生命周期：一个用户成功建立tcp连接后，该连接生效直到连接断开（修改用户权限，也不会影响已经存在连接的权限）</li>\\n<li>长连接：连接成功后，多个请求，使用同一个连接</li>\\n<li>短连接：每次执行完很少的几次查询就断开连接，下次查询再重建</li>\\n</ul>\\n</li>\\n<li>MySQL在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放，如果连接长时间不释放，可能导致OOM</li>\\n</ul>\\n</li>\\n<li><code>查询缓存</code>（不建议开启）：\\n<ul>\\n<li>原理：MySQL拿到一个查询请求后，会先去查询缓存查询。key 是查询的语句，value 是查询的结果。命中直接返回，否则继续后面的执行阶段。</li>\\n<li>不建议开启查询缓存的原因：\\n<ul>\\n<li>查询缓存失效非常频繁，命中率非常低（只要表有更新，则该表所有查询缓存失效）</li>\\n<li>除非该表是静态的配置表，改动频率非常低</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><code>分析器</code>（词法、语法分析）：\\n<ul>\\n<li>词法分析： 将sql 拆解成单词</li>\\n<li>语法分析： 根据语法规则判断sql是否满足语法要求</li>\\n</ul>\\n</li>\\n<li><code>优化器</code>（优化sql，确定执行方案）：\\n<ul>\\n<li>存在多个索引时，决定使用哪个索引</li>\\n<li>多个表join时，决定各个表的连接顺序</li>\\n<li>优化器阶段完成后，这个语句的执行方案就确定下来</li>\\n</ul>\\n</li>\\n<li><code>执行器</code>（检查表权限，与引擎交互）：\\n<ul>\\n<li>先权限检查，检查对这个表 T 有没有执行查询的权限</li>\\n<li>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</li>\\n</ul>\\n</li>\\n<li>内置函数：\\n<ul>\\n<li>例如:<code>sum</code>、<code>distinct</code>等函数</li>\\n</ul>\\n</li>\\n</ol>\\n</li>\\n<li><code>存储引擎层</code>：\\n<ul>\\n<li>插件式设计，存储引擎层负责数据的存储和提取</li>\\n<li>常见的引擎：\\n<ul>\\n<li>InnoDB</li>\\n<li>MyISAM</li>\\n<li>Memory</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);