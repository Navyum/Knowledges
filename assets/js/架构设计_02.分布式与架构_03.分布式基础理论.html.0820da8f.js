"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[89838],{36995:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,t]of a)i[e]=t;return i}},54363:(e,a,i)=>{i.r(a),i.d(a,{comp:()=>n,data:()=>c});var t=i(6254);const l={},n=(0,i(36995).A)(l,[["render",function(e,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h2 id="cap定理-主要应用于分布式系统" tabindex="-1"><a class="header-anchor" href="#cap定理-主要应用于分布式系统"><span>CAP定理：（主要应用于分布式系统）</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义：</span></a></h3><ul><li>C <code>一致性</code>（Consistency）：每次读取要么获得最近写入的数据，要么获得一个错误</li><li>A <code>可用性</code>（Availability）：每次请求都能获得一个（非错误）响应，但不保证返回的是最新写入的数据</li><li>P <code>分区容忍</code>（Partition tolerance）：在网络分区的情况下，系统仍继续运行。即使存在网络延迟等分区带来的问题。</li></ul><h3 id="cap的目标和核心" tabindex="-1"><a class="header-anchor" href="#cap的目标和核心"><span>CAP的目标和核心：</span></a></h3><ul><li>在分布式系统中，尤其是在网络分区发生时，不能同时保证一致性、可用性和分区容忍性。只能选择其中的两个特性进行优化。</li></ul><h3 id="cap常见组合" tabindex="-1"><a class="header-anchor" href="#cap常见组合"><span>CAP常见组合：</span></a></h3><ul><li><code>CA</code>：关注一致性和可用性（单体应用系统） <ul><li>它需要<code>非常严格的全体一致的协议</code>，比如“两阶段提交”（2PC）。</li><li>CA系统<code>不能容忍网络错误或节点错误</code>。一旦出现这样的问题，整个系统就会拒绝写请求，因为它并不知道对面的那个结点是否挂掉了，还是只是网络问题。唯一安全的做法就是把自己变成只读的。</li><li>举例：MySQL、单数据中心的应用系统</li></ul></li><li><code>CP</code>：关注一致性和分区容忍性（分布式协调系统） <ul><li>它关注的是系统里大多数人的一致性协议，比如：Paxos算法（Quorum类的算法）。</li><li>这样的系统只需要<code>保证大多数结点数据一致</code>，而少数的结点会在没有同步到最新版本的数据时变成不可用的状态。从而提供一部分的可用性。</li><li>举例：HBase、Zookeeper</li></ul></li><li><code>AP</code>：关注可用性和分区容忍性 （最终一致性系统） <ul><li>这样的系统不能达成一致性，会尽量响应请求，即使数据不一致。</li><li>这样的系统需要维护数据版本，通过版本比较，给出数据冲突。</li><li>举例：DNS、Dynamo</li></ul></li></ul><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充：</span></a></h3><ul><li>CAP定理中的一致性与ACID数据库事务中的一致性截然不同</li><li>CAP关注的粒度是<code>分布式系统的数据</code>，ACID关注的是<code>事务</code></li><li>CAP是忽略网络延迟的??? <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/4d458447f036536da33d56974bf40ba6.png" width="60%"><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0f6991da2732cd189cf6843e04ea61e7.png" width="60%"></li></ul><h2 id="acid属性-主要应用于传统的单机数据库、事务" tabindex="-1"><a class="header-anchor" href="#acid属性-主要应用于传统的单机数据库、事务"><span>ACID属性：（主要应用于传统的单机数据库、事务）</span></a></h2><h3 id="目标和核心" tabindex="-1"><a class="header-anchor" href="#目标和核心"><span>目标和核心：</span></a></h3><ul><li>是数据库管理系统为了保证事务的正确性而提出来的一个理论</li></ul><h3 id="四个约束" tabindex="-1"><a class="header-anchor" href="#四个约束"><span>四个约束：</span></a></h3><ul><li><p>A<code>原子性</code> (Atomicity)：</p><ul><li>一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul></li><li><p>C<code>一致性</code>（Consistency）：</p><ul><li>在事务开始之前和事务结束以后，数据库的完整性没有被破坏</li></ul></li><li><p>I<code>隔离性</code> (Isolation)：</p><ul><li>数据库允许多个并发事务同时对数据进行读写和修改的能力。隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</li></ul></li><li><p>D<code>持久化</code>（Durability）：</p><ul><li>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul></li></ul><h3 id="与cap对比" tabindex="-1"><a class="header-anchor" href="#与cap对比"><span>与CAP对比：</span></a></h3><ul><li>ACID中的A（Atomicity）和CAP中的A（Availability）意义完全不同</li><li>ACID中的C和CAP中的C名称虽然都是一致性，但含义也完全不一样。ACID中的C是指数据库的数据完整性，而CAP中的C是指分布式节点中的数据一致性。</li><li>ACID的应用场景是<code>数据库事务</code>，CAP关注的是<code>分布式系统数据读写</code></li></ul><h2 id="base理论-对acid属性的一种放松" tabindex="-1"><a class="header-anchor" href="#base理论-对acid属性的一种放松"><span>BASE理论：（对ACID属性的一种放松）</span></a></h2><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义：</span></a></h3><ul><li>BASE理论是对ACID属性的一种放松，选择最终一致性；适用于大规模分布式系统。</li></ul><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性：</span></a></h3><ul><li>BA<code>基本可用</code>（Basically Available）： <ul><li>系统在出现故障时，仍能够基本可用</li></ul></li><li>S<code>软状态</code>（Soft State）： <ul><li>系统状态可以在不同节点之间不同步</li></ul></li><li>E<code>最终一致性</code>（Eventual Consistency）： <ul><li>系统中的数据最终会达到一致</li></ul></li></ul><h3 id="目标和核心-1" tabindex="-1"><a class="header-anchor" href="#目标和核心-1"><span>目标和核心：</span></a></h3><ul><li>BASE理论强调在大规模分布式系统中，*** 通过牺牲强一致性，来换取系统的高可用性和分区容忍性***。(AP系统)</li></ul>',23)]))}]]),c=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/03.%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA.html","title":"03.分布式基础理论","lang":"zh-CN","frontmatter":{"title":"03.分布式基础理论","date":"2025-06-17T14:38:25.000Z","author":"Navyum","tags":["架构设计","基础理论","CAP定理","ACID","BASE"],"categories":["分布式"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"CAP定理：（主要应用于分布式系统） 定义： C 一致性（Consistency）：每次读取要么获得最近写入的数据，要么获得一个错误 A 可用性（Availability）：每次请求都能获得一个（非错误）响应，但不保证返回的是最新写入的数据 P 分区容忍（Partition tolerance）：在网络分区的情况下，系统仍继续运行。即使存在网络延迟等分...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/03.%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"03.分布式基础理论"}],["meta",{"property":"og:description","content":"CAP定理：（主要应用于分布式系统） 定义： C 一致性（Consistency）：每次读取要么获得最近写入的数据，要么获得一个错误 A 可用性（Availability）：每次请求都能获得一个（非错误）响应，但不保证返回的是最新写入的数据 P 分区容忍（Partition tolerance）：在网络分区的情况下，系统仍继续运行。即使存在网络延迟等分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"架构设计"}],["meta",{"property":"article:tag","content":"基础理论"}],["meta",{"property":"article:tag","content":"CAP定理"}],["meta",{"property":"article:tag","content":"ACID"}],["meta",{"property":"article:tag","content":"BASE"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:38:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03.分布式基础理论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:38:25.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":3.91,"words":1172},"filePathRelative":"架构设计/02.分布式与架构/03.分布式基础理论.md","localizedDate":"2025年6月17日","excerpt":"<h2>CAP定理：（主要应用于分布式系统）</h2>\\n<h3>定义：</h3>\\n<ul>\\n<li>C <code>一致性</code>（Consistency）：每次读取要么获得最近写入的数据，要么获得一个错误</li>\\n<li>A <code>可用性</code>（Availability）：每次请求都能获得一个（非错误）响应，但不保证返回的是最新写入的数据</li>\\n<li>P <code>分区容忍</code>（Partition tolerance）：在网络分区的情况下，系统仍继续运行。即使存在网络延迟等分区带来的问题。</li>\\n</ul>\\n<h3>CAP的目标和核心：</h3>\\n","autoDesc":true}')}}]);