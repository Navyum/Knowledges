"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[94227],{36995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,i]of e)a[t]=i;return a}},61580:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>n,data:()=>l});var i=a(6254);const r={},n=(0,a(36995).A)(r,[["render",function(t,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h2 id="模型" tabindex="-1"><a class="header-anchor" href="#模型"><span>模型：</span></a></h2><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/16baf817c09d527137f3568b6ab565a9.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><ul><li><p>Crash-stop Failures：</p><ul><li>一旦发生故障，节点就停止提供服务，并且不会恢复。</li><li>这种故障模型中的节点都按照正确的逻辑运行，可能宕机，可能网络中断，可能延迟增加，但<code>结果总是正确</code>的；</li></ul></li><li><p>Crash-recovery Failures：</p><ul><li>相对于crash-stop failures，这种故障模型允许节点在故障发生后恢复，恢复时可能需要一些持久化的数据恢复状态（Omission Failures）；</li><li>常见容错算法：Paxos、Raft</li></ul></li><li><p>Byzantine Failures：</p><ul><li>这种故障模型需要处理拜占庭问题，因此也是最难应对的，存在可信问题</li><li>不仅仅节点宕机或网络故障会发生，节点还有可能返回随机或恶意的结果，甚至有可能影响其他节点的正常运行</li><li>常见容错算法：PBFT（Practical Byzantine Fault Tolerance）、POW（工作量证明Proof-of-Work，区块链）</li></ul></li></ul>',3)]))}]]),l=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/12.%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%85%E9%9A%9C%E6%A8%A1%E5%9E%8B.html","title":"12.分布式故障模型","lang":"zh-CN","frontmatter":{"title":"12.分布式故障模型","date":"2025-06-17T14:44:29.000Z","author":"Navyum","tags":["架构设计","分布式故障模型"],"categories":["分布式"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"模型： ImgImg Crash-stop Failures： 一旦发生故障，节点就停止提供服务，并且不会恢复。 这种故障模型中的节点都按照正确的逻辑运行，可能宕机，可能网络中断，可能延迟增加，但结果总是正确的； Crash-recovery Failures： 相对于crash-stop failures，这种故障模型允许节点在故障发生后恢复，恢复时...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/12.%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%85%E9%9A%9C%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"12.分布式故障模型"}],["meta",{"property":"og:description","content":"模型： ImgImg Crash-stop Failures： 一旦发生故障，节点就停止提供服务，并且不会恢复。 这种故障模型中的节点都按照正确的逻辑运行，可能宕机，可能网络中断，可能延迟增加，但结果总是正确的； Crash-recovery Failures： 相对于crash-stop failures，这种故障模型允许节点在故障发生后恢复，恢复时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/16baf817c09d527137f3568b6ab565a9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"架构设计"}],["meta",{"property":"article:tag","content":"分布式故障模型"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:44:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12.分布式故障模型\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/16baf817c09d527137f3568b6ab565a9.png\\"],\\"datePublished\\":\\"2025-06-17T14:44:29.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"架构设计/02.分布式与架构/12.分布式故障模型.md","localizedDate":"2025年6月17日","excerpt":"<h2>模型：</h2>\\n<figure><img src=\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/16baf817c09d527137f3568b6ab565a9.png\\" alt=\\"Img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Img</figcaption></figure>\\n<ul>\\n<li>\\n<p>Crash-stop Failures：</p>\\n<ul>\\n<li>一旦发生故障，节点就停止提供服务，并且不会恢复。</li>\\n<li>这种故障模型中的节点都按照正确的逻辑运行，可能宕机，可能网络中断，可能延迟增加，但<code>结果总是正确</code>的；</li>\\n</ul>\\n</li>\\n<li>\\n<p>Crash-recovery Failures：</p>\\n<ul>\\n<li>相对于crash-stop failures，这种故障模型允许节点在故障发生后恢复，恢复时可能需要一些持久化的数据恢复状态（Omission Failures）；</li>\\n<li>常见容错算法：Paxos、Raft</li>\\n</ul>\\n</li>\\n<li>\\n<p>Byzantine Failures：</p>\\n<ul>\\n<li>这种故障模型需要处理拜占庭问题，因此也是最难应对的，存在可信问题</li>\\n<li>不仅仅节点宕机或网络故障会发生，节点还有可能返回随机或恶意的结果，甚至有可能影响其他节点的正常运行</li>\\n<li>常见容错算法：PBFT（Practical Byzantine Fault Tolerance）、POW（工作量证明Proof-of-Work，区块链）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);