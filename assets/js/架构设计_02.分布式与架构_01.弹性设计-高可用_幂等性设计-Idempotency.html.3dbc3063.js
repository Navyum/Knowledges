"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[46339],{36995:(e,t)=>{t.A=(e,t)=>{const p=e.__vccOpts||e;for(const[e,n]of t)p[e]=n;return p}},76610:(e,t,p)=>{p.r(t),p.d(t,{comp:()=>a,data:()=>E});var n=p(6254);const o={},a=(0,p(36995).A)(o,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,t[0]||(t[0]=[(0,n.Fv)('<h1 id="幂等性设计-idempotency" tabindex="-1"><a class="header-anchor" href="#幂等性设计-idempotency"><span>幂等性设计-Idempotency</span></a></h1><p>概念：</p><p>幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来表达就是：f(x) = f(f(x))。<strong>注解：不强调获取的结果一致，而是对资源副作用是否一致。</strong></p><p>存在的原因：</p><p>系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Timeout）。前两者都是明确的状态，而超时则是完全不知道是什么状态。</p><p>解决方案：</p><p>a. 下游系统提供相应的查询接口。上游系统在 timeout 后去查询一下。如果查到了，就表明已经做了，成功了就不用做了，失败了就走失败流程。</p><p>b. 下游系统通过幂等性的方式。上游系统只管重试，下游系统保证一次和多次的请求结果是一样的。</p><p>幂等性方法：</p><pre><code>1. 全剧唯一ID\n    1. uuid\n    2. 雪花算法 snowflake\n    3. 数据库自增id\n</code></pre><p>幂等性存储实现：</p><p>新建： insert into … values … on DUPLICATE KEY UPDATE …</p><p>更新：update table set status = “paid” where id = xxx and status = “unpaid”</p><p>其他：mvvc 通过版本号控制</p>',14)]))}]]),E=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E5%B9%82%E7%AD%89%E6%80%A7%E8%AE%BE%E8%AE%A1-Idempotency.html","title":"幂等性设计-Idempotency","lang":"zh-CN","frontmatter":{"description":"幂等性设计-Idempotency 概念： 幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来表达就是：f(x) = f(f(x))。注解：不强调获取的结果一致，而是对资源副作用是否一致。 存在的原因： 系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Ti...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E5%B9%82%E7%AD%89%E6%80%A7%E8%AE%BE%E8%AE%A1-Idempotency.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"幂等性设计-Idempotency"}],["meta",{"property":"og:description","content":"幂等性设计-Idempotency 概念： 幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来表达就是：f(x) = f(f(x))。注解：不强调获取的结果一致，而是对资源副作用是否一致。 存在的原因： 系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Ti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T10:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"幂等性设计-Idempotency\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-15T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\",\\"url\\":\\"https://myblog.camscanner.top\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1749983452000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"架构设计/02.分布式与架构/01.弹性设计-高可用/幂等性设计-Idempotency.md","localizedDate":"2025年6月15日","excerpt":"\\n<p>概念：</p>\\n<p>幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来表达就是：f(x) = f(f(x))。<strong>注解：不强调获取的结果一致，而是对资源副作用是否一致。</strong></p>\\n<p>存在的原因：</p>\\n<p>系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Timeout）。前两者都是明确的状态，而超时则是完全不知道是什么状态。</p>\\n<p>解决方案：</p>\\n<p>a. 下游系统提供相应的查询接口。上游系统在 timeout 后去查询一下。如果查到了，就表明已经做了，成功了就不用做了，失败了就走失败流程。</p>","autoDesc":true}')}}]);