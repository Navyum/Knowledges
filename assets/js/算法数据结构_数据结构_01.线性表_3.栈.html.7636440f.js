"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[86483],{5270:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>r,data:()=>l});var n=a(6254);const i={},r=(0,a(36995).A)(i,[["render",function(t,e){return(0,n.uX)(),(0,n.CE)("div",null,e[0]||(e[0]=[(0,n.Fv)('<h2 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack"><span>栈 Stack：</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念：</span></a></h3><ul><li>栈（Stack）是一种线性表数据结构</li><li>遵循<code>后进先出</code>（LIFO，Last In First Out）原则，<code>只能在栈顶进行添加和删除操作</code></li></ul><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作：</span></a></h3><ul><li>push （入栈）</li><li>pop （出栈）</li><li>peek （仅查看）</li></ul><h3 id="栈的应用" tabindex="-1"><a class="header-anchor" href="#栈的应用"><span>栈的应用：</span></a></h3><ul><li>函数调用栈</li><li>表达式求值</li><li>回溯算法</li></ul><h3 id="图解" tabindex="-1"><a class="header-anchor" href="#图解"><span>图解：</span></a></h3><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/c5cd48eae0339cb5a0bd8e920e8b321d.png" width="60%">',9)]))}]]),l=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/3.%E6%A0%88.html","title":"3.栈","lang":"zh-CN","frontmatter":{"title":"3.栈","date":"2025-06-17T14:51:11.000Z","author":"Navyum","tags":["栈"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"栈 Stack： 概念： 栈（Stack）是一种线性表数据结构 遵循后进先出（LIFO，Last In First Out）原则，只能在栈顶进行添加和删除操作 操作： push （入栈） pop （出栈） peek （仅查看） 栈的应用： 函数调用栈 表达式求值 回溯算法 图解：","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/3.%E6%A0%88.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"3.栈"}],["meta",{"property":"og:description","content":"栈 Stack： 概念： 栈（Stack）是一种线性表数据结构 遵循后进先出（LIFO，Last In First Out）原则，只能在栈顶进行添加和删除操作 操作： push （入栈） pop （出栈） peek （仅查看） 栈的应用： 函数调用栈 表达式求值 回溯算法 图解："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"栈"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:51:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:51:11.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":0.37,"words":110},"filePathRelative":"算法数据结构/数据结构/01.线性表/3.栈.md","localizedDate":"2025年6月17日","excerpt":"<h2>栈 Stack：</h2>\\n<h3>概念：</h3>\\n<ul>\\n<li>栈（Stack）是一种线性表数据结构</li>\\n<li>遵循<code>后进先出</code>（LIFO，Last In First Out）原则，<code>只能在栈顶进行添加和删除操作</code></li>\\n</ul>\\n<h3>操作：</h3>\\n<ul>\\n<li>push  （入栈）</li>\\n<li>pop   （出栈）</li>\\n<li>peek  （仅查看）</li>\\n</ul>\\n<h3>栈的应用：</h3>\\n<ul>\\n<li>函数调用栈</li>\\n<li>表达式求值</li>\\n<li>回溯算法</li>\\n</ul>","autoDesc":true}')},36995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,n]of e)a[t]=n;return a}}}]);