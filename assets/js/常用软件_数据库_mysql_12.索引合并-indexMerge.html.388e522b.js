"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[61492],{36995:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,n]of i)t[e]=n;return t}},87131:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>a,data:()=>r});var n=t(6254);const l={},a=(0,t(36995).A)(l,[["render",function(e,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h3 id="索引合并-index-merge" tabindex="-1"><a class="header-anchor" href="#索引合并-index-merge"><span>索引合并 index merge：</span></a></h3><ul><li>含义：使用到<code>多个索引</code>来完成一次查询的执行方法</li><li>explain 中 <code>type</code> 会显示<code>index merge</code></li></ul><h3 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想：</span></a></h3><ul><li>读多个二级索引的操作是顺序IO（索引是有序的），只用一个索引，但是做回表操作是随机IO</li><li>索引合并优点： <ul><li>可以减少回表次数</li><li>基于有序的主键回表 Rowid Ordered Retrieval，简称ROR。</li></ul></li></ul><h3 id="索引合并分类" tabindex="-1"><a class="header-anchor" href="#索引合并分类"><span>索引合并分类：</span></a></h3><h4 id="intersection合并-交集" tabindex="-1"><a class="header-anchor" href="#intersection合并-交集"><span>Intersection合并（交集）：</span></a></h4><ul><li><strong>条件中有多个<code>AND</code></strong></li><li>使用条件： <ul><li>二级索引列需要是等值匹配的情况；对于联合索引，索引中的每个列都必须等值匹配，不能只匹配部分列</li><li>主键列可以是范围匹配（只有在这种情况下根据二级索引查询出的结果集是按照主键值排序的）</li></ul></li><li><ul><li>最终是否会使用索引合并，还是得看优化器的成本计算结果</li></ul></li></ul><h4 id="union合并" tabindex="-1"><a class="header-anchor" href="#union合并"><span>Union合并：</span></a></h4><ul><li><strong>条件中多个OR</strong></li><li>使用条件： <ul><li>二级索引列需要是等值匹配的情况；对于联合索引，索引中的每个列都必须等值匹配，不能只匹配部分列</li><li>主键列可以是范围匹配</li><li>使用<code>Intersection</code>索引合并的搜索条件</li></ul></li></ul><h4 id="sort-union合并" tabindex="-1"><a class="header-anchor" href="#sort-union合并"><span>Sort-Union合并：</span></a></h4><ul><li>条件中多个OR</li><li>不强求所有条件都是等值匹配</li><li>具体做法： <ul><li>先按照多个二级索引记录找到对应的多个主键集合，分别进行主键排序</li><li>再按照<code>Union</code>索引合并方式执行</li></ul></li></ul>',11)]))}]]),r=JSON.parse('{"path":"/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/12.%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6-indexMerge.html","title":"12.索引合并-indexMerge","lang":"zh-CN","frontmatter":{"title":"12.索引合并-indexMerge","date":"2025-06-17T15:21:43.000Z","author":"Navyum","icon":"fontisto:mysql","tags":["Mysql","索引合并"],"categories":["Mysql"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"索引合并 index merge： 含义：使用到多个索引来完成一次查询的执行方法 explain 中 type 会显示index merge 核心思想： 读多个二级索引的操作是顺序IO（索引是有序的），只用一个索引，但是做回表操作是随机IO 索引合并优点： 可以减少回表次数 基于有序的主键回表 Rowid Ordered Retrieval，简称ROR...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/12.%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6-indexMerge.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"12.索引合并-indexMerge"}],["meta",{"property":"og:description","content":"索引合并 index merge： 含义：使用到多个索引来完成一次查询的执行方法 explain 中 type 会显示index merge 核心思想： 读多个二级索引的操作是顺序IO（索引是有序的），只用一个索引，但是做回表操作是随机IO 索引合并优点： 可以减少回表次数 基于有序的主键回表 Rowid Ordered Retrieval，简称ROR..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T09:35:21.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"索引合并"}],["meta",{"property":"article:published_time","content":"2025-06-17T15:21:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T09:35:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12.索引合并-indexMerge\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T15:21:43.000Z\\",\\"dateModified\\":\\"2025-06-23T09:35:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750671321000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":2,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"常用软件/数据库/mysql/12.索引合并-indexMerge.md","localizedDate":"2025年6月17日","excerpt":"<h3>索引合并 index merge：</h3>\\n<ul>\\n<li>含义：使用到<code>多个索引</code>来完成一次查询的执行方法</li>\\n<li>explain 中 <code>type</code> 会显示<code>index merge</code></li>\\n</ul>\\n<h3>核心思想：</h3>\\n<ul>\\n<li>读多个二级索引的操作是顺序IO（索引是有序的），只用一个索引，但是做回表操作是随机IO</li>\\n<li>索引合并优点：\\n<ul>\\n<li>可以减少回表次数</li>\\n<li>基于有序的主键回表 Rowid Ordered Retrieval，简称ROR。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);