"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[92999],{36995:(e,a)=>{a.A=(e,a)=>{const d=e.__vccOpts||e;for(const[e,t]of a)d[e]=t;return d}},83207:(e,a,d)=>{d.r(a),d.d(a,{comp:()=>n,data:()=>o});var t=d(6254);const r={},n=(0,d(36995).A)(r,[["render",function(e,a){const d=(0,t.g2)("Mermaid");return(0,t.uX)(),(0,t.CE)("div",null,[a[0]||(a[0]=(0,t.Fv)('<h1 id="mermaid时序图控制语法完全指南" tabindex="-1"><a class="header-anchor" href="#mermaid时序图控制语法完全指南"><span>Mermaid时序图控制语法完全指南</span></a></h1><p>时序图（Sequence Diagram）是Mermaid中用于展示对象间交互顺序的核心图表类型，而控制语法则是实现复杂流程逻辑（如分支、循环、并行等）的关键。本文将详细介绍Mermaid时序图的5类核心控制块语法，每类均配套易于理解的典型业务场景案例，帮助快速掌握并应用于实际开发文档中。</p><h2 id="一、基础概念铺垫" tabindex="-1"><a class="header-anchor" href="#一、基础概念铺垫"><span>一、基础概念铺垫</span></a></h2><p>在学习控制语法前，先明确时序图的2个基础要素，确保案例可直接运行：</p><ul><li><p><strong>参与者（Participant）</strong>：交互的对象，可用<code>participant</code>定义（普通对象）或<code>actor</code>定义（用户角色），支持别名简化表述。</p></li><li><p><strong>消息流向</strong>：用<code>-&gt;&gt;</code>表示同步消息（实线带箭头），<code>--&gt;&gt;</code>表示异步消息（虚线带箭头），是交互的基础载体。</p></li></ul><p>所有控制块均遵循“<strong>起始关键字+逻辑描述+内容块+end结束</strong>”的统一结构，可嵌套使用实现复杂逻辑。</p><h2 id="二、核心控制块语法详解" tabindex="-1"><a class="header-anchor" href="#二、核心控制块语法详解"><span>二、核心控制块语法详解</span></a></h2><h3 id="_1-抉择控制-alt-条件分支" tabindex="-1"><a class="header-anchor" href="#_1-抉择控制-alt-条件分支"><span>1. 抉择控制：alt（条件分支）</span></a></h3><p><strong>作用</strong>：实现“二选一”或“多选一”的条件分支逻辑，类似编程语言中的<code>if-else</code>，适用于存在明确分支条件的交互场景。</p><h4 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式"><span>语法格式</span></a></h4>',10)),(0,t.bF)(d,{id:"mermaid-39",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoddS1s4NznKyAEhNfbN3+Yv32ZxubwCoTc0oUnna0PZuy/tnchU92bzMEi6KY4YRshiPQDLByw6eTe5/umgJWnppTnIpiihGxphghm5KXwgUA0Xpi7g=="}),a[1]||(a[1]=(0,t.Lk)("h4",{id:"典型案例-用户登录验证",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#典型案例-用户登录验证"},[(0,t.Lk)("span",null,"典型案例：用户登录验证")])],-1)),a[2]||(a[2]=(0,t.Lk)("p",null,"场景：用户输入账号密码后，系统验证凭证有效性，分“验证通过”和“验证失败”两个分支，是最经典的条件交互场景。",-1)),(0,t.bF)(d,{id:"mermaid-46",code:"eJyNkktOwkAYx/ecohfwAixYeQQv0GBjiFgQcE9N0EKo1PBQ4oNWgRgRBiLagDzuQvim0xVXcJgPmkaNYRZdzHz/x286aeX0TFGjyn5MPkrJJyGJLzmaSaQkt/JCdUdsJOVUJhaNJWU1I0HecDvk97Z59dc2rfap0YNxWZyID/ruRSLoFJbYrAy5Fhu2oeQAuXAtDUaftGQux00hwLm1QGSEJShde1nNrX/BtMqIQwfnq4kOZgcKFtfDZZcRbTXJo1houNhvEpZoo8XIE/ZYzm2qkXWgZXuvReSPcx7hQrvPrt3j7jgMprEpWBx5OWObsV6+faAnm1fg7jGY44/7tfxLwFnBRHUTCg1kOkgcK2owyL8N9OVK551N30Dve+2aZ3+IQSWeVjYIXqXOCAkiUL2GFNujXSjojYXQrNfnFXcDgeaADVs8G5P4P3Wb439h6O2Mjyyy9/gcflRdZB8QTz0MfQPdvYFB"}),a[3]||(a[3]=(0,t.Fv)('<h4 id="案例解析" tabindex="-1"><a class="header-anchor" href="#案例解析"><span>案例解析</span></a></h4><ul><li><p>分支触发条件：数据库校验凭证的结果，是客观且明确的判断依据。</p></li><li><p>交互完整性：每个分支都包含“请求-处理-响应”的完整链路，符合实际业务流程。</p></li><li><p>语法关键点：<code>alt</code>后需标注分支条件，多个分支用<code>else</code>分隔，最终用<code>end</code>闭合。</p></li></ul><h3 id="_2-循环控制-loop-重复执行" tabindex="-1"><a class="header-anchor" href="#_2-循环控制-loop-重复执行"><span>2. 循环控制：loop（重复执行）</span></a></h3><p><strong>作用</strong>：实现“满足条件时重复执行”的逻辑，类似<code>while</code>循环，适用于定时任务、重试机制等场景。</p><h4 id="语法格式-1" tabindex="-1"><a class="header-anchor" href="#语法格式-1"><span>语法格式</span></a></h4>',5)),(0,t.bF)(d,{id:"mermaid-76",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoddS1s4NznKwUnnbMfbq8+2nPtBfrtz/b2ARWnJOfX6DwdN+q533rn81d+GT3NrAofmMgqjuXv1jY83xWy7PJvU/2zsHU5oSszdFKAaLu6eTep7umgFWn5qUQcC/Youe7Jz+bO//phD6EXQCHhX/R"}),a[4]||(a[4]=(0,t.Lk)("h4",{id:"典型案例-消息重试机制",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#典型案例-消息重试机制"},[(0,t.Lk)("span",null,"典型案例：消息重试机制")])],-1)),a[5]||(a[5]=(0,t.Lk)("p",null,"场景：系统发送消息后未收到响应，触发重试逻辑，最多重试3次，超过则提示失败，是分布式系统中常见的可靠性保障场景。",-1)),(0,t.bF)(d,{id:"mermaid-83",code:"eJyFUs9qwjAYv+8p+gKedvPgaS9SXBmCU6fuXgfDKnRTZpkTR1XqGGNWRRGxiu9S+iXpyVdYmlBNddYc2pBff/+ar6Q8PCq5tHKTke+K8v2VRFdBLpYz6UxBzpUlYg9AN/DMwY55AqLW2HPa58CFhipjv22C9s5A9hD1EqmUqJCU4LXpqxVX7fKvOIi0BtRNV/3kgkxFpCWojKialFD3B950WLV2aw1vmtjpotkA6t+7dY2xs/l8QfKrOhkb6LePjIlbs67pjoH/hRSaUPXOE4za/Iwa+JUtPOvecgDWNDS4WJSb87pCrWDJ2XKYjRXfAye9j2vjvk1sC70MUWsRYcXWAa3nf1hiqT1XyZaUMKo1JfNhnGo0C7EnsDHEf3xQzd2yffg+FA7uwHP0I6/4y+hVqRU/85YrOjqcTcflnADZNrAzj44cNOtk9OWrHWxy4yDcHyA+rLs="}),a[6]||(a[6]=(0,t.Fv)('<h4 id="案例解析-1" tabindex="-1"><a class="header-anchor" href="#案例解析-1"><span>案例解析</span></a></h4><ul><li><p>循环条件明确：以“重试次数≤3次”为终止条件，符合实际业务中的重试策略。</p></li><li><p>嵌套使用：循环内部嵌套<code>alt</code>分支判断重试结果，并用<code>break</code>实现“成功即退出循环”的逻辑。</p></li><li><p>语法关键点：<code>loop</code>后需标注循环条件，循环体内容需完整，用<code>end</code>闭合。</p></li></ul><h3 id="_3-可选控制-opt-条件执行" tabindex="-1"><a class="header-anchor" href="#_3-可选控制-opt-条件执行"><span>3. 可选控制：opt（条件执行）</span></a></h3><p><strong>作用</strong>：实现“满足条件时执行，不满足则跳过”的逻辑，类似单分支<code>if</code>，适用于非必需的附加操作场景。</p><h4 id="语法格式-2" tabindex="-1"><a class="header-anchor" href="#语法格式-2"><span>语法格式</span></a></h4>',5)),(0,t.bF)(d,{id:"mermaid-113",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoddS1s4NznKwUni3Y8XR/84v1259tbAKrzC8oAape/7Kh89nchU92bwMLohjhhGyEs5XCy5ktT7sWPJvc+2TvHEzVzmgWIqt+Orn36a4pYD2peSmoDkWxxRHmUKgOAJWfcmI="}),a[7]||(a[7]=(0,t.Lk)("h4",{id:"典型案例-订单支付附加优惠",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#典型案例-订单支付附加优惠"},[(0,t.Lk)("span",null,"典型案例：订单支付附加优惠")])],-1)),a[8]||(a[8]=(0,t.Lk)("p",null,"场景：用户支付订单时，若持有优惠券则自动抵扣，无优惠券则直接支付，优惠券抵扣为可选操作，不影响核心支付流程。",-1)),(0,t.bF)(d,{id:"mermaid-120",code:"eJyFkkFOwkAUhvecohcg0S0LVmw8RoONYSEg1j1CDC0RgaTEJlJqa01MSNqgqRXa6F1I30y74goOM9jUFnQWTfrP+//3zby5FC6uhHpVqNT4sxZ/XuDI4qtio8Vh5QVJHhWafEusVWtNvi5yIA/w3MnJSHFCX8VvPvb13GYYqKj7CNJHap9+WI9iucxSSxwajsKVFdkmDCawfMedJfR8lk0NrI4Y0v1KHAzHkesxLXI8tOhsAglGcxZ0UtkEMrU3muKuJ7q9RlMZhg75TfBozXal00mzDD/B1J8jx9xhHsjImHLM0ZcCD7OMm2Cjvovkp+MjuOn+YO9BymTZBrbvwZ4RLe6NY1Pbnv9OD32vyPL+iEruXv3E1mrdniY04L2maNZtjUYI9dPfs2A3SqawmJCANMX+IWPDjmzr/6nm6g6BUxlJI+izt5UjY0dL18WGG2tm4RuTtLOh"}),a[9]||(a[9]=(0,t.Fv)('<h4 id="案例解析-2" tabindex="-1"><a class="header-anchor" href="#案例解析-2"><span>案例解析</span></a></h4><ul><li><p>可选性体现：无优惠券时直接跳过优惠券查询流程，不影响核心的支付链路。</p></li><li><p>业务合理性：附加操作（优惠券抵扣）与核心操作（支付）相关联，符合用户实际使用场景。</p></li><li><p>语法关键点：<code>opt</code>后标注触发条件，仅当条件满足时执行内部逻辑，用<code>end</code>闭合。</p></li></ul><h3 id="_4-并行控制-par-同时执行" tabindex="-1"><a class="header-anchor" href="#_4-并行控制-par-同时执行"><span>4. 并行控制：par（同时执行）</span></a></h3><p><strong>作用</strong>：实现“多个操作同时执行，全部完成后再继续”的逻辑，适用于多模块协同处理的场景。</p><h4 id="语法格式-3" tabindex="-1"><a class="header-anchor" href="#语法格式-3"><span>语法格式</span></a></h4>',5)),(0,t.bF)(d,{id:"mermaid-150",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoddS1s4NznKyAEhNfbN3+dOe2Fwt7Xqzf/mxjE1h9QWKRAkTw2eTeJ3vnGD7r73+xfwNYDrd5zlYKUOWYCp2RFTrCFT6d3Pt01xSw8sS8FBQ7jYiy0wVmlBGmQhesdhoh2Zmal0IgfMAOerqu51nHhKcT+p7PaoEYwgUAS261Uw=="}),a[10]||(a[10]=(0,t.Lk)("h4",{id:"典型案例-app初始化加载",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#典型案例-app初始化加载"},[(0,t.Lk)("span",null,"典型案例：APP初始化加载")])],-1)),a[11]||(a[11]=(0,t.Lk)("p",null,"场景：用户打开APP后，系统同时加载“用户信息”“首页推荐”“消息通知”三个模块，全部加载完成后显示首页，是提升APP启动体验的常见优化场景。",-1)),(0,t.bF)(d,{id:"mermaid-157",code:"eJyFkU9OwkAUxvecohcw7lmQmHgArtBAY1hYEXFf/2AKUiURELWKNWgbTFpMqChauQzvzfQWTjpUJ5SGWczifd837zfvHSj7h4paULZL8k5F3s1I7MiF6l5FIm0H9UlUKMuVaqlQKstqVdrK58F9Ygp59RIiz6BpQMNKiHjhUKOVJr7reOQJYnTx9zZyObFrVsL6FXxrrBaZRC1hBf0e7HNodqE/JZYW1gwSuHF3CRqPNAh4l/nMYgSRtOJV8WdZiXoTfDvmNeqfYvfmLycaEzR01oa7h4Wl5xN7tAmDMZxc8rmrxQVR+NINLZ8PLI1IHGdMNP8Yomaz3y5FRW8KFLfAWQ3cT9CvqeUsMfENhdot6T+nMglbjJnQHFLviyv/QIIxDUjIYWcURRW1uH7l2BlDS8e6hmadBdHg+165UObu/ZDBFNwmi/GxZ34Bg7Sgbw=="}),a[12]||(a[12]=(0,t.Fv)('<h4 id="案例解析-3" tabindex="-1"><a class="header-anchor" href="#案例解析-3"><span>案例解析</span></a></h4><ul><li><p>并行合理性：三个加载操作相互独立，无依赖关系，适合并行执行以缩短总耗时。</p></li><li><p>同步点清晰：用<code>end</code>标记并行操作的结束，确保所有模块加载完成后再展示首页。</p></li><li><p>语法关键点：多个并行操作用<code>and</code>分隔，每个操作块可包含完整的交互链路。</p></li></ul><h3 id="_5-临界控制-critical-独占执行" tabindex="-1"><a class="header-anchor" href="#_5-临界控制-critical-独占执行"><span>5. 临界控制：critical（独占执行）</span></a></h3><p><strong>作用</strong>：实现“资源竞争场景下独占执行”的逻辑，确保同一时间只有一个操作能访问临界资源，适用于库存扣减、余额修改等场景。</p><h4 id="语法格式-4" tabindex="-1"><a class="header-anchor" href="#语法格式-4"><span>语法格式</span></a></h4>',5)),(0,t.bF)(d,{id:"mermaid-187",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoddS1s4NznKwUXqzf/mxj04t1+19OX/dia8uzXRPA6pOLMksykxNzFJ7s2PJ8ag9E5ll//4v9G8DyKGY6IZvpbKXwckrj03WzkEzDq/rZ5N4ne+fgUu2M5l6I6ue7Jz+bN4ew2S+WLwY6Bsns/IKSzPw8BYgIxJ1Pl2x8sWUpAbMcgWbtn/J09jyI6mf9E54v2QXWk5qXghrC6PogLn46uffprilcAOBE07g="}),a[13]||(a[13]=(0,t.Lk)("h4",{id:"典型案例-商品库存扣减",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#典型案例-商品库存扣减"},[(0,t.Lk)("span",null,"典型案例：商品库存扣减")])],-1)),a[14]||(a[14]=(0,t.Lk)("p",null,"场景：双11期间多个用户同时抢购同一商品，需确保库存不超卖，核心是保证库存扣减操作的原子性，是电商系统中的核心并发场景。",-1)),(0,t.bF)(d,{id:"mermaid-194",code:"eJzlUs1OwkAQvvsUfQETuAkHEokvsimNaaJtrfVOjYGCEqq00fibgEYuFImUJhTjuzTudjnxCm7/yIbW2Dtz2MPMfN98s/OdcidnnMByBzw4lMHxDkMCsIooM74xRJqzn8pUw4wEZIVneQkICoOtPuyY/qfruy+pIpz34OiOKoZPTL5bqdDgMoPafTwdQbMBe+pqoUXgYuHHna0WLQpZ/RepX6HbGexeY9tJoERWMjjqRrbqDy/DWhA0IeGnlZcZPHbQ5By1BrDZjSpkSpESFgQr82RxcMREOqI+bF+gub7uCYKmTk1aGiq07mOs9QG/zPzYTX0Fr3FTohVmMGz8Y8iANB22o3vlmovfB4HsLM2ipPCiEMPj3V4nePqWXxP+NuDDs1d/JEdYNjt4bHr1pzWcE2p/nTC+duIOaisg1BIrbYkXSsQKe9tuhWqGFQLQL2RGq+M="}),a[15]||(a[15]=(0,t.Lk)("h4",{id:"案例解析-4",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#案例解析-4"},[(0,t.Lk)("span",null,"案例解析")])],-1)),a[16]||(a[16]=(0,t.Lk)("p",null,[(0,t.eW)("临界资源明确：以“商品库存记录”作为临界资源，锁定后其他请求需等待解锁，避免超卖。失败处理：通过"),(0,t.Lk)("code",null,"option"),(0,t.eW)("定义锁定失败的降级策略（提示重试），增强系统稳定性。语法关键点："),(0,t.Lk)("code",null,"critical"),(0,t.eW)("后标注临界资源，内部包含“锁定-操作-解锁”的原子化流程。")],-1)),a[17]||(a[17]=(0,t.Lk)("h2",{id:"三、控制块嵌套使用规则",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#三、控制块嵌套使用规则"},[(0,t.Lk)("span",null,"三、控制块嵌套使用规则")])],-1)),a[18]||(a[18]=(0,t.Lk)("p",null,"实际业务场景往往需要多控制逻辑组合，嵌套使用需遵循“内层控制块完全包含于外层控制块”的原则，以下为常见嵌套场景示例：",-1)),(0,t.bF)(d,{id:"mermaid-207",code:"eJxtksFugkAQhu8+BS/QU289eOqLEEsaE6tW7R0PjdiUSlJsrIVWWpISW8E0qQoh5V0Ms8DJV+iyCwrCHoDMfDPzz790uesbrlnjzuvsZYe9qjD4sLVeq8MEsoGENQm02U6vXqu32WaPgaEYfFnFsPRQFkbjJRJNcB5Jhjxo35NqlXY6Y9BI8h091AwQx4SgiZggTVOC9iJEo9VqJ72j+X1o9ZEyj/hp6A12roAUHvTpKfrWdu6Q4GSpBlYzc8EdRfJzaFGp6aGDMppCT4aX1yyPNQS6k69KddKVsM7JH2YoD/YKbvuhufE9E8l2rrBgQcwsPhKz7BXdt3xW6kk0ENHTsuBMfLhGl4vzoItHmdyu+7vBwmca9hFky9/wiP/M8XssM5zak4woMebYTspseSVptv6BxQQUY8urB9XNC/Kdvst0+p6KCzNLlU2KDREkuHvL/0z5S6JEpP1G6nvlHyXkhMQ="}),a[19]||(a[19]=(0,t.Fv)('<h2 id="四、语法速查表" tabindex="-1"><a class="header-anchor" href="#四、语法速查表"><span>四、语法速查表</span></a></h2><table><thead><tr><th>控制块类型</th><th>核心关键字</th><th>核心作用</th><th>典型场景</th></tr></thead><tbody><tr><td>抉择控制</td><td>alt + else + end</td><td>多条件分支</td><td>登录验证、权限判断</td></tr><tr><td>循环控制</td><td>loop + end</td><td>重复执行</td><td>消息重试、定时任务</td></tr><tr><td>可选控制</td><td>opt + end</td><td>条件执行（单分支）</td><td>优惠券抵扣、附加服务</td></tr><tr><td>并行控制</td><td>par + and + end</td><td>多操作同时执行</td><td>APP初始化、多模块查询</td></tr><tr><td>临界控制</td><td>critical + option + end</td><td>独占访问资源</td><td>库存扣减、余额修改</td></tr></tbody></table><h2 id="五、工具推荐与验证方法" tabindex="-1"><a class="header-anchor" href="#五、工具推荐与验证方法"><span>五、工具推荐与验证方法</span></a></h2><ul><li><p><strong>在线编辑器</strong>：Mermaid Live Editor（<a href="https://mermaid.live/" target="_blank" rel="noopener noreferrer">https://mermaid.live/</a>），支持实时编写和渲染，语法错误会自动提示。</p></li><li><p><strong>IDE插件</strong>：VS Code安装“Markdown Preview Mermaid Support”插件，可在Markdown文档中预览时序图。</p></li><li><p><strong>验证技巧</strong>：复杂逻辑建议先拆解为单个控制块验证，再逐步嵌套组合，避免因嵌套层级过多导致语法错误。</p></li></ul>',4))])}]]),o=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/Mermaid%E6%97%B6%E5%BA%8F%E5%9B%BE%E6%8E%A7%E5%88%B6%E8%AF%AD%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97.html","title":"Mermaid时序图控制语法完全指南","lang":"zh-CN","frontmatter":{"description":"Mermaid时序图控制语法完全指南 时序图（Sequence Diagram）是Mermaid中用于展示对象间交互顺序的核心图表类型，而控制语法则是实现复杂流程逻辑（如分支、循环、并行等）的关键。本文将详细介绍Mermaid时序图的5类核心控制块语法，每类均配套易于理解的典型业务场景案例，帮助快速掌握并应用于实际开发文档中。 一、基础概念铺垫 在学习...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E5%B7%A5%E5%85%B7%E6%AD%A6%E5%99%A8%E5%BA%93/Mermaid%E6%97%B6%E5%BA%8F%E5%9B%BE%E6%8E%A7%E5%88%B6%E8%AF%AD%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"Mermaid时序图控制语法完全指南"}],["meta",{"property":"og:description","content":"Mermaid时序图控制语法完全指南 时序图（Sequence Diagram）是Mermaid中用于展示对象间交互顺序的核心图表类型，而控制语法则是实现复杂流程逻辑（如分支、循环、并行等）的关键。本文将详细介绍Mermaid时序图的5类核心控制块语法，每类均配套易于理解的典型业务场景案例，帮助快速掌握并应用于实际开发文档中。 一、基础概念铺垫 在学习..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T06:56:47.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T06:56:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mermaid时序图控制语法完全指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T06:56:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\",\\"url\\":\\"https://myblog.camscanner.top\\"}]}"]]},"git":{"createdTime":1760770607000,"updatedTime":1760770607000,"contributors":[{"name":"navyum","username":"navyum","email":"navyum","commits":1,"url":"https://github.com/navyum"}]},"readingTime":{"minutes":10.51,"words":3153},"filePathRelative":"工具武器库/Mermaid时序图控制语法完全指南.md","localizedDate":"2025年10月18日","excerpt":"\\n<p>时序图（Sequence Diagram）是Mermaid中用于展示对象间交互顺序的核心图表类型，而控制语法则是实现复杂流程逻辑（如分支、循环、并行等）的关键。本文将详细介绍Mermaid时序图的5类核心控制块语法，每类均配套易于理解的典型业务场景案例，帮助快速掌握并应用于实际开发文档中。</p>\\n<h2>一、基础概念铺垫</h2>\\n<p>在学习控制语法前，先明确时序图的2个基础要素，确保案例可直接运行：</p>\\n<ul>\\n<li>\\n<p><strong>参与者（Participant）</strong>：交互的对象，可用<code>participant</code>定义（普通对象）或<code>actor</code>定义（用户角色），支持别名简化表述。</p>\\n</li>\\n<li>\\n<p><strong>消息流向</strong>：用<code>-&gt;&gt;</code>表示同步消息（实线带箭头），<code>--&gt;&gt;</code>表示异步消息（虚线带箭头），是交互的基础载体。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);