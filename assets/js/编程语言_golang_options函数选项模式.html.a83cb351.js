"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[31897],{36995:(n,s)=>{s.A=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},46312:(n,s,e)=>{e.r(s),e.d(s,{comp:()=>l,data:()=>p});var a=e(6254);const i={},l=(0,e(36995).A)(i,[["render",function(n,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<ol><li>作用：解决多参数配置问题</li><li>优点： <ol><li>API 具有可扩展性，高度可配置化，新增参数不会破坏现有代码；</li><li>参数列表非常简洁，并且可以使用默认的参数；</li><li>option 函数使参数的含义非常清晰，易于开发者理解和使用；</li><li>如果将 options 结构中的参数设置为小写，还可以限制这些参数的权限，防止这些参数在 package 外部使用。</li></ol></li><li>具体实施： <ol><li>我们要对 schedule 结构进行改造，把可以配置的参数放入到options 结构中。定义options 支持的配置的功能模块。</li></ol></li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>type Schedule struct {</span></span>\n<span class="line"><span>  requestCh chan *collect.Request</span></span>\n<span class="line"><span>  workerCh  chan *collect.Request</span></span>\n<span class="line"><span>  out       chan collect.ParseResult</span></span>\n<span class="line"><span>  options</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>type options struct {</span></span>\n<span class="line"><span>  WorkCount int</span></span>\n<span class="line"><span>  Fetcher   collect.Fetcher</span></span>\n<span class="line"><span>  Logger    *zap.Logger</span></span>\n<span class="line"><span>  Seeds     []*collect.Request</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>2. 书写一系列的闭包函数，这些函数的返回值是一个参数为 options 的函数\n</code></pre><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type Option func(opts *options)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func WithLogger(logger *zap.Logger) Option {</span></span>\n<span class="line"><span>  return func(opts *options) {</span></span>\n<span class="line"><span>    opts.Logger = logger</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func WithFetcher(fetcher collect.Fetcher) Option {</span></span>\n<span class="line"><span>  return func(opts *options) {</span></span>\n<span class="line"><span>    opts.Fetcher = fetcher</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>3. 创建一个生成 schedule 的新函数，函数参数为 Option 的可变参数列表。defaultOptions 为默认的 Option，代表默认的参数列表，然后循环遍历可变函数参数列表并执行\n</code></pre><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>func NewSchedule(opts ...Option) *Schedule {</span></span>\n<span class="line"><span>  options := defaultOptions</span></span>\n<span class="line"><span>  for _, opt := range opts {</span></span>\n<span class="line"><span>    opt(&amp;options)</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  s := &amp;Schedule{}</span></span>\n<span class="line"><span>  s.options = options</span></span>\n<span class="line"><span>  return s</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>4. 在 main 函数中调用 NewSchedule\n</code></pre><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>func main(){</span></span>\n<span class="line"><span>  s := engine.NewSchedule(</span></span>\n<span class="line"><span>      engine.WithFetcher(f),</span></span>\n<span class="line"><span>      engine.WithLogger(logger)</span></span>\n<span class="line"><span>    )</span></span>\n<span class="line"><span>  s.Run()</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8)]))}]]),p=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/options%E5%87%BD%E6%95%B0%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F.html","title":"options函数选项模式","lang":"zh-CN","frontmatter":{"title":"options函数选项模式","author":"navyum","date":"2025-06-21T22:25:29.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"作用：解决多参数配置问题 优点： API 具有可扩展性，高度可配置化，新增参数不会破坏现有代码； 参数列表非常简洁，并且可以使用默认的参数； option 函数使参数的含义非常清晰，易于开发者理解和使用； 如果将 options 结构中的参数设置为小写，还可以限制这些参数的权限，防止这些参数在 package 外部使用。 具体实施： 我们要对 sche...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/options%E5%87%BD%E6%95%B0%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"options函数选项模式"}],["meta",{"property":"og:description","content":"作用：解决多参数配置问题 优点： API 具有可扩展性，高度可配置化，新增参数不会破坏现有代码； 参数列表非常简洁，并且可以使用默认的参数； option 函数使参数的含义非常清晰，易于开发者理解和使用； 如果将 options 结构中的参数设置为小写，还可以限制这些参数的权限，防止这些参数在 package 外部使用。 具体实施： 我们要对 sche..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:25:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"options函数选项模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-21T22:25:29.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.27,"words":382},"filePathRelative":"编程语言/golang/options函数选项模式.md","localizedDate":"2025年6月21日","excerpt":"<ol>\\n<li>作用：解决多参数配置问题</li>\\n<li>优点：\\n<ol>\\n<li>API 具有可扩展性，高度可配置化，新增参数不会破坏现有代码；</li>\\n<li>参数列表非常简洁，并且可以使用默认的参数；</li>\\n<li>option 函数使参数的含义非常清晰，易于开发者理解和使用；</li>\\n<li>如果将 options 结构中的参数设置为小写，还可以限制这些参数的权限，防止这些参数在 package 外部使用。</li>\\n</ol>\\n</li>\\n<li>具体实施：\\n<ol>\\n<li>我们要对 schedule 结构进行改造，把可以配置的参数放入到options 结构中。定义options 支持的配置的功能模块。</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}')}}]);