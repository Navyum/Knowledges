"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[65581],{36995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,l]of e)a[t]=l;return a}},67269:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>i,data:()=>d});var l=a(6254);const n={},i=(0,a(36995).A)(n,[["render",function(t,e){return(0,l.uX)(),(0,l.CE)("div",null,e[0]||(e[0]=[(0,l.Fv)('<h2 id="二叉树-binary-tree" tabindex="-1"><a class="header-anchor" href="#二叉树-binary-tree"><span>二叉树 Binary Tree：</span></a></h2><h3 id="_1-特点" tabindex="-1"><a class="header-anchor" href="#_1-特点"><span>1.特点：</span></a></h3><ul><li>一种非线性数据结构，代表“祖先”与“后代”之间的派生关系</li><li>二叉树的基本单元是节点，每个节点至少包含<code>值</code>、<code>左子节点引用</code>和<code>右子节点引用</code></li><li>二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树</li></ul><h3 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念"><span>2.概念：</span></a></h3><table><thead><tr><th style="text-align:left;">名词</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">根节点（root node）</td><td style="text-align:left;">位于二叉树顶层的节点，没有父节点。</td></tr><tr><td style="text-align:left;">叶节点（leaf node）</td><td style="text-align:left;">没有子节点的节点，其两个指针均指向 None 。</td></tr><tr><td style="text-align:left;">边（edge）</td><td style="text-align:left;">连接两个节点的线段，即节点引用（指针）。</td></tr><tr><td style="text-align:left;">二叉树的高度（height）</td><td style="text-align:left;">从根节点到最远叶节点所经过的边的数量。</td></tr><tr><td style="text-align:left;">节点所在的层（level）</td><td style="text-align:left;">从顶至底递增，根节点所在层为 1 。</td></tr><tr><td style="text-align:left;">节点的度（degree）</td><td style="text-align:left;">节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2 。</td></tr><tr><td style="text-align:left;">节点的深度（depth）</td><td style="text-align:left;">从根节点到该节点所经过的边的数量。</td></tr><tr><td style="text-align:left;">节点的高度（height）</td><td style="text-align:left;">从距离该节点最远的叶节点到该节点所经过的边的数量。</td></tr></tbody></table><ul><li>图解： <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/82d8d866992564e8d46ab8496f18e4bc.png" width="60%"></li></ul><h3 id="_3-常见二叉树类型" tabindex="-1"><a class="header-anchor" href="#_3-常见二叉树类型"><span>3.常见二叉树类型：</span></a></h3><h4 id="完美二叉树-满二叉树" tabindex="-1"><a class="header-anchor" href="#完美二叉树-满二叉树"><span>完美二叉树/满二叉树：</span></a></h4><ul><li>特点： <ul><li>所有层的节点都被完全填满</li><li>叶节点的度为0，其余所有节点的度都为2 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0b73a6703d8a60e2fb32a03cf182390f.png" width="60%"></li></ul></li></ul><h4 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树"><span>完全二叉树：</span></a></h4><ul><li>特点： <ul><li>只有最底层的节点未被填满，且最底层节点尽量<code>靠左填充</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f094903101ab1e11bbb98d66a54fe6d4.png" width="60%"></li></ul></li></ul><h4 id="完满二叉树" tabindex="-1"><a class="header-anchor" href="#完满二叉树"><span>完满二叉树：</span></a></h4><ul><li>特点： <ul><li>除了叶节点之外，其余<code>所有节点都有两个子节点</code><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/f7e46c0dd40fb968ea44762613008f41.png" width="60%"></li></ul></li></ul><h4 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树"><span>平衡二叉树：</span></a></h4><ul><li>特点： <ul><li>任意节点的<code>左子树和右子树的高度之差</code>的<code>绝对值</code>不超过1 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b782d880830632d8bb395ca57c964472.png" width="60%"></li></ul></li></ul><h3 id="_4-二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#_4-二叉树的遍历"><span>4.二叉树的遍历：</span></a></h3><h4 id="层序遍历" tabindex="-1"><a class="header-anchor" href="#层序遍历"><span>层序遍历：</span></a></h4><ul><li>遍历逻辑：从顶部到底部逐层遍历二叉树，并在每一层按照从左到右的顺序访问节点（类比队列，一般用队列实现）</li><li>属于广度优先遍历，也称<code>广度优先搜索</code>（breadth-first search, <code>BFS</code>）</li></ul><h4 id="前序、中序、后序遍历" tabindex="-1"><a class="header-anchor" href="#前序、中序、后序遍历"><span>前序、中序、后序遍历：</span></a></h4><ul><li>遍历逻辑：从顶部到底部逐层遍历二叉树，先走到尽头，再回溯继续（类比递归，一般用递归方式实现）</li><li>前序、中序、后序指的是根的打印顺序：根左右、左根右、左右根</li><li>都属于深度优先遍历，也称<code>深度优先搜索</code>（depth-first search, <code>DFS</code>）</li></ul><h3 id="_5-二叉搜索树-节点值有序" tabindex="-1"><a class="header-anchor" href="#_5-二叉搜索树-节点值有序"><span>5.二叉搜索树（节点值有序）：</span></a></h3><ul><li>特点： <ul><li>对于根节点，<code>左子树中所有节点的值</code> &lt; <code>根节点的值</code> &lt; <code>右子树中所有节点的值</code>（<code>有序特性</code>）</li><li>任意节点的左、右子树也是二叉搜索树，即同样满足条件 1</li></ul></li><li>二叉搜索树的查找操作与二分查找算法的工作原理一致，都是每轮排除一半情况。循环次数最多为二叉树的高度，当二叉树平衡时，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>二叉搜索树不允许存在重复节点，否则将违反其定义</li><li><code>二叉搜索树的中序遍历的结果序列是升序的</code></li></ul><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/d38bf2cc325e18a5aa8c9b6aebfd0eed.png" width="60%"><ul><li>常见操作： <ul><li>查找节点： <ul><li>比较待查找值与节点值；查找值小，则继续左子树；查找值大，则继续右子树。知道值匹配或者到达叶子节点</li></ul></li><li>插入节点： <ul><li>先查找到具体位置，插入到该位置（修改该位置的父节点指针，指向新节点）</li></ul></li><li>删除节点： <ul><li>删除节点为叶子节点，度为0，可以直接删除</li><li>删除节点为非叶子节点： <ul><li>度为1，用待删除节点的唯一子节点替换掉待删除节点</li><li>度为2，用该节点的<code>右子树的最小节点</code>或<code>左子树的最大节点</code>（该节点一定是叶子节点），替换自己 <ul><li>右子树的最小节点：中序遍历的下一个节点</li><li>左子树的最小节点：中序遍历的最后一个节点</li></ul></li></ul></li></ul></li></ul></li></ul>',24)]))}]]),d=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/2.%E4%BA%8C%E5%8F%89%E6%A0%91.html","title":"2.二叉树","lang":"zh-CN","frontmatter":{"title":"2.二叉树","date":"2025-06-17T14:52:57.000Z","author":"Navyum","tags":["二叉树"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"二叉树 Binary Tree： 1.特点： 一种非线性数据结构，代表“祖先”与“后代”之间的派生关系 二叉树的基本单元是节点，每个节点至少包含值、左子节点引用和右子节点引用 二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树 2.概念： 图解： 3.常见二叉树类型： 完美二叉树/满二叉树： 特点： 所有层的节点都被完全填满 叶节点的度为0，其余...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/2.%E4%BA%8C%E5%8F%89%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"2.二叉树"}],["meta",{"property":"og:description","content":"二叉树 Binary Tree： 1.特点： 一种非线性数据结构，代表“祖先”与“后代”之间的派生关系 二叉树的基本单元是节点，每个节点至少包含值、左子节点引用和右子节点引用 二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树 2.概念： 图解： 3.常见二叉树类型： 完美二叉树/满二叉树： 特点： 所有层的节点都被完全填满 叶节点的度为0，其余..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"二叉树"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:52:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.二叉树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:52:57.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"算法数据结构/数据结构/03.树/2.二叉树.md","localizedDate":"2025年6月17日","excerpt":"<h2>二叉树 Binary Tree：</h2>\\n<h3>1.特点：</h3>\\n<ul>\\n<li>一种非线性数据结构，代表“祖先”与“后代”之间的派生关系</li>\\n<li>二叉树的基本单元是节点，每个节点至少包含<code>值</code>、<code>左子节点引用</code>和<code>右子节点引用</code></li>\\n<li>二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树</li>\\n</ul>\\n<h3>2.概念：</h3>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">名词</th>\\n<th style=\\"text-align:left\\">解释</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">根节点（root node）</td>\\n<td style=\\"text-align:left\\">位于二叉树顶层的节点，没有父节点。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">叶节点（leaf node）</td>\\n<td style=\\"text-align:left\\">没有子节点的节点，其两个指针均指向 None 。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">边（edge）</td>\\n<td style=\\"text-align:left\\">连接两个节点的线段，即节点引用（指针）。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">二叉树的高度（height）</td>\\n<td style=\\"text-align:left\\">从根节点到最远叶节点所经过的边的数量。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">节点所在的层（level）</td>\\n<td style=\\"text-align:left\\">从顶至底递增，根节点所在层为 1 。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">节点的度（degree）</td>\\n<td style=\\"text-align:left\\">节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2 。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">节点的深度（depth）</td>\\n<td style=\\"text-align:left\\">从根节点到该节点所经过的边的数量。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">节点的高度（height）</td>\\n<td style=\\"text-align:left\\">从距离该节点最远的叶节点到该节点所经过的边的数量。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);