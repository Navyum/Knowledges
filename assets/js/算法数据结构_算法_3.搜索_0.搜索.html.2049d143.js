"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[33731],{30524:(a,t,n)=>{n.r(t),n.d(t,{comp:()=>l,data:()=>i});var s=n(6254);const e={},l=(0,n(36995).A)(e,[["render",function(a,t){return(0,s.uX)(),(0,s.CE)("div",null,t[0]||(t[0]=[(0,s.Fv)('<h2 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h2><ul><li>定义： <ul><li>搜索算法（searching algorithm）用于在数据结构（例如数组、链表、树或图）中搜索一个或一组满足特定条件的元素</li></ul></li></ul><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类：</span></a></h3><ul><li>暴力搜索</li><li>自适应搜索</li></ul><h3 id="暴力搜索" tabindex="-1"><a class="header-anchor" href="#暴力搜索"><span>暴力搜索：</span></a></h3><ul><li>思路：<code>遍历</code>数据结构的每个元素</li><li>遍历策略： <ul><li>线性搜索：适用于数组和链表</li><li><code>广度、深度优先搜索</code>：适用于树和图</li></ul></li><li>优缺点： <ul><li>优点：简单且通用性好，无须对数据做预处理和借助额外的数据结构</li><li>缺点：时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul></li></ul><h3 id="自适应搜索" tabindex="-1"><a class="header-anchor" href="#自适应搜索"><span>自适应搜索：</span></a></h3><ul><li>思路：利用数据结构的特有属性等先验条件（例如有序），来优化搜索过程</li><li>特有属性： <ul><li><code>二分查找</code>： 利用数据的<code>有序性</code>，实现高效查找，仅适用于数组。</li><li><code>哈希查找</code>： 利用哈希表将搜索数据和目标数据建立为<code>键值对映射</code>，从而实现查询操作。</li><li><code>树查找</code>： 利用节点值的大小关系（例如<code>二叉搜索树</code>），<code>基于比较节点值</code>来快速排除节点，从而定位目标元素。</li></ul></li><li>优缺点： <ul><li>优点：搜索时间复杂度低，一般为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，哈希表为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li><li>缺点：需要对数据做预处理，借助额外的数据结构；维护这些数据结构也需要额外的时间和空间开销。</li></ul></li></ul><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/15695660eb48d4adcd10ff713f586b84.png" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure>',9)]))}]]),i=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/3.%E6%90%9C%E7%B4%A2/0.%E6%90%9C%E7%B4%A2.html","title":"0.搜索","lang":"zh-CN","frontmatter":{"title":"0.搜索","author":"navyum","date":"2025-06-15T00:00:00.000Z","order":-1,"article":true,"headerDepth":2,"sticky":true,"star":true,"category":["算法","搜索算法"],"tag":["算法","搜索算法"],"description":"搜索 定义： 搜索算法（searching algorithm）用于在数据结构（例如数组、链表、树或图）中搜索一个或一组满足特定条件的元素 分类： 暴力搜索 自适应搜索 暴力搜索： 思路：遍历数据结构的每个元素 遍历策略： 线性搜索：适用于数组和链表 广度、深度优先搜索：适用于树和图 优缺点： 优点：简单且通用性好，无须对数据做预处理和借助额外的数据结...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/3.%E6%90%9C%E7%B4%A2/0.%E6%90%9C%E7%B4%A2.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"0.搜索"}],["meta",{"property":"og:description","content":"搜索 定义： 搜索算法（searching algorithm）用于在数据结构（例如数组、链表、树或图）中搜索一个或一组满足特定条件的元素 分类： 暴力搜索 自适应搜索 暴力搜索： 思路：遍历数据结构的每个元素 遍历策略： 线性搜索：适用于数组和链表 广度、深度优先搜索：适用于树和图 优缺点： 优点：简单且通用性好，无须对数据做预处理和借助额外的数据结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/15695660eb48d4adcd10ff713f586b84.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"搜索算法"}],["meta",{"property":"article:published_time","content":"2025-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0.搜索\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/15695660eb48d4adcd10ff713f586b84.png\\"],\\"datePublished\\":\\"2025-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":1.28,"words":383},"filePathRelative":"算法数据结构/算法/3.搜索/0.搜索.md","localizedDate":"2025年6月15日","excerpt":"<h2>搜索</h2>\\n<ul>\\n<li>定义：\\n<ul>\\n<li>搜索算法（searching algorithm）用于在数据结构（例如数组、链表、树或图）中搜索一个或一组满足特定条件的元素</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>分类：</h3>\\n<ul>\\n<li>暴力搜索</li>\\n<li>自适应搜索</li>\\n</ul>\\n<h3>暴力搜索：</h3>\\n<ul>\\n<li>思路：<code>遍历</code>数据结构的每个元素</li>\\n<li>遍历策略：\\n<ul>\\n<li>线性搜索：适用于数组和链表</li>\\n<li><code>广度、深度优先搜索</code>：适用于树和图</li>\\n</ul>\\n</li>\\n<li>优缺点：\\n<ul>\\n<li>优点：简单且通用性好，无须对数据做预处理和借助额外的数据结构</li>\\n<li>缺点：时间复杂度为<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},36995:(a,t)=>{t.A=(a,t)=>{const n=a.__vccOpts||a;for(const[a,s]of t)n[a]=s;return n}}}]);