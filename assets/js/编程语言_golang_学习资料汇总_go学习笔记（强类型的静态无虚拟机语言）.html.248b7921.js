"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[75699],{36995:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,n]of i)e[l]=n;return e}},49872:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>o,data:()=>r});var n=e(6254);const t={},o=(0,e(36995).A)(t,[["render",function(l,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<ol><li><p>“业务逻辑”和“控制逻辑”分离解耦的编程模式 a. 反转控制： 开关和各种电器，不是将开关放在电器中，而是将开关抽象出来，由电器依赖开关，这样实现开关模块的独立和复用。 b. map、redunce、filter c. reflect d. 目前go 的泛型编程基于interface</p></li><li><p>修饰器编程模式</p></li><li><p>编程范式：过程式编程procedural、函数式编程functional、面向对象编程object-oriented</p></li><li><p>c语言特征：</p><ul><li>C 语言是一个静态弱类型语言，在使用变量时需要声明变量类型，但是类型间可以有隐式转换；</li><li>不同的变量类型可以用结构体（struct）组合在一起，以此来声明新的数据类型；</li><li>C 语言可以用 typedef 关键字来定义类型的别名，以此来达到变量类型的抽象；</li><li>C 语言是一个有结构化程序设计、具有变量作用域以及递归功能的过程式语言；</li><li>C 语言传递参数一般是以值传递，也可以传递指针；</li><li>通过指针，C 语言可以容易地对内存进行低级控制，然而这加大了编程复杂度；</li><li>编译预处理让 C 语言的编译更具有弹性，比如跨平台。</li></ul></li><li><p>C 语言的伟大之处 使用 C 语言的程序员在高级语言的特性之上还能简单地做任何底层上的微观控制</p></li><li><p>c语言设计理念：</p><ul><li>相信程序员；</li><li>不会阻止程序员做任何底层的事；</li><li>保持语言的最小和最简的特性；</li><li>保证 C 语言的最快的运行速度，那怕牺牲移值性。</li></ul></li><li><p>程序语言的类型系统提供的能力：</p><ul><li>程序语言的安全性</li><li>利于编译器的优化（字节对齐、机器指令更高效）</li><li>代码的可读性（函数、接口的定义更清晰）</li><li>抽象化</li><li>带来的问题：类型的多态（类型带来的问题就是我们作用于不同类型的代码，虽然长得非常相似，但是由于类型的问题需要根据不同版本写出不同的算法，如果要做到泛型，就需要涉及比较底层的玩法。）</li><li>类型的定义：类型是对底层内存布局的一个抽象，不同的类型，会有不同的内存布局和内存分配的策略。不同的类型，有不同的操作。所以，对于特定的类型，也有特定的一组操作。</li></ul></li><li><p>类型的检查：</p><ul><li>静态类型检查: 是在编译器进行语义分析时进行的。如果一个语言强制实行类型规则（即通常只允许以不丢失信息为前提的自动类型转换），那么称此处理为强类型(go)，反之称为弱类型(c)。</li><li>动态类型检查: 系统更多的是在运行时期做动态类型标记和相关检查(检查工作交给程序员)。所以，动态类型的语言必然要给出一堆诸如：is_array(), is_int(), is_string() 或是 typeof() 这样的运行时类型检查函数。</li></ul></li><li><p>泛型的标准：</p><ol><li>标准化掉类型的内存分配、释放和访问。</li><li>标准化掉类型的操作。比如：比较操作，I/O 操作，复制操作……</li><li>标准化掉数据容器的操作。比如：查找算法、过滤算法、聚合算法……</li><li>标准化掉类型上特有的操作。需要有标准化的接口来回调不同类型的具体操作……</li></ol></li><li><p>实现泛型的方式：</p><ol><li>通过类中的构造、析构、拷贝构造，重载赋值操作符，标准化（隐藏）了类型的内存分配、释放和复制的操作。</li><li>通过重载操作符，可以标准化类型的比较等操作。</li><li>通过 iostream，标准化了类型的输入、输出控制。</li><li>通过模板技术（包括模板的特化），来为不同的类型生成类型专属的代码。</li><li>通过迭代器来标准化数据容器的遍历操作。</li><li>通过面向对象的接口依赖（虚函数技术），来标准化了特定类型在特定算法上的操作。</li><li>通过函数式（函数对象），来标准化对于不同类型的特定操作。</li></ol></li><li><p>泛型编程的理解： 屏蔽掉数据和操作数据的细节，让算法更为通用，让编程者更多地关注算法的结构，而不是在算法中处理不同的数据类型</p></li><li><p>函数式编程： 核心： map、reduce、filter，pipline模式，decorator模式。 Decorator 这个函数其实是可以修饰几乎所有的函数的。于是，这种可以通用于其它函数的编程方式，可以很容易地将一些非业务功能的、属于控制类型的代码给抽象出来（所谓的控制类型的代码就是像 for-loop，或是打日志，或是函数路由，或是求函数运行时间之类的非业务功能性的代码）</p></li><li><p>编程的本质 1. Programs = Algorithms + Data Structures 2. Algorithm = Logic + Control 有效地分离 Logic、Control 和 Data 是写出好程序的关键所在！</p><p>绝大多数程序复杂混乱的根本原因：业务逻辑与控制逻辑的耦合。</p></li><li><p>go 语言资料：<br><a href="https://time.geekbang.org/column/article/8701" target="_blank" rel="noopener noreferrer">https://time.geekbang.org/column/article/8701</a><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener noreferrer">https://github.com/avelino/awesome-go</a></p></li></ol>',1)]))}]]),r=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%BA%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%99%E6%80%81%E6%97%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%AD%E8%A8%80%EF%BC%89.html","title":"go学习笔记（强类型的静态无虚拟机语言）","lang":"zh-CN","frontmatter":{"title":"go学习笔记（强类型的静态无虚拟机语言）","date":"2025-06-23T11:18:58.000Z","author":"Navyum","tags":["golang"],"categories":["golang"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"description":"“业务逻辑”和“控制逻辑”分离解耦的编程模式 a. 反转控制： 开关和各种电器，不是将开关放在电器中，而是将开关抽象出来，由电器依赖开关，这样实现开关模块的独立和复用。 b. map、redunce、filter c. reflect d. 目前go 的泛型编程基于interface 修饰器编程模式 编程范式：过程式编程procedural、函数式编程...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%BA%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%99%E6%80%81%E6%97%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%AD%E8%A8%80%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"go学习笔记（强类型的静态无虚拟机语言）"}],["meta",{"property":"og:description","content":"“业务逻辑”和“控制逻辑”分离解耦的编程模式 a. 反转控制： 开关和各种电器，不是将开关放在电器中，而是将开关抽象出来，由电器依赖开关，这样实现开关模块的独立和复用。 b. map、redunce、filter c. reflect d. 目前go 的泛型编程基于interface 修饰器编程模式 编程范式：过程式编程procedural、函数式编程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T03:21:19.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2025-06-23T11:18:58.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T03:21:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go学习笔记（强类型的静态无虚拟机语言）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-23T11:18:58.000Z\\",\\"dateModified\\":\\"2025-06-23T03:21:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750648879000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":4.73,"words":1420},"filePathRelative":"编程语言/golang/学习资料汇总/go学习笔记（强类型的静态无虚拟机语言）.md","localizedDate":"2025年6月23日","excerpt":"<ol>\\n<li>\\n<p>“业务逻辑”和“控制逻辑”分离解耦的编程模式\\na. 反转控制：  开关和各种电器，不是将开关放在电器中，而是将开关抽象出来，由电器依赖开关，这样实现开关模块的独立和复用。\\nb. map、redunce、filter\\nc. reflect\\nd. 目前go 的泛型编程基于interface</p>\\n</li>\\n<li>\\n<p>修饰器编程模式</p>\\n</li>\\n<li>\\n<p>编程范式：过程式编程procedural、函数式编程functional、面向对象编程object-oriented</p>\\n</li>\\n<li>\\n<p>c语言特征：</p>\\n<ul>\\n<li>C 语言是一个静态弱类型语言，在使用变量时需要声明变量类型，但是类型间可以有隐式转换；</li>\\n<li>不同的变量类型可以用结构体（struct）组合在一起，以此来声明新的数据类型；</li>\\n<li>C 语言可以用 typedef 关键字来定义类型的别名，以此来达到变量类型的抽象；</li>\\n<li>C 语言是一个有结构化程序设计、具有变量作用域以及递归功能的过程式语言；</li>\\n<li>C 语言传递参数一般是以值传递，也可以传递指针；</li>\\n<li>通过指针，C 语言可以容易地对内存进行低级控制，然而这加大了编程复杂度；</li>\\n<li>编译预处理让 C 语言的编译更具有弹性，比如跨平台。</li>\\n</ul>\\n</li>\\n<li>\\n<p>C 语言的伟大之处\\n使用 C 语言的程序员在高级语言的特性之上还能简单地做任何底层上的微观控制</p>\\n</li>\\n<li>\\n<p>c语言设计理念：</p>\\n<ul>\\n<li>相信程序员；</li>\\n<li>不会阻止程序员做任何底层的事；</li>\\n<li>保持语言的最小和最简的特性；</li>\\n<li>保证 C 语言的最快的运行速度，那怕牺牲移值性。</li>\\n</ul>\\n</li>\\n<li>\\n<p>程序语言的类型系统提供的能力：</p>\\n<ul>\\n<li>程序语言的安全性</li>\\n<li>利于编译器的优化（字节对齐、机器指令更高效）</li>\\n<li>代码的可读性（函数、接口的定义更清晰）</li>\\n<li>抽象化</li>\\n<li>带来的问题：类型的多态（类型带来的问题就是我们作用于不同类型的代码，虽然长得非常相似，但是由于类型的问题需要根据不同版本写出不同的算法，如果要做到泛型，就需要涉及比较底层的玩法。）</li>\\n<li>类型的定义：类型是对底层内存布局的一个抽象，不同的类型，会有不同的内存布局和内存分配的策略。不同的类型，有不同的操作。所以，对于特定的类型，也有特定的一组操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>类型的检查：</p>\\n<ul>\\n<li>静态类型检查:  是在编译器进行语义分析时进行的。如果一个语言强制实行类型规则（即通常只允许以不丢失信息为前提的自动类型转换），那么称此处理为强类型(go)，反之称为弱类型(c)。</li>\\n<li>动态类型检查: 系统更多的是在运行时期做动态类型标记和相关检查(检查工作交给程序员)。所以，动态类型的语言必然要给出一堆诸如：is_array(), is_int(), is_string() 或是 typeof() 这样的运行时类型检查函数。</li>\\n</ul>\\n</li>\\n<li>\\n<p>泛型的标准：</p>\\n<ol>\\n<li>标准化掉类型的内存分配、释放和访问。</li>\\n<li>标准化掉类型的操作。比如：比较操作，I/O 操作，复制操作……</li>\\n<li>标准化掉数据容器的操作。比如：查找算法、过滤算法、聚合算法……</li>\\n<li>标准化掉类型上特有的操作。需要有标准化的接口来回调不同类型的具体操作……</li>\\n</ol>\\n</li>\\n<li>\\n<p>实现泛型的方式：</p>\\n<ol>\\n<li>通过类中的构造、析构、拷贝构造，重载赋值操作符，标准化（隐藏）了类型的内存分配、释放和复制的操作。</li>\\n<li>通过重载操作符，可以标准化类型的比较等操作。</li>\\n<li>通过 iostream，标准化了类型的输入、输出控制。</li>\\n<li>通过模板技术（包括模板的特化），来为不同的类型生成类型专属的代码。</li>\\n<li>通过迭代器来标准化数据容器的遍历操作。</li>\\n<li>通过面向对象的接口依赖（虚函数技术），来标准化了特定类型在特定算法上的操作。</li>\\n<li>通过函数式（函数对象），来标准化对于不同类型的特定操作。</li>\\n</ol>\\n</li>\\n<li>\\n<p>泛型编程的理解：\\n屏蔽掉数据和操作数据的细节，让算法更为通用，让编程者更多地关注算法的结构，而不是在算法中处理不同的数据类型</p>\\n</li>\\n<li>\\n<p>函数式编程：\\n核心： map、reduce、filter，pipline模式，decorator模式。\\nDecorator 这个函数其实是可以修饰几乎所有的函数的。于是，这种可以通用于其它函数的编程方式，可以很容易地将一些非业务功能的、属于控制类型的代码给抽象出来（所谓的控制类型的代码就是像 for-loop，或是打日志，或是函数路由，或是求函数运行时间之类的非业务功能性的代码）</p>\\n</li>\\n<li>\\n<p>编程的本质\\n1. Programs = Algorithms + Data Structures\\n2. Algorithm = Logic + Control\\n有效地分离 Logic、Control 和 Data 是写出好程序的关键所在！</p>\\n<p>绝大多数程序复杂混乱的根本原因：业务逻辑与控制逻辑的耦合。</p>\\n</li>\\n<li>\\n<p>go 语言资料：<br>\\n<a href=\\"https://time.geekbang.org/column/article/8701\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://time.geekbang.org/column/article/8701</a>\\n<a href=\\"https://github.com/avelino/awesome-go\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/avelino/awesome-go</a></p>\\n</li>\\n</ol>","autoDesc":true}')}}]);