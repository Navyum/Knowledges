"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[71770],{36995:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}},93468:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>p});var n=a(6254);const i={},o=(0,a(36995).A)(i,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,t[0]||(t[0]=[(0,n.Fv)('<h1 id="降级设计-degradation" tabindex="-1"><a class="header-anchor" href="#降级设计-degradation"><span>降级设计-degradation</span></a></h1><p>含义：</p><pre><code>本质是为了解决资源不足和访问量过大的问题。当资源和访问量出现矛盾的时候，在有限的资源下，为了能够扛住大量的请求，我们就需要对系统进行降级操作。也就是说，暂时牺牲掉一些东西，以保障整个系统的平稳运行。\n</code></pre><p>降级待牺牲清单：</p><ul><li><p>降低一致性： 从强一致性变为最终一致性。 a. 使用异步方式，简化流程一致性</p><p>b. 使用缓存，降低数据一致性</p></li><li><p>停止次要功能：停止访问不重要的功能，从而释放出更多的资源。</p></li><li><p>简化功能或流程。把一些功能简化掉，比如不再返回全量数据，只返回部分数据。对计算等资源需求比较高的，不重要的逻辑简化掉。</p></li></ul><p>降级设计要点：</p><ul><li>很难不侵入业务，所以需要对业务足够熟悉并作出梳理。哪些是 must-have 的功能，哪些是 nice-to-have 的功能；哪些是必须要死保的功能，哪些是可以牺牲的功能。</li><li>提前清楚地定义好降级的关键条件。比如，吞吐量过大、响应时间过慢、失败次数多过，有网络或是服务故障，做好相应的应急预案。</li><li>降级的时候，需要牺牲掉一致性，或是一些业务流程。读操作：可以使用缓存来解决。写操作：需要异步调用来解决。并且以流水账的方式记录下来，方便对账，以免漏掉或是和正常的流程混淆。</li><li>降级的功能可做成系统的配置开关或者由调用方驱动。做成配置时，你需要在要降级的时候推送相应的配置。当调用侧发生限流并达到某个值时，传参过来，从而驱动服务做相应降级。</li><li>数据降级需要前端配合展示，做好相关区分。当服务恢复时，重新获取数据，实现最终一致。</li><li>降级出现少，相关机制需要提前演练，避免本身出现bug。</li></ul>',7)]))}]]),p=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E9%99%8D%E7%BA%A7%E8%AE%BE%E8%AE%A1-degradation.html","title":"降级设计-degradation","lang":"zh-CN","frontmatter":{"description":"降级设计-degradation 含义： 降级待牺牲清单： 降低一致性： 从强一致性变为最终一致性。 a. 使用异步方式，简化流程一致性 b. 使用缓存，降低数据一致性 停止次要功能：停止访问不重要的功能，从而释放出更多的资源。 简化功能或流程。把一些功能简化掉，比如不再返回全量数据，只返回部分数据。对计算等资源需求比较高的，不重要的逻辑简化掉。 降级...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E6%9E%B6%E6%9E%84/01.%E5%BC%B9%E6%80%A7%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%8F%AF%E7%94%A8/%E9%99%8D%E7%BA%A7%E8%AE%BE%E8%AE%A1-degradation.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"降级设计-degradation"}],["meta",{"property":"og:description","content":"降级设计-degradation 含义： 降级待牺牲清单： 降低一致性： 从强一致性变为最终一致性。 a. 使用异步方式，简化流程一致性 b. 使用缓存，降低数据一致性 停止次要功能：停止访问不重要的功能，从而释放出更多的资源。 简化功能或流程。把一些功能简化掉，比如不再返回全量数据，只返回部分数据。对计算等资源需求比较高的，不重要的逻辑简化掉。 降级..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T10:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"降级设计-degradation\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-15T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\",\\"url\\":\\"https://myblog.camscanner.top\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1749983452000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"架构设计/02.分布式与架构/01.弹性设计-高可用/降级设计-degradation.md","localizedDate":"2025年6月15日","excerpt":"\\n<p>含义：</p>\\n<pre><code>本质是为了解决资源不足和访问量过大的问题。当资源和访问量出现矛盾的时候，在有限的资源下，为了能够扛住大量的请求，我们就需要对系统进行降级操作。也就是说，暂时牺牲掉一些东西，以保障整个系统的平稳运行。\\n</code></pre>\\n<p>降级待牺牲清单：</p>\\n<ul>\\n<li>\\n<p>降低一致性： 从强一致性变为最终一致性。\\na. 使用异步方式，简化流程一致性</p>\\n<p>b. 使用缓存，降低数据一致性</p>\\n</li>\\n<li>\\n<p>停止次要功能：停止访问不重要的功能，从而释放出更多的资源。</p>\\n</li>\\n<li>\\n<p>简化功能或流程。把一些功能简化掉，比如不再返回全量数据，只返回部分数据。对计算等资源需求比较高的，不重要的逻辑简化掉。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);