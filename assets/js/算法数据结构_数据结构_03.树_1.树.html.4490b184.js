"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[94185],{36995:(l,i)=>{i.A=(l,i)=>{const n=l.__vccOpts||l;for(const[l,e]of i)n[l]=e;return n}},96935:(l,i,n)=>{n.r(i),n.d(i,{comp:()=>a,data:()=>u});var e=n(6254);const t={},a=(0,n(36995).A)(t,[["render",function(l,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h2 id="树" tabindex="-1"><a class="header-anchor" href="#树"><span>树</span></a></h2><ul><li>在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系</li><li>树结构是一种非线性存储结构，存储的是具有<code>一对多</code>关系的数据元素</li></ul><h3 id="树的分类" tabindex="-1"><a class="header-anchor" href="#树的分类"><span>树的分类：</span></a></h3><ul><li>树 <ul><li>二叉树 <ul><li>按树的结构： <ul><li>满二叉树</li><li>完满二叉树</li><li>完全二叉树</li></ul></li><li>按搜索功能： <ul><li>查找：（索引） <ul><li>二叉查找树（BST） <ul><li>非平衡查找树</li><li>平衡树二叉树 AVL树： <ul><li>红黑树</li></ul></li></ul></li></ul></li><li>排序：（优先队列） <ul><li>堆（完全二叉树的应用） <ul><li>大顶堆</li><li>小顶堆</li></ul></li></ul></li></ul></li></ul></li><li>多叉树 <ul><li>B树（多叉 Balance Tree） <ul><li>2-3树（无实际作用）</li><li>2-3-4树（无实际作用）</li><li>B+ 树 <ul><li>B* 树</li></ul></li></ul></li></ul></li><li>其他： <ul><li>Trie树、字典树</li></ul></li></ul></li></ul><h3 id="仅供参考-不太正确" tabindex="-1"><a class="header-anchor" href="#仅供参考-不太正确"><span>仅供参考：（不太正确）</span></a></h3><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/32fd80f61e7b14e3c280179f91bbb24b.png" width="60%">',6)]))}]]),u=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/1.%E6%A0%91.html","title":"1.树","lang":"zh-CN","frontmatter":{"title":"1.树","date":"2025-06-17T14:52:46.000Z","author":"Navyum","tags":["树"],"categories":["数据结构"],"article":true,"index":true,"headerDepth":2,"sticky":false,"star":true,"description":"树 在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系 树结构是一种非线性存储结构，存储的是具有一对多关系的数据元素 树的分类： 树 二叉树 按树的结构： 满二叉树 完满二叉树 完全二叉树 按搜索功能： 查找：（索引） 二叉查找树（BST） 非平衡查找树 平衡树二叉树 AVL树： 红黑树 排序：（优先队列） 堆（完全二叉树的应用）...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91/1.%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"1.树"}],["meta",{"property":"og:description","content":"树 在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系 树结构是一种非线性存储结构，存储的是具有一对多关系的数据元素 树的分类： 树 二叉树 按树的结构： 满二叉树 完满二叉树 完全二叉树 按搜索功能： 查找：（索引） 二叉查找树（BST） 非平衡查找树 平衡树二叉树 AVL树： 红黑树 排序：（优先队列） 堆（完全二叉树的应用）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T07:42:14.000Z"}],["meta",{"property":"article:author","content":"Navyum"}],["meta",{"property":"article:tag","content":"树"}],["meta",{"property":"article:published_time","content":"2025-06-17T14:52:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T07:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-17T14:52:46.000Z\\",\\"dateModified\\":\\"2025-06-17T07:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750146134000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":1,"url":"https://github.com/Navyum"},{"name":"haijun_yang","username":"haijun_yang","email":"haijun_yang@intsig.net","commits":1,"url":"https://github.com/haijun_yang"}]},"readingTime":{"minutes":0.73,"words":220},"filePathRelative":"算法数据结构/数据结构/03.树/1.树.md","localizedDate":"2025年6月17日","excerpt":"<h2>树</h2>\\n<ul>\\n<li>在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系</li>\\n<li>树结构是一种非线性存储结构，存储的是具有<code>一对多</code>关系的数据元素</li>\\n</ul>\\n<h3>树的分类：</h3>\\n<ul>\\n<li>树\\n<ul>\\n<li>二叉树\\n<ul>\\n<li>按树的结构：\\n<ul>\\n<li>满二叉树</li>\\n<li>完满二叉树</li>\\n<li>完全二叉树</li>\\n</ul>\\n</li>\\n<li>按搜索功能：\\n<ul>\\n<li>查找：（索引）\\n<ul>\\n<li>二叉查找树（BST）\\n<ul>\\n<li>非平衡查找树</li>\\n<li>平衡树二叉树 AVL树：\\n<ul>\\n<li>红黑树</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>排序：（优先队列）\\n<ul>\\n<li>堆（完全二叉树的应用）\\n<ul>\\n<li>大顶堆</li>\\n<li>小顶堆</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>多叉树\\n<ul>\\n<li>B树（多叉 Balance Tree）\\n<ul>\\n<li>2-3树（无实际作用）</li>\\n<li>2-3-4树（无实际作用）</li>\\n<li>B+ 树\\n<ul>\\n<li>B* 树</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>其他：\\n<ul>\\n<li>Trie树、字典树</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);