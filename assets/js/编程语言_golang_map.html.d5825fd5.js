"use strict";(self.webpackChunknavyum_blog=self.webpackChunknavyum_blog||[]).push([[2046],{36995:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},68634:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>t,data:()=>l});var s=n(6254);const i={},t=(0,n(36995).A)(i,[["render",function(e,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<ol><li>map的结构体：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// A header for a Go map.</span></span>\n<span class="line"><span>type hmap struct {</span></span>\n<span class="line"><span>    // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span></span>\n<span class="line"><span>    // Make sure this stays in sync with the compiler&#39;s definition.</span></span>\n<span class="line"><span>    count     int // # live cells == size of map.  Must be first (used by len() builtin)</span></span>\n<span class="line"><span>    flags     uint8</span></span>\n<span class="line"><span>    B         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span>\n<span class="line"><span>    noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details</span></span>\n<span class="line"><span>    hash0     uint32 // hash seed,哈希函数</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.</span></span>\n<span class="line"><span>    oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing</span></span>\n<span class="line"><span>    nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    extra *mapextra // optional fields</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>bucket桶结构体:</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type bmap struct {</span></span>\n<span class="line"><span>    topbits  [8]uint8</span></span>\n<span class="line"><span>    keys     [8]keytype</span></span>\n<span class="line"><span>    values   [8]valuetype</span></span>\n<span class="line"><span>    pad      uintptr</span></span>\n<span class="line"><span>    overflow uintptr</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>hashmap结构图： a. B = 5，buckets num = 2^5</li></ol><p>b. bmap[0] 的bucket内，keys 已经装满8个，所以使用overflow 指向新的bucket，即拉链法</p><p>c. 插入: 使用hash函数计算出hash值，低8位用来查找对应的bucket，高8位用来在topbits内通过o(1)时间复杂度比较出对应key是否存在</p><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/67692c2b23152dbafd5f313645c95610.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ol start="4"><li><p>桶内的key存放按照key...key...value...value各自存放。好处：key和value类型不一样时，可以减少padding损耗（内存对齐）。 <img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b08d98123b8f7c7e68ae3b815db6a91d.png" alt="图片" loading="lazy"></p></li><li><p>map处于扩容中间态时的遍历: 核心: 2 倍扩容时，老 bucket 会分裂到 2 个新 bucket 中去。而遍历操作会按照新 bucket 的序号顺序进行，碰到老 bucket 未搬迁的情况时，要在老 bucket 中找到将来要搬迁到新 bucket 来的 key。</p></li></ol><p>B=1 扩容==&gt; B=2</p><figure><img src="https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0fc666ec4de9a548b052331b31144a5f.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>a. 假设经过初始化后，startBucket = 3，offset = 2。于是，遍历的起点将是 3 号 bucket 的 2 号 cell。</p><p>b. 因为 3 号 bucket 对应老的 1 号 bucket，因此先检查老 1 号 bucket 是否已经被搬迁过</p><p>c. 老 1 号 bucket 已经被搬迁过,所以它的 tophash[0] 值在 (0,4) 范围内，因此只用遍历新的 3 号 bucket。依次遍历 3 号 bucket 找到第一个非空的 key：元素 e</p><p>d. 继续从新 3 号 overflow bucket 中找到了元素 f 和 元素 g</p><p>e. 新3号 bucket 遍历完之后，回到了新 0 号 bucket。0 号 bucket 对应老的 0 号 bucket，经检查，老 0 号 bucket 并未搬迁，因此对新 0 号 bucket 的遍历就改为遍历老 0 号 bucket。</p><p>f. 老 0 号 bucket 在搬迁后将裂变成 2 个 bucket：新 0 号、新 2 号。而我们此时正在遍历的只是新 0 号 bucket。所以我们只会取出老 0 号 bucket 中那些在裂变之后，会被分配到新 0 号 bucket 中的那些 key。 （选择规则，基于hash值低位模4，得出bit = 00会被分配到新0号bucket），找到b、c</p><p>g. 遍历老的0号bucket会被分配到新bucket2（bit == 10）的key，找到a、d</p><p>h. 继续遍历到新 3 号 bucket 时，发现所有的 bucket 都已经遍历完毕</p><ol start="6"><li>key 遍历的结果是无序的： a. map 在扩容会发生 key 的搬迁，导致遍历结果无序。</li></ol><p>b. go 使用随机一个bucket + 随机序号的 cell(offset) 开始遍历的方式杜绝硬编码map出现有序的结果。目的就是避免误解以为map遍历是有序的。</p><ol start="7"><li>map 扩容重建： <ol><li>扩容使用渐进式扩容方式，和redis的全局哈希表一样</li><li>扩容条件：如果溢出桶的数量过多，或者 Map 超过了负载因子大小，Map 就要进行重建。负载因子 = 哈希表中的元素数量(counts) / 桶的数量 (2^B)。Go 语言中的负载因子为 6.5。</li></ol></li></ol>',22)]))}]]),l=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/map.html","title":"map","lang":"zh-CN","frontmatter":{"title":"map","author":"navyum","date":"2025-06-21T22:25:18.000Z","article":true,"index":true,"headerDepth":2,"sticky":false,"star":false,"category":["笔记"],"tag":["笔记"],"description":"map的结构体： bucket桶结构体: hashmap结构图： a. B = 5，buckets num = 2^5 b. bmap[0] 的bucket内，keys 已经装满8个，所以使用overflow 指向新的bucket，即拉链法 c. 插入: 使用hash函数计算出hash值，低8位用来查找对应的bucket，高8位用来在topbits内通...","head":[["meta",{"property":"og:url","content":"https://myblog.camscanner.top/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/map.html"}],["meta",{"property":"og:site_name","content":"Navyum\'s Blog"}],["meta",{"property":"og:title","content":"map"}],["meta",{"property":"og:description","content":"map的结构体： bucket桶结构体: hashmap结构图： a. B = 5，buckets num = 2^5 b. bmap[0] 的bucket内，keys 已经装满8个，所以使用overflow 指向新的bucket，即拉链法 c. 插入: 使用hash函数计算出hash值，低8位用来查找对应的bucket，高8位用来在topbits内通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/67692c2b23152dbafd5f313645c95610.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T14:30:17.000Z"}],["meta",{"property":"article:author","content":"navyum"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2025-06-21T22:25:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T14:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"map\\",\\"image\\":[\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/67692c2b23152dbafd5f313645c95610.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/b08d98123b8f7c7e68ae3b815db6a91d.png\\",\\"https://raw.staticdn.net/Navyum/imgbed/pic/IMG/0fc666ec4de9a548b052331b31144a5f.png\\"],\\"datePublished\\":\\"2025-06-21T22:25:18.000Z\\",\\"dateModified\\":\\"2025-06-21T14:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"navyum\\"}]}"]]},"git":{"createdTime":1749983452000,"updatedTime":1750516217000,"contributors":[{"name":"Navyum","username":"Navyum","email":"36869790+Navyum@users.noreply.github.com","commits":2,"url":"https://github.com/Navyum"}]},"readingTime":{"minutes":3.1,"words":930},"filePathRelative":"编程语言/golang/map.md","localizedDate":"2025年6月21日","excerpt":"<ol>\\n<li>map的结构体：</li>\\n</ol>\\n<div class=\\"language-plain line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"plain\\" data-title=\\"plain\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// A header for a Go map.</span></span>\\n<span class=\\"line\\"><span>type hmap struct {</span></span>\\n<span class=\\"line\\"><span>    // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span></span>\\n<span class=\\"line\\"><span>    // Make sure this stays in sync with the compiler\'s definition.</span></span>\\n<span class=\\"line\\"><span>    count     int // # live cells == size of map.  Must be first (used by len() builtin)</span></span>\\n<span class=\\"line\\"><span>    flags     uint8</span></span>\\n<span class=\\"line\\"><span>    B         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span>\\n<span class=\\"line\\"><span>    noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details</span></span>\\n<span class=\\"line\\"><span>    hash0     uint32 // hash seed,哈希函数</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.</span></span>\\n<span class=\\"line\\"><span>    oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing</span></span>\\n<span class=\\"line\\"><span>    nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    extra *mapextra // optional fields</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);