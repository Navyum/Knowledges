name: Sync Folders to Another Repo

on:
  push:
    branches: [ main ]  # 或你需要同步的分支
  workflow_dispatch:  # 手动触发

jobs:
  sync-md-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 0

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: Navyum/Knowledge
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: target
          persist-credentials: false
          fetch-depth: 0

      - name: Show workspace structure
        run: |
          pwd
          ls -la
          echo "=== Source repo ==="
          ls -la source/
          echo "=== Target repo ==="
          ls -la target/

      - name: Check TARGET_REPO_TOKEN
        run: |
          if [ -z "${{ secrets.TARGET_REPO_TOKEN }}" ]; then
            echo "Error: TARGET_REPO_TOKEN is not set or empty"
            exit 1
          else
            echo "TARGET_REPO_TOKEN is set"
            # 测试 token 是否有效（不显示 token 内容）
            if curl -s -H "Authorization: token ${{ secrets.TARGET_REPO_TOKEN }}" https://api.github.com/user | grep -q '"login"'; then
              echo "TARGET_REPO_TOKEN is valid"
            else
              echo "Error: TARGET_REPO_TOKEN is invalid"
              exit 1
            fi
          fi

      - name: Sync folders
        run: |
          echo "=== 同步文件夹 ==="
          # 递归删除目标仓库中所有非.开头的文件夹
          find target -maxdepth 1 -type d ! -name '.' ! -name '.*' -exec rm -rf {} +
          
          ls -la target
          # 复制源仓库的docs目录下的符合规则的文件夹到目标仓库
          DIRS=($(find source/docs -mindepth 1 -maxdepth 1 -type d ! -name '.' ! -name '.*' ! -name '_*' -printf '%f\n'))
          echo "要同步的文件夹: ${DIRS[@]}"
          for d in "${DIRS[@]}"; do
            echo "复制: source/docs/$d -> target/$d"
            cp -r "source/docs/$d" target/
          done
          
          echo "=== 同步后的目标仓库结构 ==="
          ls -la target/
          
          echo "=== 提交并推送 ==="
          cd target
          git config --global user.name "Sync Bot"
          git config --global user.email "sync-bot@example.com"
          
          echo "=== Git 状态 ==="
          git status
          git remote -v
          
          git add -A
          git commit -m "[sync] Force update from source repo" || exit 0
          
          # 设置远程 URL 使用 token
          git remote set-url origin https://${{ secrets.TARGET_REPO_TOKEN }}@github.com/Navyum/Knowledge.git
          
          echo "=== 推送前检查 ==="
          git remote -v
          git ls-remote origin main
          
          echo "=== 开始推送 ==="
          git push origin main
